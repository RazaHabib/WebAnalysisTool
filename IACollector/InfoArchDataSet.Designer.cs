//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace IACollector {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("InfoArchDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class InfoArchDataSet : global::System.Data.DataSet {
        
        private AnImageDataTable tableAnImage;
        
        private AnImageWithoutHeadingDataTable tableAnImageWithoutHeading;
        
        private CosineImageImageUnderSameHeadingDataTable tableCosineImageImageUnderSameHeading;
        
        private CosineImageImageWithoutHeadingDataTable tableCosineImageImageWithoutHeading;
        
        private CosineLinkLinkWithHeadingDataTable tableCosineLinkLinkWithHeading;
        
        private CosineLinkLinkWithHeadingTUBSDataTable tableCosineLinkLinkWithHeadingTUBS;
        
        private CosineLinkLinkWithoutHeadingDataTable tableCosineLinkLinkWithoutHeading;
        
        private CosineLinkLinkWithoutHeadingTUBSDataTable tableCosineLinkLinkWithoutHeadingTUBS;
        
        private GoalDataTable tableGoal;
        
        private HeadingDataTable tableHeading;
        
        private Heading_CosineDataTable tableHeading_Cosine;
        
        private HeadingModifiedDataTable tableHeadingModified;
        
        private HeadingPathAdequacy_CosineDataTable tableHeadingPathAdequacy_Cosine;
        
        private HeadingTUBSTVLDataTable tableHeadingTUBSTVL;
        
        private HeadingvsHeadinginSamePageCosinesDataTable tableHeadingvsHeadinginSamePageCosines;
        
        private HeadingvsHeadinginSamePageCosinesTUBSDataTable tableHeadingvsHeadinginSamePageCosinesTUBS;
        
        private LinkLinkTemplateOfLinksDataTable tableLinkLinkTemplateOfLinks;
        
        private LinkUnderHeading_CosineDataTable tableLinkUnderHeading_Cosine;
        
        private LinkUnderHeadingPathAdequacy_CosineDataTable tableLinkUnderHeadingPathAdequacy_Cosine;
        
        private LinkWithHeadingDataTable tableLinkWithHeading;
        
        private LinkWithHeadingTUBSDataTable tableLinkWithHeadingTUBS;
        
        private LinkWithHeadingTUBSModifiedDataTable tableLinkWithHeadingTUBSModified;
        
        private LinkWithoutHeadingDataTable tableLinkWithoutHeading;
        
        private LinkWithoutHeading_CosineDataTable tableLinkWithoutHeading_Cosine;
        
        private LinkWithoutHeadingPathAdequacy_CosineDataTable tableLinkWithoutHeadingPathAdequacy_Cosine;
        
        private LinkWithoutHeadingTemplateOfLinksDataTable tableLinkWithoutHeadingTemplateOfLinks;
        
        private LinkWithoutHeadingTemplateOfLinksTUBSDataTable tableLinkWithoutHeadingTemplateOfLinksTUBS;
        
        private LinkWithoutHeadingTUBSDataTable tableLinkWithoutHeadingTUBS;
        
        private LinkWithoutHeadingTUBSModifiedDataTable tableLinkWithoutHeadingTUBSModified;
        
        private Page_Visited_UnsuccessfullyDataTable tablePage_Visited_Unsuccessfully;
        
        private PageTemplateDataTable tablePageTemplate;
        
        private ParagraphDataTable tableParagraph;
        
        private Paragraph_CosineDataTable tableParagraph_Cosine;
        
        private ParagraphTUBSDataTable tableParagraphTUBS;
        
        private PathDataTable tablePath;
        
        private Solution_FoundDataTable tableSolution_Found;
        
        private TemplateOfLinksDataTable tableTemplateOfLinks;
        
        private TemplateOfLinks_CosineDataTable tableTemplateOfLinks_Cosine;
        
        private TemplateOfLinksTUBSDataTable tableTemplateOfLinksTUBS;
        
        private WebPageDataTable tableWebPage;
        
        private WebPageTUBSDataTable tableWebPageTUBS;
        
        private WebSiteDataTable tableWebSite;
        
        private global::System.Data.DataRelation relationFK_LinkWithHeading_Heading;
        
        private global::System.Data.DataRelation relationFK_LinkWithHeading_WebPage;
        
        private global::System.Data.DataRelation relationFK_LinkWithoutHeading_WebPage;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InfoArchDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected InfoArchDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AnImage"] != null)) {
                    base.Tables.Add(new AnImageDataTable(ds.Tables["AnImage"]));
                }
                if ((ds.Tables["AnImageWithoutHeading"] != null)) {
                    base.Tables.Add(new AnImageWithoutHeadingDataTable(ds.Tables["AnImageWithoutHeading"]));
                }
                if ((ds.Tables["CosineImageImageUnderSameHeading"] != null)) {
                    base.Tables.Add(new CosineImageImageUnderSameHeadingDataTable(ds.Tables["CosineImageImageUnderSameHeading"]));
                }
                if ((ds.Tables["CosineImageImageWithoutHeading"] != null)) {
                    base.Tables.Add(new CosineImageImageWithoutHeadingDataTable(ds.Tables["CosineImageImageWithoutHeading"]));
                }
                if ((ds.Tables["CosineLinkLinkWithHeading"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithHeadingDataTable(ds.Tables["CosineLinkLinkWithHeading"]));
                }
                if ((ds.Tables["CosineLinkLinkWithHeadingTUBS"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithHeadingTUBSDataTable(ds.Tables["CosineLinkLinkWithHeadingTUBS"]));
                }
                if ((ds.Tables["CosineLinkLinkWithoutHeading"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithoutHeadingDataTable(ds.Tables["CosineLinkLinkWithoutHeading"]));
                }
                if ((ds.Tables["CosineLinkLinkWithoutHeadingTUBS"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithoutHeadingTUBSDataTable(ds.Tables["CosineLinkLinkWithoutHeadingTUBS"]));
                }
                if ((ds.Tables["Goal"] != null)) {
                    base.Tables.Add(new GoalDataTable(ds.Tables["Goal"]));
                }
                if ((ds.Tables["Heading"] != null)) {
                    base.Tables.Add(new HeadingDataTable(ds.Tables["Heading"]));
                }
                if ((ds.Tables["Heading_Cosine"] != null)) {
                    base.Tables.Add(new Heading_CosineDataTable(ds.Tables["Heading_Cosine"]));
                }
                if ((ds.Tables["HeadingModified"] != null)) {
                    base.Tables.Add(new HeadingModifiedDataTable(ds.Tables["HeadingModified"]));
                }
                if ((ds.Tables["HeadingPathAdequacy_Cosine"] != null)) {
                    base.Tables.Add(new HeadingPathAdequacy_CosineDataTable(ds.Tables["HeadingPathAdequacy_Cosine"]));
                }
                if ((ds.Tables["HeadingTUBSTVL"] != null)) {
                    base.Tables.Add(new HeadingTUBSTVLDataTable(ds.Tables["HeadingTUBSTVL"]));
                }
                if ((ds.Tables["HeadingvsHeadinginSamePageCosines"] != null)) {
                    base.Tables.Add(new HeadingvsHeadinginSamePageCosinesDataTable(ds.Tables["HeadingvsHeadinginSamePageCosines"]));
                }
                if ((ds.Tables["HeadingvsHeadinginSamePageCosinesTUBS"] != null)) {
                    base.Tables.Add(new HeadingvsHeadinginSamePageCosinesTUBSDataTable(ds.Tables["HeadingvsHeadinginSamePageCosinesTUBS"]));
                }
                if ((ds.Tables["LinkLinkTemplateOfLinks"] != null)) {
                    base.Tables.Add(new LinkLinkTemplateOfLinksDataTable(ds.Tables["LinkLinkTemplateOfLinks"]));
                }
                if ((ds.Tables["LinkUnderHeading_Cosine"] != null)) {
                    base.Tables.Add(new LinkUnderHeading_CosineDataTable(ds.Tables["LinkUnderHeading_Cosine"]));
                }
                if ((ds.Tables["LinkUnderHeadingPathAdequacy_Cosine"] != null)) {
                    base.Tables.Add(new LinkUnderHeadingPathAdequacy_CosineDataTable(ds.Tables["LinkUnderHeadingPathAdequacy_Cosine"]));
                }
                if ((ds.Tables["LinkWithHeading"] != null)) {
                    base.Tables.Add(new LinkWithHeadingDataTable(ds.Tables["LinkWithHeading"]));
                }
                if ((ds.Tables["LinkWithHeadingTUBS"] != null)) {
                    base.Tables.Add(new LinkWithHeadingTUBSDataTable(ds.Tables["LinkWithHeadingTUBS"]));
                }
                if ((ds.Tables["LinkWithHeadingTUBSModified"] != null)) {
                    base.Tables.Add(new LinkWithHeadingTUBSModifiedDataTable(ds.Tables["LinkWithHeadingTUBSModified"]));
                }
                if ((ds.Tables["LinkWithoutHeading"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingDataTable(ds.Tables["LinkWithoutHeading"]));
                }
                if ((ds.Tables["LinkWithoutHeading_Cosine"] != null)) {
                    base.Tables.Add(new LinkWithoutHeading_CosineDataTable(ds.Tables["LinkWithoutHeading_Cosine"]));
                }
                if ((ds.Tables["LinkWithoutHeadingPathAdequacy_Cosine"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingPathAdequacy_CosineDataTable(ds.Tables["LinkWithoutHeadingPathAdequacy_Cosine"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTemplateOfLinks"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTemplateOfLinksDataTable(ds.Tables["LinkWithoutHeadingTemplateOfLinks"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTemplateOfLinksTUBS"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTemplateOfLinksTUBSDataTable(ds.Tables["LinkWithoutHeadingTemplateOfLinksTUBS"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTUBS"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTUBSDataTable(ds.Tables["LinkWithoutHeadingTUBS"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTUBSModified"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTUBSModifiedDataTable(ds.Tables["LinkWithoutHeadingTUBSModified"]));
                }
                if ((ds.Tables["Page_Visited_Unsuccessfully"] != null)) {
                    base.Tables.Add(new Page_Visited_UnsuccessfullyDataTable(ds.Tables["Page_Visited_Unsuccessfully"]));
                }
                if ((ds.Tables["PageTemplate"] != null)) {
                    base.Tables.Add(new PageTemplateDataTable(ds.Tables["PageTemplate"]));
                }
                if ((ds.Tables["Paragraph"] != null)) {
                    base.Tables.Add(new ParagraphDataTable(ds.Tables["Paragraph"]));
                }
                if ((ds.Tables["Paragraph_Cosine"] != null)) {
                    base.Tables.Add(new Paragraph_CosineDataTable(ds.Tables["Paragraph_Cosine"]));
                }
                if ((ds.Tables["ParagraphTUBS"] != null)) {
                    base.Tables.Add(new ParagraphTUBSDataTable(ds.Tables["ParagraphTUBS"]));
                }
                if ((ds.Tables["Path"] != null)) {
                    base.Tables.Add(new PathDataTable(ds.Tables["Path"]));
                }
                if ((ds.Tables["Solution_Found"] != null)) {
                    base.Tables.Add(new Solution_FoundDataTable(ds.Tables["Solution_Found"]));
                }
                if ((ds.Tables["TemplateOfLinks"] != null)) {
                    base.Tables.Add(new TemplateOfLinksDataTable(ds.Tables["TemplateOfLinks"]));
                }
                if ((ds.Tables["TemplateOfLinks_Cosine"] != null)) {
                    base.Tables.Add(new TemplateOfLinks_CosineDataTable(ds.Tables["TemplateOfLinks_Cosine"]));
                }
                if ((ds.Tables["TemplateOfLinksTUBS"] != null)) {
                    base.Tables.Add(new TemplateOfLinksTUBSDataTable(ds.Tables["TemplateOfLinksTUBS"]));
                }
                if ((ds.Tables["WebPage"] != null)) {
                    base.Tables.Add(new WebPageDataTable(ds.Tables["WebPage"]));
                }
                if ((ds.Tables["WebPageTUBS"] != null)) {
                    base.Tables.Add(new WebPageTUBSDataTable(ds.Tables["WebPageTUBS"]));
                }
                if ((ds.Tables["WebSite"] != null)) {
                    base.Tables.Add(new WebSiteDataTable(ds.Tables["WebSite"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnImageDataTable AnImage {
            get {
                return this.tableAnImage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnImageWithoutHeadingDataTable AnImageWithoutHeading {
            get {
                return this.tableAnImageWithoutHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CosineImageImageUnderSameHeadingDataTable CosineImageImageUnderSameHeading {
            get {
                return this.tableCosineImageImageUnderSameHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CosineImageImageWithoutHeadingDataTable CosineImageImageWithoutHeading {
            get {
                return this.tableCosineImageImageWithoutHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CosineLinkLinkWithHeadingDataTable CosineLinkLinkWithHeading {
            get {
                return this.tableCosineLinkLinkWithHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CosineLinkLinkWithHeadingTUBSDataTable CosineLinkLinkWithHeadingTUBS {
            get {
                return this.tableCosineLinkLinkWithHeadingTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CosineLinkLinkWithoutHeadingDataTable CosineLinkLinkWithoutHeading {
            get {
                return this.tableCosineLinkLinkWithoutHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CosineLinkLinkWithoutHeadingTUBSDataTable CosineLinkLinkWithoutHeadingTUBS {
            get {
                return this.tableCosineLinkLinkWithoutHeadingTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GoalDataTable Goal {
            get {
                return this.tableGoal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadingDataTable Heading {
            get {
                return this.tableHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Heading_CosineDataTable Heading_Cosine {
            get {
                return this.tableHeading_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadingModifiedDataTable HeadingModified {
            get {
                return this.tableHeadingModified;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadingPathAdequacy_CosineDataTable HeadingPathAdequacy_Cosine {
            get {
                return this.tableHeadingPathAdequacy_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadingTUBSTVLDataTable HeadingTUBSTVL {
            get {
                return this.tableHeadingTUBSTVL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadingvsHeadinginSamePageCosinesDataTable HeadingvsHeadinginSamePageCosines {
            get {
                return this.tableHeadingvsHeadinginSamePageCosines;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeadingvsHeadinginSamePageCosinesTUBSDataTable HeadingvsHeadinginSamePageCosinesTUBS {
            get {
                return this.tableHeadingvsHeadinginSamePageCosinesTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkLinkTemplateOfLinksDataTable LinkLinkTemplateOfLinks {
            get {
                return this.tableLinkLinkTemplateOfLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkUnderHeading_CosineDataTable LinkUnderHeading_Cosine {
            get {
                return this.tableLinkUnderHeading_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkUnderHeadingPathAdequacy_CosineDataTable LinkUnderHeadingPathAdequacy_Cosine {
            get {
                return this.tableLinkUnderHeadingPathAdequacy_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithHeadingDataTable LinkWithHeading {
            get {
                return this.tableLinkWithHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithHeadingTUBSDataTable LinkWithHeadingTUBS {
            get {
                return this.tableLinkWithHeadingTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithHeadingTUBSModifiedDataTable LinkWithHeadingTUBSModified {
            get {
                return this.tableLinkWithHeadingTUBSModified;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeadingDataTable LinkWithoutHeading {
            get {
                return this.tableLinkWithoutHeading;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeading_CosineDataTable LinkWithoutHeading_Cosine {
            get {
                return this.tableLinkWithoutHeading_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeadingPathAdequacy_CosineDataTable LinkWithoutHeadingPathAdequacy_Cosine {
            get {
                return this.tableLinkWithoutHeadingPathAdequacy_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeadingTemplateOfLinksDataTable LinkWithoutHeadingTemplateOfLinks {
            get {
                return this.tableLinkWithoutHeadingTemplateOfLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeadingTemplateOfLinksTUBSDataTable LinkWithoutHeadingTemplateOfLinksTUBS {
            get {
                return this.tableLinkWithoutHeadingTemplateOfLinksTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeadingTUBSDataTable LinkWithoutHeadingTUBS {
            get {
                return this.tableLinkWithoutHeadingTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkWithoutHeadingTUBSModifiedDataTable LinkWithoutHeadingTUBSModified {
            get {
                return this.tableLinkWithoutHeadingTUBSModified;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Page_Visited_UnsuccessfullyDataTable Page_Visited_Unsuccessfully {
            get {
                return this.tablePage_Visited_Unsuccessfully;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PageTemplateDataTable PageTemplate {
            get {
                return this.tablePageTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParagraphDataTable Paragraph {
            get {
                return this.tableParagraph;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Paragraph_CosineDataTable Paragraph_Cosine {
            get {
                return this.tableParagraph_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParagraphTUBSDataTable ParagraphTUBS {
            get {
                return this.tableParagraphTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PathDataTable Path {
            get {
                return this.tablePath;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Solution_FoundDataTable Solution_Found {
            get {
                return this.tableSolution_Found;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateOfLinksDataTable TemplateOfLinks {
            get {
                return this.tableTemplateOfLinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateOfLinks_CosineDataTable TemplateOfLinks_Cosine {
            get {
                return this.tableTemplateOfLinks_Cosine;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateOfLinksTUBSDataTable TemplateOfLinksTUBS {
            get {
                return this.tableTemplateOfLinksTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WebPageDataTable WebPage {
            get {
                return this.tableWebPage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WebPageTUBSDataTable WebPageTUBS {
            get {
                return this.tableWebPageTUBS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WebSiteDataTable WebSite {
            get {
                return this.tableWebSite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            InfoArchDataSet cln = ((InfoArchDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AnImage"] != null)) {
                    base.Tables.Add(new AnImageDataTable(ds.Tables["AnImage"]));
                }
                if ((ds.Tables["AnImageWithoutHeading"] != null)) {
                    base.Tables.Add(new AnImageWithoutHeadingDataTable(ds.Tables["AnImageWithoutHeading"]));
                }
                if ((ds.Tables["CosineImageImageUnderSameHeading"] != null)) {
                    base.Tables.Add(new CosineImageImageUnderSameHeadingDataTable(ds.Tables["CosineImageImageUnderSameHeading"]));
                }
                if ((ds.Tables["CosineImageImageWithoutHeading"] != null)) {
                    base.Tables.Add(new CosineImageImageWithoutHeadingDataTable(ds.Tables["CosineImageImageWithoutHeading"]));
                }
                if ((ds.Tables["CosineLinkLinkWithHeading"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithHeadingDataTable(ds.Tables["CosineLinkLinkWithHeading"]));
                }
                if ((ds.Tables["CosineLinkLinkWithHeadingTUBS"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithHeadingTUBSDataTable(ds.Tables["CosineLinkLinkWithHeadingTUBS"]));
                }
                if ((ds.Tables["CosineLinkLinkWithoutHeading"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithoutHeadingDataTable(ds.Tables["CosineLinkLinkWithoutHeading"]));
                }
                if ((ds.Tables["CosineLinkLinkWithoutHeadingTUBS"] != null)) {
                    base.Tables.Add(new CosineLinkLinkWithoutHeadingTUBSDataTable(ds.Tables["CosineLinkLinkWithoutHeadingTUBS"]));
                }
                if ((ds.Tables["Goal"] != null)) {
                    base.Tables.Add(new GoalDataTable(ds.Tables["Goal"]));
                }
                if ((ds.Tables["Heading"] != null)) {
                    base.Tables.Add(new HeadingDataTable(ds.Tables["Heading"]));
                }
                if ((ds.Tables["Heading_Cosine"] != null)) {
                    base.Tables.Add(new Heading_CosineDataTable(ds.Tables["Heading_Cosine"]));
                }
                if ((ds.Tables["HeadingModified"] != null)) {
                    base.Tables.Add(new HeadingModifiedDataTable(ds.Tables["HeadingModified"]));
                }
                if ((ds.Tables["HeadingPathAdequacy_Cosine"] != null)) {
                    base.Tables.Add(new HeadingPathAdequacy_CosineDataTable(ds.Tables["HeadingPathAdequacy_Cosine"]));
                }
                if ((ds.Tables["HeadingTUBSTVL"] != null)) {
                    base.Tables.Add(new HeadingTUBSTVLDataTable(ds.Tables["HeadingTUBSTVL"]));
                }
                if ((ds.Tables["HeadingvsHeadinginSamePageCosines"] != null)) {
                    base.Tables.Add(new HeadingvsHeadinginSamePageCosinesDataTable(ds.Tables["HeadingvsHeadinginSamePageCosines"]));
                }
                if ((ds.Tables["HeadingvsHeadinginSamePageCosinesTUBS"] != null)) {
                    base.Tables.Add(new HeadingvsHeadinginSamePageCosinesTUBSDataTable(ds.Tables["HeadingvsHeadinginSamePageCosinesTUBS"]));
                }
                if ((ds.Tables["LinkLinkTemplateOfLinks"] != null)) {
                    base.Tables.Add(new LinkLinkTemplateOfLinksDataTable(ds.Tables["LinkLinkTemplateOfLinks"]));
                }
                if ((ds.Tables["LinkUnderHeading_Cosine"] != null)) {
                    base.Tables.Add(new LinkUnderHeading_CosineDataTable(ds.Tables["LinkUnderHeading_Cosine"]));
                }
                if ((ds.Tables["LinkUnderHeadingPathAdequacy_Cosine"] != null)) {
                    base.Tables.Add(new LinkUnderHeadingPathAdequacy_CosineDataTable(ds.Tables["LinkUnderHeadingPathAdequacy_Cosine"]));
                }
                if ((ds.Tables["LinkWithHeading"] != null)) {
                    base.Tables.Add(new LinkWithHeadingDataTable(ds.Tables["LinkWithHeading"]));
                }
                if ((ds.Tables["LinkWithHeadingTUBS"] != null)) {
                    base.Tables.Add(new LinkWithHeadingTUBSDataTable(ds.Tables["LinkWithHeadingTUBS"]));
                }
                if ((ds.Tables["LinkWithHeadingTUBSModified"] != null)) {
                    base.Tables.Add(new LinkWithHeadingTUBSModifiedDataTable(ds.Tables["LinkWithHeadingTUBSModified"]));
                }
                if ((ds.Tables["LinkWithoutHeading"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingDataTable(ds.Tables["LinkWithoutHeading"]));
                }
                if ((ds.Tables["LinkWithoutHeading_Cosine"] != null)) {
                    base.Tables.Add(new LinkWithoutHeading_CosineDataTable(ds.Tables["LinkWithoutHeading_Cosine"]));
                }
                if ((ds.Tables["LinkWithoutHeadingPathAdequacy_Cosine"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingPathAdequacy_CosineDataTable(ds.Tables["LinkWithoutHeadingPathAdequacy_Cosine"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTemplateOfLinks"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTemplateOfLinksDataTable(ds.Tables["LinkWithoutHeadingTemplateOfLinks"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTemplateOfLinksTUBS"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTemplateOfLinksTUBSDataTable(ds.Tables["LinkWithoutHeadingTemplateOfLinksTUBS"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTUBS"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTUBSDataTable(ds.Tables["LinkWithoutHeadingTUBS"]));
                }
                if ((ds.Tables["LinkWithoutHeadingTUBSModified"] != null)) {
                    base.Tables.Add(new LinkWithoutHeadingTUBSModifiedDataTable(ds.Tables["LinkWithoutHeadingTUBSModified"]));
                }
                if ((ds.Tables["Page_Visited_Unsuccessfully"] != null)) {
                    base.Tables.Add(new Page_Visited_UnsuccessfullyDataTable(ds.Tables["Page_Visited_Unsuccessfully"]));
                }
                if ((ds.Tables["PageTemplate"] != null)) {
                    base.Tables.Add(new PageTemplateDataTable(ds.Tables["PageTemplate"]));
                }
                if ((ds.Tables["Paragraph"] != null)) {
                    base.Tables.Add(new ParagraphDataTable(ds.Tables["Paragraph"]));
                }
                if ((ds.Tables["Paragraph_Cosine"] != null)) {
                    base.Tables.Add(new Paragraph_CosineDataTable(ds.Tables["Paragraph_Cosine"]));
                }
                if ((ds.Tables["ParagraphTUBS"] != null)) {
                    base.Tables.Add(new ParagraphTUBSDataTable(ds.Tables["ParagraphTUBS"]));
                }
                if ((ds.Tables["Path"] != null)) {
                    base.Tables.Add(new PathDataTable(ds.Tables["Path"]));
                }
                if ((ds.Tables["Solution_Found"] != null)) {
                    base.Tables.Add(new Solution_FoundDataTable(ds.Tables["Solution_Found"]));
                }
                if ((ds.Tables["TemplateOfLinks"] != null)) {
                    base.Tables.Add(new TemplateOfLinksDataTable(ds.Tables["TemplateOfLinks"]));
                }
                if ((ds.Tables["TemplateOfLinks_Cosine"] != null)) {
                    base.Tables.Add(new TemplateOfLinks_CosineDataTable(ds.Tables["TemplateOfLinks_Cosine"]));
                }
                if ((ds.Tables["TemplateOfLinksTUBS"] != null)) {
                    base.Tables.Add(new TemplateOfLinksTUBSDataTable(ds.Tables["TemplateOfLinksTUBS"]));
                }
                if ((ds.Tables["WebPage"] != null)) {
                    base.Tables.Add(new WebPageDataTable(ds.Tables["WebPage"]));
                }
                if ((ds.Tables["WebPageTUBS"] != null)) {
                    base.Tables.Add(new WebPageTUBSDataTable(ds.Tables["WebPageTUBS"]));
                }
                if ((ds.Tables["WebSite"] != null)) {
                    base.Tables.Add(new WebSiteDataTable(ds.Tables["WebSite"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAnImage = ((AnImageDataTable)(base.Tables["AnImage"]));
            if ((initTable == true)) {
                if ((this.tableAnImage != null)) {
                    this.tableAnImage.InitVars();
                }
            }
            this.tableAnImageWithoutHeading = ((AnImageWithoutHeadingDataTable)(base.Tables["AnImageWithoutHeading"]));
            if ((initTable == true)) {
                if ((this.tableAnImageWithoutHeading != null)) {
                    this.tableAnImageWithoutHeading.InitVars();
                }
            }
            this.tableCosineImageImageUnderSameHeading = ((CosineImageImageUnderSameHeadingDataTable)(base.Tables["CosineImageImageUnderSameHeading"]));
            if ((initTable == true)) {
                if ((this.tableCosineImageImageUnderSameHeading != null)) {
                    this.tableCosineImageImageUnderSameHeading.InitVars();
                }
            }
            this.tableCosineImageImageWithoutHeading = ((CosineImageImageWithoutHeadingDataTable)(base.Tables["CosineImageImageWithoutHeading"]));
            if ((initTable == true)) {
                if ((this.tableCosineImageImageWithoutHeading != null)) {
                    this.tableCosineImageImageWithoutHeading.InitVars();
                }
            }
            this.tableCosineLinkLinkWithHeading = ((CosineLinkLinkWithHeadingDataTable)(base.Tables["CosineLinkLinkWithHeading"]));
            if ((initTable == true)) {
                if ((this.tableCosineLinkLinkWithHeading != null)) {
                    this.tableCosineLinkLinkWithHeading.InitVars();
                }
            }
            this.tableCosineLinkLinkWithHeadingTUBS = ((CosineLinkLinkWithHeadingTUBSDataTable)(base.Tables["CosineLinkLinkWithHeadingTUBS"]));
            if ((initTable == true)) {
                if ((this.tableCosineLinkLinkWithHeadingTUBS != null)) {
                    this.tableCosineLinkLinkWithHeadingTUBS.InitVars();
                }
            }
            this.tableCosineLinkLinkWithoutHeading = ((CosineLinkLinkWithoutHeadingDataTable)(base.Tables["CosineLinkLinkWithoutHeading"]));
            if ((initTable == true)) {
                if ((this.tableCosineLinkLinkWithoutHeading != null)) {
                    this.tableCosineLinkLinkWithoutHeading.InitVars();
                }
            }
            this.tableCosineLinkLinkWithoutHeadingTUBS = ((CosineLinkLinkWithoutHeadingTUBSDataTable)(base.Tables["CosineLinkLinkWithoutHeadingTUBS"]));
            if ((initTable == true)) {
                if ((this.tableCosineLinkLinkWithoutHeadingTUBS != null)) {
                    this.tableCosineLinkLinkWithoutHeadingTUBS.InitVars();
                }
            }
            this.tableGoal = ((GoalDataTable)(base.Tables["Goal"]));
            if ((initTable == true)) {
                if ((this.tableGoal != null)) {
                    this.tableGoal.InitVars();
                }
            }
            this.tableHeading = ((HeadingDataTable)(base.Tables["Heading"]));
            if ((initTable == true)) {
                if ((this.tableHeading != null)) {
                    this.tableHeading.InitVars();
                }
            }
            this.tableHeading_Cosine = ((Heading_CosineDataTable)(base.Tables["Heading_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableHeading_Cosine != null)) {
                    this.tableHeading_Cosine.InitVars();
                }
            }
            this.tableHeadingModified = ((HeadingModifiedDataTable)(base.Tables["HeadingModified"]));
            if ((initTable == true)) {
                if ((this.tableHeadingModified != null)) {
                    this.tableHeadingModified.InitVars();
                }
            }
            this.tableHeadingPathAdequacy_Cosine = ((HeadingPathAdequacy_CosineDataTable)(base.Tables["HeadingPathAdequacy_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableHeadingPathAdequacy_Cosine != null)) {
                    this.tableHeadingPathAdequacy_Cosine.InitVars();
                }
            }
            this.tableHeadingTUBSTVL = ((HeadingTUBSTVLDataTable)(base.Tables["HeadingTUBSTVL"]));
            if ((initTable == true)) {
                if ((this.tableHeadingTUBSTVL != null)) {
                    this.tableHeadingTUBSTVL.InitVars();
                }
            }
            this.tableHeadingvsHeadinginSamePageCosines = ((HeadingvsHeadinginSamePageCosinesDataTable)(base.Tables["HeadingvsHeadinginSamePageCosines"]));
            if ((initTable == true)) {
                if ((this.tableHeadingvsHeadinginSamePageCosines != null)) {
                    this.tableHeadingvsHeadinginSamePageCosines.InitVars();
                }
            }
            this.tableHeadingvsHeadinginSamePageCosinesTUBS = ((HeadingvsHeadinginSamePageCosinesTUBSDataTable)(base.Tables["HeadingvsHeadinginSamePageCosinesTUBS"]));
            if ((initTable == true)) {
                if ((this.tableHeadingvsHeadinginSamePageCosinesTUBS != null)) {
                    this.tableHeadingvsHeadinginSamePageCosinesTUBS.InitVars();
                }
            }
            this.tableLinkLinkTemplateOfLinks = ((LinkLinkTemplateOfLinksDataTable)(base.Tables["LinkLinkTemplateOfLinks"]));
            if ((initTable == true)) {
                if ((this.tableLinkLinkTemplateOfLinks != null)) {
                    this.tableLinkLinkTemplateOfLinks.InitVars();
                }
            }
            this.tableLinkUnderHeading_Cosine = ((LinkUnderHeading_CosineDataTable)(base.Tables["LinkUnderHeading_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableLinkUnderHeading_Cosine != null)) {
                    this.tableLinkUnderHeading_Cosine.InitVars();
                }
            }
            this.tableLinkUnderHeadingPathAdequacy_Cosine = ((LinkUnderHeadingPathAdequacy_CosineDataTable)(base.Tables["LinkUnderHeadingPathAdequacy_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableLinkUnderHeadingPathAdequacy_Cosine != null)) {
                    this.tableLinkUnderHeadingPathAdequacy_Cosine.InitVars();
                }
            }
            this.tableLinkWithHeading = ((LinkWithHeadingDataTable)(base.Tables["LinkWithHeading"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithHeading != null)) {
                    this.tableLinkWithHeading.InitVars();
                }
            }
            this.tableLinkWithHeadingTUBS = ((LinkWithHeadingTUBSDataTable)(base.Tables["LinkWithHeadingTUBS"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithHeadingTUBS != null)) {
                    this.tableLinkWithHeadingTUBS.InitVars();
                }
            }
            this.tableLinkWithHeadingTUBSModified = ((LinkWithHeadingTUBSModifiedDataTable)(base.Tables["LinkWithHeadingTUBSModified"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithHeadingTUBSModified != null)) {
                    this.tableLinkWithHeadingTUBSModified.InitVars();
                }
            }
            this.tableLinkWithoutHeading = ((LinkWithoutHeadingDataTable)(base.Tables["LinkWithoutHeading"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeading != null)) {
                    this.tableLinkWithoutHeading.InitVars();
                }
            }
            this.tableLinkWithoutHeading_Cosine = ((LinkWithoutHeading_CosineDataTable)(base.Tables["LinkWithoutHeading_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeading_Cosine != null)) {
                    this.tableLinkWithoutHeading_Cosine.InitVars();
                }
            }
            this.tableLinkWithoutHeadingPathAdequacy_Cosine = ((LinkWithoutHeadingPathAdequacy_CosineDataTable)(base.Tables["LinkWithoutHeadingPathAdequacy_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeadingPathAdequacy_Cosine != null)) {
                    this.tableLinkWithoutHeadingPathAdequacy_Cosine.InitVars();
                }
            }
            this.tableLinkWithoutHeadingTemplateOfLinks = ((LinkWithoutHeadingTemplateOfLinksDataTable)(base.Tables["LinkWithoutHeadingTemplateOfLinks"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeadingTemplateOfLinks != null)) {
                    this.tableLinkWithoutHeadingTemplateOfLinks.InitVars();
                }
            }
            this.tableLinkWithoutHeadingTemplateOfLinksTUBS = ((LinkWithoutHeadingTemplateOfLinksTUBSDataTable)(base.Tables["LinkWithoutHeadingTemplateOfLinksTUBS"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeadingTemplateOfLinksTUBS != null)) {
                    this.tableLinkWithoutHeadingTemplateOfLinksTUBS.InitVars();
                }
            }
            this.tableLinkWithoutHeadingTUBS = ((LinkWithoutHeadingTUBSDataTable)(base.Tables["LinkWithoutHeadingTUBS"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeadingTUBS != null)) {
                    this.tableLinkWithoutHeadingTUBS.InitVars();
                }
            }
            this.tableLinkWithoutHeadingTUBSModified = ((LinkWithoutHeadingTUBSModifiedDataTable)(base.Tables["LinkWithoutHeadingTUBSModified"]));
            if ((initTable == true)) {
                if ((this.tableLinkWithoutHeadingTUBSModified != null)) {
                    this.tableLinkWithoutHeadingTUBSModified.InitVars();
                }
            }
            this.tablePage_Visited_Unsuccessfully = ((Page_Visited_UnsuccessfullyDataTable)(base.Tables["Page_Visited_Unsuccessfully"]));
            if ((initTable == true)) {
                if ((this.tablePage_Visited_Unsuccessfully != null)) {
                    this.tablePage_Visited_Unsuccessfully.InitVars();
                }
            }
            this.tablePageTemplate = ((PageTemplateDataTable)(base.Tables["PageTemplate"]));
            if ((initTable == true)) {
                if ((this.tablePageTemplate != null)) {
                    this.tablePageTemplate.InitVars();
                }
            }
            this.tableParagraph = ((ParagraphDataTable)(base.Tables["Paragraph"]));
            if ((initTable == true)) {
                if ((this.tableParagraph != null)) {
                    this.tableParagraph.InitVars();
                }
            }
            this.tableParagraph_Cosine = ((Paragraph_CosineDataTable)(base.Tables["Paragraph_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableParagraph_Cosine != null)) {
                    this.tableParagraph_Cosine.InitVars();
                }
            }
            this.tableParagraphTUBS = ((ParagraphTUBSDataTable)(base.Tables["ParagraphTUBS"]));
            if ((initTable == true)) {
                if ((this.tableParagraphTUBS != null)) {
                    this.tableParagraphTUBS.InitVars();
                }
            }
            this.tablePath = ((PathDataTable)(base.Tables["Path"]));
            if ((initTable == true)) {
                if ((this.tablePath != null)) {
                    this.tablePath.InitVars();
                }
            }
            this.tableSolution_Found = ((Solution_FoundDataTable)(base.Tables["Solution_Found"]));
            if ((initTable == true)) {
                if ((this.tableSolution_Found != null)) {
                    this.tableSolution_Found.InitVars();
                }
            }
            this.tableTemplateOfLinks = ((TemplateOfLinksDataTable)(base.Tables["TemplateOfLinks"]));
            if ((initTable == true)) {
                if ((this.tableTemplateOfLinks != null)) {
                    this.tableTemplateOfLinks.InitVars();
                }
            }
            this.tableTemplateOfLinks_Cosine = ((TemplateOfLinks_CosineDataTable)(base.Tables["TemplateOfLinks_Cosine"]));
            if ((initTable == true)) {
                if ((this.tableTemplateOfLinks_Cosine != null)) {
                    this.tableTemplateOfLinks_Cosine.InitVars();
                }
            }
            this.tableTemplateOfLinksTUBS = ((TemplateOfLinksTUBSDataTable)(base.Tables["TemplateOfLinksTUBS"]));
            if ((initTable == true)) {
                if ((this.tableTemplateOfLinksTUBS != null)) {
                    this.tableTemplateOfLinksTUBS.InitVars();
                }
            }
            this.tableWebPage = ((WebPageDataTable)(base.Tables["WebPage"]));
            if ((initTable == true)) {
                if ((this.tableWebPage != null)) {
                    this.tableWebPage.InitVars();
                }
            }
            this.tableWebPageTUBS = ((WebPageTUBSDataTable)(base.Tables["WebPageTUBS"]));
            if ((initTable == true)) {
                if ((this.tableWebPageTUBS != null)) {
                    this.tableWebPageTUBS.InitVars();
                }
            }
            this.tableWebSite = ((WebSiteDataTable)(base.Tables["WebSite"]));
            if ((initTable == true)) {
                if ((this.tableWebSite != null)) {
                    this.tableWebSite.InitVars();
                }
            }
            this.relationFK_LinkWithHeading_Heading = this.Relations["FK_LinkWithHeading_Heading"];
            this.relationFK_LinkWithHeading_WebPage = this.Relations["FK_LinkWithHeading_WebPage"];
            this.relationFK_LinkWithoutHeading_WebPage = this.Relations["FK_LinkWithoutHeading_WebPage"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "InfoArchDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/InfoArchDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAnImage = new AnImageDataTable();
            base.Tables.Add(this.tableAnImage);
            this.tableAnImageWithoutHeading = new AnImageWithoutHeadingDataTable();
            base.Tables.Add(this.tableAnImageWithoutHeading);
            this.tableCosineImageImageUnderSameHeading = new CosineImageImageUnderSameHeadingDataTable();
            base.Tables.Add(this.tableCosineImageImageUnderSameHeading);
            this.tableCosineImageImageWithoutHeading = new CosineImageImageWithoutHeadingDataTable();
            base.Tables.Add(this.tableCosineImageImageWithoutHeading);
            this.tableCosineLinkLinkWithHeading = new CosineLinkLinkWithHeadingDataTable();
            base.Tables.Add(this.tableCosineLinkLinkWithHeading);
            this.tableCosineLinkLinkWithHeadingTUBS = new CosineLinkLinkWithHeadingTUBSDataTable();
            base.Tables.Add(this.tableCosineLinkLinkWithHeadingTUBS);
            this.tableCosineLinkLinkWithoutHeading = new CosineLinkLinkWithoutHeadingDataTable();
            base.Tables.Add(this.tableCosineLinkLinkWithoutHeading);
            this.tableCosineLinkLinkWithoutHeadingTUBS = new CosineLinkLinkWithoutHeadingTUBSDataTable();
            base.Tables.Add(this.tableCosineLinkLinkWithoutHeadingTUBS);
            this.tableGoal = new GoalDataTable();
            base.Tables.Add(this.tableGoal);
            this.tableHeading = new HeadingDataTable();
            base.Tables.Add(this.tableHeading);
            this.tableHeading_Cosine = new Heading_CosineDataTable();
            base.Tables.Add(this.tableHeading_Cosine);
            this.tableHeadingModified = new HeadingModifiedDataTable();
            base.Tables.Add(this.tableHeadingModified);
            this.tableHeadingPathAdequacy_Cosine = new HeadingPathAdequacy_CosineDataTable();
            base.Tables.Add(this.tableHeadingPathAdequacy_Cosine);
            this.tableHeadingTUBSTVL = new HeadingTUBSTVLDataTable();
            base.Tables.Add(this.tableHeadingTUBSTVL);
            this.tableHeadingvsHeadinginSamePageCosines = new HeadingvsHeadinginSamePageCosinesDataTable();
            base.Tables.Add(this.tableHeadingvsHeadinginSamePageCosines);
            this.tableHeadingvsHeadinginSamePageCosinesTUBS = new HeadingvsHeadinginSamePageCosinesTUBSDataTable();
            base.Tables.Add(this.tableHeadingvsHeadinginSamePageCosinesTUBS);
            this.tableLinkLinkTemplateOfLinks = new LinkLinkTemplateOfLinksDataTable();
            base.Tables.Add(this.tableLinkLinkTemplateOfLinks);
            this.tableLinkUnderHeading_Cosine = new LinkUnderHeading_CosineDataTable();
            base.Tables.Add(this.tableLinkUnderHeading_Cosine);
            this.tableLinkUnderHeadingPathAdequacy_Cosine = new LinkUnderHeadingPathAdequacy_CosineDataTable();
            base.Tables.Add(this.tableLinkUnderHeadingPathAdequacy_Cosine);
            this.tableLinkWithHeading = new LinkWithHeadingDataTable();
            base.Tables.Add(this.tableLinkWithHeading);
            this.tableLinkWithHeadingTUBS = new LinkWithHeadingTUBSDataTable();
            base.Tables.Add(this.tableLinkWithHeadingTUBS);
            this.tableLinkWithHeadingTUBSModified = new LinkWithHeadingTUBSModifiedDataTable();
            base.Tables.Add(this.tableLinkWithHeadingTUBSModified);
            this.tableLinkWithoutHeading = new LinkWithoutHeadingDataTable();
            base.Tables.Add(this.tableLinkWithoutHeading);
            this.tableLinkWithoutHeading_Cosine = new LinkWithoutHeading_CosineDataTable();
            base.Tables.Add(this.tableLinkWithoutHeading_Cosine);
            this.tableLinkWithoutHeadingPathAdequacy_Cosine = new LinkWithoutHeadingPathAdequacy_CosineDataTable();
            base.Tables.Add(this.tableLinkWithoutHeadingPathAdequacy_Cosine);
            this.tableLinkWithoutHeadingTemplateOfLinks = new LinkWithoutHeadingTemplateOfLinksDataTable();
            base.Tables.Add(this.tableLinkWithoutHeadingTemplateOfLinks);
            this.tableLinkWithoutHeadingTemplateOfLinksTUBS = new LinkWithoutHeadingTemplateOfLinksTUBSDataTable();
            base.Tables.Add(this.tableLinkWithoutHeadingTemplateOfLinksTUBS);
            this.tableLinkWithoutHeadingTUBS = new LinkWithoutHeadingTUBSDataTable();
            base.Tables.Add(this.tableLinkWithoutHeadingTUBS);
            this.tableLinkWithoutHeadingTUBSModified = new LinkWithoutHeadingTUBSModifiedDataTable();
            base.Tables.Add(this.tableLinkWithoutHeadingTUBSModified);
            this.tablePage_Visited_Unsuccessfully = new Page_Visited_UnsuccessfullyDataTable();
            base.Tables.Add(this.tablePage_Visited_Unsuccessfully);
            this.tablePageTemplate = new PageTemplateDataTable();
            base.Tables.Add(this.tablePageTemplate);
            this.tableParagraph = new ParagraphDataTable();
            base.Tables.Add(this.tableParagraph);
            this.tableParagraph_Cosine = new Paragraph_CosineDataTable();
            base.Tables.Add(this.tableParagraph_Cosine);
            this.tableParagraphTUBS = new ParagraphTUBSDataTable();
            base.Tables.Add(this.tableParagraphTUBS);
            this.tablePath = new PathDataTable();
            base.Tables.Add(this.tablePath);
            this.tableSolution_Found = new Solution_FoundDataTable();
            base.Tables.Add(this.tableSolution_Found);
            this.tableTemplateOfLinks = new TemplateOfLinksDataTable();
            base.Tables.Add(this.tableTemplateOfLinks);
            this.tableTemplateOfLinks_Cosine = new TemplateOfLinks_CosineDataTable();
            base.Tables.Add(this.tableTemplateOfLinks_Cosine);
            this.tableTemplateOfLinksTUBS = new TemplateOfLinksTUBSDataTable();
            base.Tables.Add(this.tableTemplateOfLinksTUBS);
            this.tableWebPage = new WebPageDataTable();
            base.Tables.Add(this.tableWebPage);
            this.tableWebPageTUBS = new WebPageTUBSDataTable();
            base.Tables.Add(this.tableWebPageTUBS);
            this.tableWebSite = new WebSiteDataTable();
            base.Tables.Add(this.tableWebSite);
            this.relationFK_LinkWithHeading_Heading = new global::System.Data.DataRelation("FK_LinkWithHeading_Heading", new global::System.Data.DataColumn[] {
                        this.tableHeading.HeadingIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkWithHeading.HeadingIdColumn}, false);
            this.Relations.Add(this.relationFK_LinkWithHeading_Heading);
            this.relationFK_LinkWithHeading_WebPage = new global::System.Data.DataRelation("FK_LinkWithHeading_WebPage", new global::System.Data.DataColumn[] {
                        this.tableWebPage.WebPageIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkWithHeading.WebPageIdColumn}, false);
            this.Relations.Add(this.relationFK_LinkWithHeading_WebPage);
            this.relationFK_LinkWithoutHeading_WebPage = new global::System.Data.DataRelation("FK_LinkWithoutHeading_WebPage", new global::System.Data.DataColumn[] {
                        this.tableWebPage.WebPageIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkWithoutHeading.WebPageIdColumn}, false);
            this.Relations.Add(this.relationFK_LinkWithoutHeading_WebPage);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnImage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAnImageWithoutHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCosineImageImageUnderSameHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCosineImageImageWithoutHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCosineLinkLinkWithHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCosineLinkLinkWithHeadingTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCosineLinkLinkWithoutHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCosineLinkLinkWithoutHeadingTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGoal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeading_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeadingModified() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeadingPathAdequacy_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeadingTUBSTVL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeadingvsHeadinginSamePageCosines() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeadingvsHeadinginSamePageCosinesTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkLinkTemplateOfLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkUnderHeading_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkUnderHeadingPathAdequacy_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithHeadingTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithHeadingTUBSModified() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeading() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeading_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeadingPathAdequacy_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeadingTemplateOfLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeadingTemplateOfLinksTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeadingTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkWithoutHeadingTUBSModified() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePage_Visited_Unsuccessfully() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePageTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParagraph() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParagraph_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParagraphTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePath() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSolution_Found() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplateOfLinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplateOfLinks_Cosine() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplateOfLinksTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWebPage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWebPageTUBS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWebSite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            InfoArchDataSet ds = new InfoArchDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AnImageRowChangeEventHandler(object sender, AnImageRowChangeEvent e);
        
        public delegate void AnImageWithoutHeadingRowChangeEventHandler(object sender, AnImageWithoutHeadingRowChangeEvent e);
        
        public delegate void CosineImageImageUnderSameHeadingRowChangeEventHandler(object sender, CosineImageImageUnderSameHeadingRowChangeEvent e);
        
        public delegate void CosineImageImageWithoutHeadingRowChangeEventHandler(object sender, CosineImageImageWithoutHeadingRowChangeEvent e);
        
        public delegate void CosineLinkLinkWithHeadingRowChangeEventHandler(object sender, CosineLinkLinkWithHeadingRowChangeEvent e);
        
        public delegate void CosineLinkLinkWithHeadingTUBSRowChangeEventHandler(object sender, CosineLinkLinkWithHeadingTUBSRowChangeEvent e);
        
        public delegate void CosineLinkLinkWithoutHeadingRowChangeEventHandler(object sender, CosineLinkLinkWithoutHeadingRowChangeEvent e);
        
        public delegate void CosineLinkLinkWithoutHeadingTUBSRowChangeEventHandler(object sender, CosineLinkLinkWithoutHeadingTUBSRowChangeEvent e);
        
        public delegate void GoalRowChangeEventHandler(object sender, GoalRowChangeEvent e);
        
        public delegate void HeadingRowChangeEventHandler(object sender, HeadingRowChangeEvent e);
        
        public delegate void Heading_CosineRowChangeEventHandler(object sender, Heading_CosineRowChangeEvent e);
        
        public delegate void HeadingModifiedRowChangeEventHandler(object sender, HeadingModifiedRowChangeEvent e);
        
        public delegate void HeadingPathAdequacy_CosineRowChangeEventHandler(object sender, HeadingPathAdequacy_CosineRowChangeEvent e);
        
        public delegate void HeadingTUBSTVLRowChangeEventHandler(object sender, HeadingTUBSTVLRowChangeEvent e);
        
        public delegate void HeadingvsHeadinginSamePageCosinesRowChangeEventHandler(object sender, HeadingvsHeadinginSamePageCosinesRowChangeEvent e);
        
        public delegate void HeadingvsHeadinginSamePageCosinesTUBSRowChangeEventHandler(object sender, HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent e);
        
        public delegate void LinkLinkTemplateOfLinksRowChangeEventHandler(object sender, LinkLinkTemplateOfLinksRowChangeEvent e);
        
        public delegate void LinkUnderHeading_CosineRowChangeEventHandler(object sender, LinkUnderHeading_CosineRowChangeEvent e);
        
        public delegate void LinkUnderHeadingPathAdequacy_CosineRowChangeEventHandler(object sender, LinkUnderHeadingPathAdequacy_CosineRowChangeEvent e);
        
        public delegate void LinkWithHeadingRowChangeEventHandler(object sender, LinkWithHeadingRowChangeEvent e);
        
        public delegate void LinkWithHeadingTUBSRowChangeEventHandler(object sender, LinkWithHeadingTUBSRowChangeEvent e);
        
        public delegate void LinkWithHeadingTUBSModifiedRowChangeEventHandler(object sender, LinkWithHeadingTUBSModifiedRowChangeEvent e);
        
        public delegate void LinkWithoutHeadingRowChangeEventHandler(object sender, LinkWithoutHeadingRowChangeEvent e);
        
        public delegate void LinkWithoutHeading_CosineRowChangeEventHandler(object sender, LinkWithoutHeading_CosineRowChangeEvent e);
        
        public delegate void LinkWithoutHeadingPathAdequacy_CosineRowChangeEventHandler(object sender, LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent e);
        
        public delegate void LinkWithoutHeadingTemplateOfLinksRowChangeEventHandler(object sender, LinkWithoutHeadingTemplateOfLinksRowChangeEvent e);
        
        public delegate void LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEventHandler(object sender, LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent e);
        
        public delegate void LinkWithoutHeadingTUBSRowChangeEventHandler(object sender, LinkWithoutHeadingTUBSRowChangeEvent e);
        
        public delegate void LinkWithoutHeadingTUBSModifiedRowChangeEventHandler(object sender, LinkWithoutHeadingTUBSModifiedRowChangeEvent e);
        
        public delegate void Page_Visited_UnsuccessfullyRowChangeEventHandler(object sender, Page_Visited_UnsuccessfullyRowChangeEvent e);
        
        public delegate void PageTemplateRowChangeEventHandler(object sender, PageTemplateRowChangeEvent e);
        
        public delegate void ParagraphRowChangeEventHandler(object sender, ParagraphRowChangeEvent e);
        
        public delegate void Paragraph_CosineRowChangeEventHandler(object sender, Paragraph_CosineRowChangeEvent e);
        
        public delegate void ParagraphTUBSRowChangeEventHandler(object sender, ParagraphTUBSRowChangeEvent e);
        
        public delegate void PathRowChangeEventHandler(object sender, PathRowChangeEvent e);
        
        public delegate void Solution_FoundRowChangeEventHandler(object sender, Solution_FoundRowChangeEvent e);
        
        public delegate void TemplateOfLinksRowChangeEventHandler(object sender, TemplateOfLinksRowChangeEvent e);
        
        public delegate void TemplateOfLinks_CosineRowChangeEventHandler(object sender, TemplateOfLinks_CosineRowChangeEvent e);
        
        public delegate void TemplateOfLinksTUBSRowChangeEventHandler(object sender, TemplateOfLinksTUBSRowChangeEvent e);
        
        public delegate void WebPageRowChangeEventHandler(object sender, WebPageRowChangeEvent e);
        
        public delegate void WebPageTUBSRowChangeEventHandler(object sender, WebPageTUBSRowChangeEvent e);
        
        public delegate void WebSiteRowChangeEventHandler(object sender, WebSiteRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnImageDataTable : global::System.Data.TypedTableBase<AnImageRow> {
            
            private global::System.Data.DataColumn columnImgId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnImageAltText;
            
            private global::System.Data.DataColumn columnImageUrl;
            
            private global::System.Data.DataColumn columnImagePicture;
            
            private global::System.Data.DataColumn columnCosienValueImageHeading;
            
            private global::System.Data.DataColumn columnTermVectorLength;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageDataTable() {
                this.TableName = "AnImage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnImageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnImageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImgIdColumn {
                get {
                    return this.columnImgId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageAltTextColumn {
                get {
                    return this.columnImageAltText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageUrlColumn {
                get {
                    return this.columnImageUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImagePictureColumn {
                get {
                    return this.columnImagePicture;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosienValueImageHeadingColumn {
                get {
                    return this.columnCosienValueImageHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermVectorLengthColumn {
                get {
                    return this.columnTermVectorLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageRow this[int index] {
                get {
                    return ((AnImageRow)(this.Rows[index]));
                }
            }
            
            public event AnImageRowChangeEventHandler AnImageRowChanging;
            
            public event AnImageRowChangeEventHandler AnImageRowChanged;
            
            public event AnImageRowChangeEventHandler AnImageRowDeleting;
            
            public event AnImageRowChangeEventHandler AnImageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnImageRow(AnImageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageRow AddAnImageRow(int WebPageId, int HeadingId, string ImageAltText, string ImageUrl, string ImagePicture, string CosienValueImageHeading, string TermVectorLength) {
                AnImageRow rowAnImageRow = ((AnImageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingId,
                        ImageAltText,
                        ImageUrl,
                        ImagePicture,
                        CosienValueImageHeading,
                        TermVectorLength};
                rowAnImageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnImageRow);
                return rowAnImageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageRow FindByImgId(int ImgId) {
                return ((AnImageRow)(this.Rows.Find(new object[] {
                            ImgId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnImageDataTable cln = ((AnImageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnImageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImgId = base.Columns["ImgId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnImageAltText = base.Columns["ImageAltText"];
                this.columnImageUrl = base.Columns["ImageUrl"];
                this.columnImagePicture = base.Columns["ImagePicture"];
                this.columnCosienValueImageHeading = base.Columns["CosienValueImageHeading"];
                this.columnTermVectorLength = base.Columns["TermVectorLength"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImgId = new global::System.Data.DataColumn("ImgId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImgId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnImageAltText = new global::System.Data.DataColumn("ImageAltText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageAltText);
                this.columnImageUrl = new global::System.Data.DataColumn("ImageUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageUrl);
                this.columnImagePicture = new global::System.Data.DataColumn("ImagePicture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImagePicture);
                this.columnCosienValueImageHeading = new global::System.Data.DataColumn("CosienValueImageHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosienValueImageHeading);
                this.columnTermVectorLength = new global::System.Data.DataColumn("TermVectorLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermVectorLength);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnImgId}, true));
                this.columnImgId.AutoIncrement = true;
                this.columnImgId.AutoIncrementSeed = -1;
                this.columnImgId.AutoIncrementStep = -1;
                this.columnImgId.AllowDBNull = false;
                this.columnImgId.ReadOnly = true;
                this.columnImgId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnImageAltText.AllowDBNull = false;
                this.columnImageAltText.MaxLength = 2147483647;
                this.columnImageUrl.AllowDBNull = false;
                this.columnImageUrl.MaxLength = 2147483647;
                this.columnImagePicture.AllowDBNull = false;
                this.columnImagePicture.MaxLength = 2147483647;
                this.columnCosienValueImageHeading.AllowDBNull = false;
                this.columnCosienValueImageHeading.MaxLength = 2147483647;
                this.columnTermVectorLength.AllowDBNull = false;
                this.columnTermVectorLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageRow NewAnImageRow() {
                return ((AnImageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnImageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnImageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnImageRowChanged != null)) {
                    this.AnImageRowChanged(this, new AnImageRowChangeEvent(((AnImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnImageRowChanging != null)) {
                    this.AnImageRowChanging(this, new AnImageRowChangeEvent(((AnImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnImageRowDeleted != null)) {
                    this.AnImageRowDeleted(this, new AnImageRowChangeEvent(((AnImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnImageRowDeleting != null)) {
                    this.AnImageRowDeleting(this, new AnImageRowChangeEvent(((AnImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnImageRow(AnImageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnImageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnImageWithoutHeadingDataTable : global::System.Data.TypedTableBase<AnImageWithoutHeadingRow> {
            
            private global::System.Data.DataColumn columnImageWithoutHeadingId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnImageUrl;
            
            private global::System.Data.DataColumn columnVectorTermLegnth;
            
            private global::System.Data.DataColumn columnImageAltText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingDataTable() {
                this.TableName = "AnImageWithoutHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnImageWithoutHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AnImageWithoutHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageWithoutHeadingIdColumn {
                get {
                    return this.columnImageWithoutHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageUrlColumn {
                get {
                    return this.columnImageUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLegnthColumn {
                get {
                    return this.columnVectorTermLegnth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageAltTextColumn {
                get {
                    return this.columnImageAltText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingRow this[int index] {
                get {
                    return ((AnImageWithoutHeadingRow)(this.Rows[index]));
                }
            }
            
            public event AnImageWithoutHeadingRowChangeEventHandler AnImageWithoutHeadingRowChanging;
            
            public event AnImageWithoutHeadingRowChangeEventHandler AnImageWithoutHeadingRowChanged;
            
            public event AnImageWithoutHeadingRowChangeEventHandler AnImageWithoutHeadingRowDeleting;
            
            public event AnImageWithoutHeadingRowChangeEventHandler AnImageWithoutHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAnImageWithoutHeadingRow(AnImageWithoutHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingRow AddAnImageWithoutHeadingRow(int WebPageId, string ImageUrl, string VectorTermLegnth, string ImageAltText) {
                AnImageWithoutHeadingRow rowAnImageWithoutHeadingRow = ((AnImageWithoutHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        ImageUrl,
                        VectorTermLegnth,
                        ImageAltText};
                rowAnImageWithoutHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnImageWithoutHeadingRow);
                return rowAnImageWithoutHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingRow FindByImageWithoutHeadingId(int ImageWithoutHeadingId) {
                return ((AnImageWithoutHeadingRow)(this.Rows.Find(new object[] {
                            ImageWithoutHeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AnImageWithoutHeadingDataTable cln = ((AnImageWithoutHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnImageWithoutHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageWithoutHeadingId = base.Columns["ImageWithoutHeadingId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnImageUrl = base.Columns["ImageUrl"];
                this.columnVectorTermLegnth = base.Columns["VectorTermLegnth"];
                this.columnImageAltText = base.Columns["ImageAltText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageWithoutHeadingId = new global::System.Data.DataColumn("ImageWithoutHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageWithoutHeadingId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnImageUrl = new global::System.Data.DataColumn("ImageUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageUrl);
                this.columnVectorTermLegnth = new global::System.Data.DataColumn("VectorTermLegnth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLegnth);
                this.columnImageAltText = new global::System.Data.DataColumn("ImageAltText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageAltText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnImageWithoutHeadingId}, true));
                this.columnImageWithoutHeadingId.AutoIncrement = true;
                this.columnImageWithoutHeadingId.AutoIncrementSeed = -1;
                this.columnImageWithoutHeadingId.AutoIncrementStep = -1;
                this.columnImageWithoutHeadingId.AllowDBNull = false;
                this.columnImageWithoutHeadingId.ReadOnly = true;
                this.columnImageWithoutHeadingId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnImageUrl.AllowDBNull = false;
                this.columnImageUrl.MaxLength = 2147483647;
                this.columnVectorTermLegnth.AllowDBNull = false;
                this.columnVectorTermLegnth.MaxLength = 2147483647;
                this.columnImageAltText.AllowDBNull = false;
                this.columnImageAltText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingRow NewAnImageWithoutHeadingRow() {
                return ((AnImageWithoutHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnImageWithoutHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AnImageWithoutHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnImageWithoutHeadingRowChanged != null)) {
                    this.AnImageWithoutHeadingRowChanged(this, new AnImageWithoutHeadingRowChangeEvent(((AnImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnImageWithoutHeadingRowChanging != null)) {
                    this.AnImageWithoutHeadingRowChanging(this, new AnImageWithoutHeadingRowChangeEvent(((AnImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnImageWithoutHeadingRowDeleted != null)) {
                    this.AnImageWithoutHeadingRowDeleted(this, new AnImageWithoutHeadingRowChangeEvent(((AnImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnImageWithoutHeadingRowDeleting != null)) {
                    this.AnImageWithoutHeadingRowDeleting(this, new AnImageWithoutHeadingRowChangeEvent(((AnImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAnImageWithoutHeadingRow(AnImageWithoutHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnImageWithoutHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CosineImageImageUnderSameHeadingDataTable : global::System.Data.TypedTableBase<CosineImageImageUnderSameHeadingRow> {
            
            private global::System.Data.DataColumn columnCosineImageImageUnderHeadingId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnImageXId;
            
            private global::System.Data.DataColumn columnImageYId;
            
            private global::System.Data.DataColumn columnCosineValueImageImageWithHeading;
            
            private global::System.Data.DataColumn columnWebpageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingDataTable() {
                this.TableName = "CosineImageImageUnderSameHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineImageImageUnderSameHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CosineImageImageUnderSameHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineImageImageUnderHeadingIdColumn {
                get {
                    return this.columnCosineImageImageUnderHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageXIdColumn {
                get {
                    return this.columnImageXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageYIdColumn {
                get {
                    return this.columnImageYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueImageImageWithHeadingColumn {
                get {
                    return this.columnCosineValueImageImageWithHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebpageIdColumn {
                get {
                    return this.columnWebpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingRow this[int index] {
                get {
                    return ((CosineImageImageUnderSameHeadingRow)(this.Rows[index]));
                }
            }
            
            public event CosineImageImageUnderSameHeadingRowChangeEventHandler CosineImageImageUnderSameHeadingRowChanging;
            
            public event CosineImageImageUnderSameHeadingRowChangeEventHandler CosineImageImageUnderSameHeadingRowChanged;
            
            public event CosineImageImageUnderSameHeadingRowChangeEventHandler CosineImageImageUnderSameHeadingRowDeleting;
            
            public event CosineImageImageUnderSameHeadingRowChangeEventHandler CosineImageImageUnderSameHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCosineImageImageUnderSameHeadingRow(CosineImageImageUnderSameHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingRow AddCosineImageImageUnderSameHeadingRow(int HeadingId, int ImageXId, int ImageYId, string CosineValueImageImageWithHeading, int WebpageId) {
                CosineImageImageUnderSameHeadingRow rowCosineImageImageUnderSameHeadingRow = ((CosineImageImageUnderSameHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HeadingId,
                        ImageXId,
                        ImageYId,
                        CosineValueImageImageWithHeading,
                        WebpageId};
                rowCosineImageImageUnderSameHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCosineImageImageUnderSameHeadingRow);
                return rowCosineImageImageUnderSameHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingRow FindByCosineImageImageUnderHeadingId(int CosineImageImageUnderHeadingId) {
                return ((CosineImageImageUnderSameHeadingRow)(this.Rows.Find(new object[] {
                            CosineImageImageUnderHeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CosineImageImageUnderSameHeadingDataTable cln = ((CosineImageImageUnderSameHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CosineImageImageUnderSameHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCosineImageImageUnderHeadingId = base.Columns["CosineImageImageUnderHeadingId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnImageXId = base.Columns["ImageXId"];
                this.columnImageYId = base.Columns["ImageYId"];
                this.columnCosineValueImageImageWithHeading = base.Columns["CosineValueImageImageWithHeading"];
                this.columnWebpageId = base.Columns["WebpageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCosineImageImageUnderHeadingId = new global::System.Data.DataColumn("CosineImageImageUnderHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineImageImageUnderHeadingId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnImageXId = new global::System.Data.DataColumn("ImageXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageXId);
                this.columnImageYId = new global::System.Data.DataColumn("ImageYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageYId);
                this.columnCosineValueImageImageWithHeading = new global::System.Data.DataColumn("CosineValueImageImageWithHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueImageImageWithHeading);
                this.columnWebpageId = new global::System.Data.DataColumn("WebpageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebpageId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCosineImageImageUnderHeadingId}, true));
                this.columnCosineImageImageUnderHeadingId.AutoIncrement = true;
                this.columnCosineImageImageUnderHeadingId.AutoIncrementSeed = -1;
                this.columnCosineImageImageUnderHeadingId.AutoIncrementStep = -1;
                this.columnCosineImageImageUnderHeadingId.AllowDBNull = false;
                this.columnCosineImageImageUnderHeadingId.ReadOnly = true;
                this.columnCosineImageImageUnderHeadingId.Unique = true;
                this.columnHeadingId.AllowDBNull = false;
                this.columnImageXId.AllowDBNull = false;
                this.columnImageYId.AllowDBNull = false;
                this.columnCosineValueImageImageWithHeading.AllowDBNull = false;
                this.columnCosineValueImageImageWithHeading.MaxLength = 2147483647;
                this.columnWebpageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingRow NewCosineImageImageUnderSameHeadingRow() {
                return ((CosineImageImageUnderSameHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CosineImageImageUnderSameHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CosineImageImageUnderSameHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CosineImageImageUnderSameHeadingRowChanged != null)) {
                    this.CosineImageImageUnderSameHeadingRowChanged(this, new CosineImageImageUnderSameHeadingRowChangeEvent(((CosineImageImageUnderSameHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CosineImageImageUnderSameHeadingRowChanging != null)) {
                    this.CosineImageImageUnderSameHeadingRowChanging(this, new CosineImageImageUnderSameHeadingRowChangeEvent(((CosineImageImageUnderSameHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CosineImageImageUnderSameHeadingRowDeleted != null)) {
                    this.CosineImageImageUnderSameHeadingRowDeleted(this, new CosineImageImageUnderSameHeadingRowChangeEvent(((CosineImageImageUnderSameHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CosineImageImageUnderSameHeadingRowDeleting != null)) {
                    this.CosineImageImageUnderSameHeadingRowDeleting(this, new CosineImageImageUnderSameHeadingRowChangeEvent(((CosineImageImageUnderSameHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCosineImageImageUnderSameHeadingRow(CosineImageImageUnderSameHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CosineImageImageUnderSameHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CosineImageImageWithoutHeadingDataTable : global::System.Data.TypedTableBase<CosineImageImageWithoutHeadingRow> {
            
            private global::System.Data.DataColumn columnCosineImageImageWithoutHeadingId;
            
            private global::System.Data.DataColumn columnImageXId;
            
            private global::System.Data.DataColumn columnImageYId;
            
            private global::System.Data.DataColumn columnCosineValueImageImageWithoutHeading;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingDataTable() {
                this.TableName = "CosineImageImageWithoutHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineImageImageWithoutHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CosineImageImageWithoutHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineImageImageWithoutHeadingIdColumn {
                get {
                    return this.columnCosineImageImageWithoutHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageXIdColumn {
                get {
                    return this.columnImageXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageYIdColumn {
                get {
                    return this.columnImageYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueImageImageWithoutHeadingColumn {
                get {
                    return this.columnCosineValueImageImageWithoutHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingRow this[int index] {
                get {
                    return ((CosineImageImageWithoutHeadingRow)(this.Rows[index]));
                }
            }
            
            public event CosineImageImageWithoutHeadingRowChangeEventHandler CosineImageImageWithoutHeadingRowChanging;
            
            public event CosineImageImageWithoutHeadingRowChangeEventHandler CosineImageImageWithoutHeadingRowChanged;
            
            public event CosineImageImageWithoutHeadingRowChangeEventHandler CosineImageImageWithoutHeadingRowDeleting;
            
            public event CosineImageImageWithoutHeadingRowChangeEventHandler CosineImageImageWithoutHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCosineImageImageWithoutHeadingRow(CosineImageImageWithoutHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingRow AddCosineImageImageWithoutHeadingRow(int ImageXId, int ImageYId, string CosineValueImageImageWithoutHeading, int WebPageId) {
                CosineImageImageWithoutHeadingRow rowCosineImageImageWithoutHeadingRow = ((CosineImageImageWithoutHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ImageXId,
                        ImageYId,
                        CosineValueImageImageWithoutHeading,
                        WebPageId};
                rowCosineImageImageWithoutHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCosineImageImageWithoutHeadingRow);
                return rowCosineImageImageWithoutHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingRow FindByCosineImageImageWithoutHeadingId(int CosineImageImageWithoutHeadingId) {
                return ((CosineImageImageWithoutHeadingRow)(this.Rows.Find(new object[] {
                            CosineImageImageWithoutHeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CosineImageImageWithoutHeadingDataTable cln = ((CosineImageImageWithoutHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CosineImageImageWithoutHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCosineImageImageWithoutHeadingId = base.Columns["CosineImageImageWithoutHeadingId"];
                this.columnImageXId = base.Columns["ImageXId"];
                this.columnImageYId = base.Columns["ImageYId"];
                this.columnCosineValueImageImageWithoutHeading = base.Columns["CosineValueImageImageWithoutHeading"];
                this.columnWebPageId = base.Columns["WebPageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCosineImageImageWithoutHeadingId = new global::System.Data.DataColumn("CosineImageImageWithoutHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineImageImageWithoutHeadingId);
                this.columnImageXId = new global::System.Data.DataColumn("ImageXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageXId);
                this.columnImageYId = new global::System.Data.DataColumn("ImageYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageYId);
                this.columnCosineValueImageImageWithoutHeading = new global::System.Data.DataColumn("CosineValueImageImageWithoutHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueImageImageWithoutHeading);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCosineImageImageWithoutHeadingId}, true));
                this.columnCosineImageImageWithoutHeadingId.AutoIncrement = true;
                this.columnCosineImageImageWithoutHeadingId.AutoIncrementSeed = -1;
                this.columnCosineImageImageWithoutHeadingId.AutoIncrementStep = -1;
                this.columnCosineImageImageWithoutHeadingId.AllowDBNull = false;
                this.columnCosineImageImageWithoutHeadingId.ReadOnly = true;
                this.columnCosineImageImageWithoutHeadingId.Unique = true;
                this.columnImageXId.AllowDBNull = false;
                this.columnImageYId.AllowDBNull = false;
                this.columnCosineValueImageImageWithoutHeading.AllowDBNull = false;
                this.columnCosineValueImageImageWithoutHeading.MaxLength = 2147483647;
                this.columnWebPageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingRow NewCosineImageImageWithoutHeadingRow() {
                return ((CosineImageImageWithoutHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CosineImageImageWithoutHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CosineImageImageWithoutHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CosineImageImageWithoutHeadingRowChanged != null)) {
                    this.CosineImageImageWithoutHeadingRowChanged(this, new CosineImageImageWithoutHeadingRowChangeEvent(((CosineImageImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CosineImageImageWithoutHeadingRowChanging != null)) {
                    this.CosineImageImageWithoutHeadingRowChanging(this, new CosineImageImageWithoutHeadingRowChangeEvent(((CosineImageImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CosineImageImageWithoutHeadingRowDeleted != null)) {
                    this.CosineImageImageWithoutHeadingRowDeleted(this, new CosineImageImageWithoutHeadingRowChangeEvent(((CosineImageImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CosineImageImageWithoutHeadingRowDeleting != null)) {
                    this.CosineImageImageWithoutHeadingRowDeleting(this, new CosineImageImageWithoutHeadingRowChangeEvent(((CosineImageImageWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCosineImageImageWithoutHeadingRow(CosineImageImageWithoutHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CosineImageImageWithoutHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CosineLinkLinkWithHeadingDataTable : global::System.Data.TypedTableBase<CosineLinkLinkWithHeadingRow> {
            
            private global::System.Data.DataColumn columnCosineLinkLinkWithHeadingId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnLinkXId;
            
            private global::System.Data.DataColumn columnLinkYId;
            
            private global::System.Data.DataColumn columnCosineValueLinkLinkWithHeading;
            
            private global::System.Data.DataColumn columnWebpageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingDataTable() {
                this.TableName = "CosineLinkLinkWithHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CosineLinkLinkWithHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineLinkLinkWithHeadingIdColumn {
                get {
                    return this.columnCosineLinkLinkWithHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkXIdColumn {
                get {
                    return this.columnLinkXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkYIdColumn {
                get {
                    return this.columnLinkYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkLinkWithHeadingColumn {
                get {
                    return this.columnCosineValueLinkLinkWithHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebpageIdColumn {
                get {
                    return this.columnWebpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingRow this[int index] {
                get {
                    return ((CosineLinkLinkWithHeadingRow)(this.Rows[index]));
                }
            }
            
            public event CosineLinkLinkWithHeadingRowChangeEventHandler CosineLinkLinkWithHeadingRowChanging;
            
            public event CosineLinkLinkWithHeadingRowChangeEventHandler CosineLinkLinkWithHeadingRowChanged;
            
            public event CosineLinkLinkWithHeadingRowChangeEventHandler CosineLinkLinkWithHeadingRowDeleting;
            
            public event CosineLinkLinkWithHeadingRowChangeEventHandler CosineLinkLinkWithHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCosineLinkLinkWithHeadingRow(CosineLinkLinkWithHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingRow AddCosineLinkLinkWithHeadingRow(int HeadingId, int LinkXId, int LinkYId, string CosineValueLinkLinkWithHeading, int WebpageId) {
                CosineLinkLinkWithHeadingRow rowCosineLinkLinkWithHeadingRow = ((CosineLinkLinkWithHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HeadingId,
                        LinkXId,
                        LinkYId,
                        CosineValueLinkLinkWithHeading,
                        WebpageId};
                rowCosineLinkLinkWithHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCosineLinkLinkWithHeadingRow);
                return rowCosineLinkLinkWithHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingRow FindByCosineLinkLinkWithHeadingId(int CosineLinkLinkWithHeadingId) {
                return ((CosineLinkLinkWithHeadingRow)(this.Rows.Find(new object[] {
                            CosineLinkLinkWithHeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CosineLinkLinkWithHeadingDataTable cln = ((CosineLinkLinkWithHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CosineLinkLinkWithHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCosineLinkLinkWithHeadingId = base.Columns["CosineLinkLinkWithHeadingId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnLinkXId = base.Columns["LinkXId"];
                this.columnLinkYId = base.Columns["LinkYId"];
                this.columnCosineValueLinkLinkWithHeading = base.Columns["CosineValueLinkLinkWithHeading"];
                this.columnWebpageId = base.Columns["WebpageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCosineLinkLinkWithHeadingId = new global::System.Data.DataColumn("CosineLinkLinkWithHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineLinkLinkWithHeadingId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnLinkXId = new global::System.Data.DataColumn("LinkXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkXId);
                this.columnLinkYId = new global::System.Data.DataColumn("LinkYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkYId);
                this.columnCosineValueLinkLinkWithHeading = new global::System.Data.DataColumn("CosineValueLinkLinkWithHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkLinkWithHeading);
                this.columnWebpageId = new global::System.Data.DataColumn("WebpageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebpageId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCosineLinkLinkWithHeadingId}, true));
                this.columnCosineLinkLinkWithHeadingId.AutoIncrement = true;
                this.columnCosineLinkLinkWithHeadingId.AutoIncrementSeed = -1;
                this.columnCosineLinkLinkWithHeadingId.AutoIncrementStep = -1;
                this.columnCosineLinkLinkWithHeadingId.AllowDBNull = false;
                this.columnCosineLinkLinkWithHeadingId.ReadOnly = true;
                this.columnCosineLinkLinkWithHeadingId.Unique = true;
                this.columnHeadingId.AllowDBNull = false;
                this.columnLinkXId.AllowDBNull = false;
                this.columnLinkYId.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithHeading.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithHeading.MaxLength = 2147483647;
                this.columnWebpageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingRow NewCosineLinkLinkWithHeadingRow() {
                return ((CosineLinkLinkWithHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CosineLinkLinkWithHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CosineLinkLinkWithHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CosineLinkLinkWithHeadingRowChanged != null)) {
                    this.CosineLinkLinkWithHeadingRowChanged(this, new CosineLinkLinkWithHeadingRowChangeEvent(((CosineLinkLinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CosineLinkLinkWithHeadingRowChanging != null)) {
                    this.CosineLinkLinkWithHeadingRowChanging(this, new CosineLinkLinkWithHeadingRowChangeEvent(((CosineLinkLinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CosineLinkLinkWithHeadingRowDeleted != null)) {
                    this.CosineLinkLinkWithHeadingRowDeleted(this, new CosineLinkLinkWithHeadingRowChangeEvent(((CosineLinkLinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CosineLinkLinkWithHeadingRowDeleting != null)) {
                    this.CosineLinkLinkWithHeadingRowDeleting(this, new CosineLinkLinkWithHeadingRowChangeEvent(((CosineLinkLinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCosineLinkLinkWithHeadingRow(CosineLinkLinkWithHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CosineLinkLinkWithHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CosineLinkLinkWithHeadingTUBSDataTable : global::System.Data.TypedTableBase<CosineLinkLinkWithHeadingTUBSRow> {
            
            private global::System.Data.DataColumn columnCosineLinkLinkWithHeadingId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnLinkXId;
            
            private global::System.Data.DataColumn columnLinkYId;
            
            private global::System.Data.DataColumn columnCosineValueLinkLinkWithHeading;
            
            private global::System.Data.DataColumn columnWebpageId;
            
            private global::System.Data.DataColumn columnLinkXText;
            
            private global::System.Data.DataColumn columnLinkYText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingTUBSDataTable() {
                this.TableName = "CosineLinkLinkWithHeadingTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithHeadingTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CosineLinkLinkWithHeadingTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineLinkLinkWithHeadingIdColumn {
                get {
                    return this.columnCosineLinkLinkWithHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkXIdColumn {
                get {
                    return this.columnLinkXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkYIdColumn {
                get {
                    return this.columnLinkYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkLinkWithHeadingColumn {
                get {
                    return this.columnCosineValueLinkLinkWithHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebpageIdColumn {
                get {
                    return this.columnWebpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkXTextColumn {
                get {
                    return this.columnLinkXText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkYTextColumn {
                get {
                    return this.columnLinkYText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingTUBSRow this[int index] {
                get {
                    return ((CosineLinkLinkWithHeadingTUBSRow)(this.Rows[index]));
                }
            }
            
            public event CosineLinkLinkWithHeadingTUBSRowChangeEventHandler CosineLinkLinkWithHeadingTUBSRowChanging;
            
            public event CosineLinkLinkWithHeadingTUBSRowChangeEventHandler CosineLinkLinkWithHeadingTUBSRowChanged;
            
            public event CosineLinkLinkWithHeadingTUBSRowChangeEventHandler CosineLinkLinkWithHeadingTUBSRowDeleting;
            
            public event CosineLinkLinkWithHeadingTUBSRowChangeEventHandler CosineLinkLinkWithHeadingTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCosineLinkLinkWithHeadingTUBSRow(CosineLinkLinkWithHeadingTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingTUBSRow AddCosineLinkLinkWithHeadingTUBSRow(int HeadingId, int LinkXId, int LinkYId, string CosineValueLinkLinkWithHeading, int WebpageId, string LinkXText, string LinkYText) {
                CosineLinkLinkWithHeadingTUBSRow rowCosineLinkLinkWithHeadingTUBSRow = ((CosineLinkLinkWithHeadingTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HeadingId,
                        LinkXId,
                        LinkYId,
                        CosineValueLinkLinkWithHeading,
                        WebpageId,
                        LinkXText,
                        LinkYText};
                rowCosineLinkLinkWithHeadingTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCosineLinkLinkWithHeadingTUBSRow);
                return rowCosineLinkLinkWithHeadingTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CosineLinkLinkWithHeadingTUBSDataTable cln = ((CosineLinkLinkWithHeadingTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CosineLinkLinkWithHeadingTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCosineLinkLinkWithHeadingId = base.Columns["CosineLinkLinkWithHeadingId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnLinkXId = base.Columns["LinkXId"];
                this.columnLinkYId = base.Columns["LinkYId"];
                this.columnCosineValueLinkLinkWithHeading = base.Columns["CosineValueLinkLinkWithHeading"];
                this.columnWebpageId = base.Columns["WebpageId"];
                this.columnLinkXText = base.Columns["LinkXText"];
                this.columnLinkYText = base.Columns["LinkYText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCosineLinkLinkWithHeadingId = new global::System.Data.DataColumn("CosineLinkLinkWithHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineLinkLinkWithHeadingId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnLinkXId = new global::System.Data.DataColumn("LinkXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkXId);
                this.columnLinkYId = new global::System.Data.DataColumn("LinkYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkYId);
                this.columnCosineValueLinkLinkWithHeading = new global::System.Data.DataColumn("CosineValueLinkLinkWithHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkLinkWithHeading);
                this.columnWebpageId = new global::System.Data.DataColumn("WebpageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebpageId);
                this.columnLinkXText = new global::System.Data.DataColumn("LinkXText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkXText);
                this.columnLinkYText = new global::System.Data.DataColumn("LinkYText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkYText);
                this.columnCosineLinkLinkWithHeadingId.AutoIncrement = true;
                this.columnCosineLinkLinkWithHeadingId.AutoIncrementSeed = -1;
                this.columnCosineLinkLinkWithHeadingId.AutoIncrementStep = -1;
                this.columnCosineLinkLinkWithHeadingId.AllowDBNull = false;
                this.columnCosineLinkLinkWithHeadingId.ReadOnly = true;
                this.columnHeadingId.AllowDBNull = false;
                this.columnLinkXId.AllowDBNull = false;
                this.columnLinkYId.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithHeading.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithHeading.MaxLength = 2147483647;
                this.columnWebpageId.AllowDBNull = false;
                this.columnLinkXText.AllowDBNull = false;
                this.columnLinkXText.MaxLength = 2147483647;
                this.columnLinkYText.AllowDBNull = false;
                this.columnLinkYText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingTUBSRow NewCosineLinkLinkWithHeadingTUBSRow() {
                return ((CosineLinkLinkWithHeadingTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CosineLinkLinkWithHeadingTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CosineLinkLinkWithHeadingTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CosineLinkLinkWithHeadingTUBSRowChanged != null)) {
                    this.CosineLinkLinkWithHeadingTUBSRowChanged(this, new CosineLinkLinkWithHeadingTUBSRowChangeEvent(((CosineLinkLinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CosineLinkLinkWithHeadingTUBSRowChanging != null)) {
                    this.CosineLinkLinkWithHeadingTUBSRowChanging(this, new CosineLinkLinkWithHeadingTUBSRowChangeEvent(((CosineLinkLinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CosineLinkLinkWithHeadingTUBSRowDeleted != null)) {
                    this.CosineLinkLinkWithHeadingTUBSRowDeleted(this, new CosineLinkLinkWithHeadingTUBSRowChangeEvent(((CosineLinkLinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CosineLinkLinkWithHeadingTUBSRowDeleting != null)) {
                    this.CosineLinkLinkWithHeadingTUBSRowDeleting(this, new CosineLinkLinkWithHeadingTUBSRowChangeEvent(((CosineLinkLinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCosineLinkLinkWithHeadingTUBSRow(CosineLinkLinkWithHeadingTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CosineLinkLinkWithHeadingTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CosineLinkLinkWithoutHeadingDataTable : global::System.Data.TypedTableBase<CosineLinkLinkWithoutHeadingRow> {
            
            private global::System.Data.DataColumn columnCosineLinkLinkWithoutHeadingId;
            
            private global::System.Data.DataColumn columnLinkXId;
            
            private global::System.Data.DataColumn columnLinkYId;
            
            private global::System.Data.DataColumn columnCosineValueLinkLinkWithoutHeading;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingDataTable() {
                this.TableName = "CosineLinkLinkWithoutHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithoutHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CosineLinkLinkWithoutHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineLinkLinkWithoutHeadingIdColumn {
                get {
                    return this.columnCosineLinkLinkWithoutHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkXIdColumn {
                get {
                    return this.columnLinkXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkYIdColumn {
                get {
                    return this.columnLinkYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkLinkWithoutHeadingColumn {
                get {
                    return this.columnCosineValueLinkLinkWithoutHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingRow this[int index] {
                get {
                    return ((CosineLinkLinkWithoutHeadingRow)(this.Rows[index]));
                }
            }
            
            public event CosineLinkLinkWithoutHeadingRowChangeEventHandler CosineLinkLinkWithoutHeadingRowChanging;
            
            public event CosineLinkLinkWithoutHeadingRowChangeEventHandler CosineLinkLinkWithoutHeadingRowChanged;
            
            public event CosineLinkLinkWithoutHeadingRowChangeEventHandler CosineLinkLinkWithoutHeadingRowDeleting;
            
            public event CosineLinkLinkWithoutHeadingRowChangeEventHandler CosineLinkLinkWithoutHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCosineLinkLinkWithoutHeadingRow(CosineLinkLinkWithoutHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingRow AddCosineLinkLinkWithoutHeadingRow(int LinkXId, int LinkYId, string CosineValueLinkLinkWithoutHeading, int WebPageId) {
                CosineLinkLinkWithoutHeadingRow rowCosineLinkLinkWithoutHeadingRow = ((CosineLinkLinkWithoutHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkXId,
                        LinkYId,
                        CosineValueLinkLinkWithoutHeading,
                        WebPageId};
                rowCosineLinkLinkWithoutHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCosineLinkLinkWithoutHeadingRow);
                return rowCosineLinkLinkWithoutHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingRow FindByCosineLinkLinkWithoutHeadingId(int CosineLinkLinkWithoutHeadingId) {
                return ((CosineLinkLinkWithoutHeadingRow)(this.Rows.Find(new object[] {
                            CosineLinkLinkWithoutHeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CosineLinkLinkWithoutHeadingDataTable cln = ((CosineLinkLinkWithoutHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CosineLinkLinkWithoutHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCosineLinkLinkWithoutHeadingId = base.Columns["CosineLinkLinkWithoutHeadingId"];
                this.columnLinkXId = base.Columns["LinkXId"];
                this.columnLinkYId = base.Columns["LinkYId"];
                this.columnCosineValueLinkLinkWithoutHeading = base.Columns["CosineValueLinkLinkWithoutHeading"];
                this.columnWebPageId = base.Columns["WebPageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCosineLinkLinkWithoutHeadingId = new global::System.Data.DataColumn("CosineLinkLinkWithoutHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineLinkLinkWithoutHeadingId);
                this.columnLinkXId = new global::System.Data.DataColumn("LinkXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkXId);
                this.columnLinkYId = new global::System.Data.DataColumn("LinkYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkYId);
                this.columnCosineValueLinkLinkWithoutHeading = new global::System.Data.DataColumn("CosineValueLinkLinkWithoutHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkLinkWithoutHeading);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCosineLinkLinkWithoutHeadingId}, true));
                this.columnCosineLinkLinkWithoutHeadingId.AutoIncrement = true;
                this.columnCosineLinkLinkWithoutHeadingId.AutoIncrementSeed = -1;
                this.columnCosineLinkLinkWithoutHeadingId.AutoIncrementStep = -1;
                this.columnCosineLinkLinkWithoutHeadingId.AllowDBNull = false;
                this.columnCosineLinkLinkWithoutHeadingId.ReadOnly = true;
                this.columnCosineLinkLinkWithoutHeadingId.Unique = true;
                this.columnLinkXId.AllowDBNull = false;
                this.columnLinkYId.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithoutHeading.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithoutHeading.MaxLength = 2147483647;
                this.columnWebPageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingRow NewCosineLinkLinkWithoutHeadingRow() {
                return ((CosineLinkLinkWithoutHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CosineLinkLinkWithoutHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CosineLinkLinkWithoutHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CosineLinkLinkWithoutHeadingRowChanged != null)) {
                    this.CosineLinkLinkWithoutHeadingRowChanged(this, new CosineLinkLinkWithoutHeadingRowChangeEvent(((CosineLinkLinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CosineLinkLinkWithoutHeadingRowChanging != null)) {
                    this.CosineLinkLinkWithoutHeadingRowChanging(this, new CosineLinkLinkWithoutHeadingRowChangeEvent(((CosineLinkLinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CosineLinkLinkWithoutHeadingRowDeleted != null)) {
                    this.CosineLinkLinkWithoutHeadingRowDeleted(this, new CosineLinkLinkWithoutHeadingRowChangeEvent(((CosineLinkLinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CosineLinkLinkWithoutHeadingRowDeleting != null)) {
                    this.CosineLinkLinkWithoutHeadingRowDeleting(this, new CosineLinkLinkWithoutHeadingRowChangeEvent(((CosineLinkLinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCosineLinkLinkWithoutHeadingRow(CosineLinkLinkWithoutHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CosineLinkLinkWithoutHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CosineLinkLinkWithoutHeadingTUBSDataTable : global::System.Data.TypedTableBase<CosineLinkLinkWithoutHeadingTUBSRow> {
            
            private global::System.Data.DataColumn columnCosineLinkLinkWithoutHeadingId;
            
            private global::System.Data.DataColumn columnLinkXId;
            
            private global::System.Data.DataColumn columnLinkYId;
            
            private global::System.Data.DataColumn columnCosineValueLinkLinkWithoutHeading;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingTUBSDataTable() {
                this.TableName = "CosineLinkLinkWithoutHeadingTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithoutHeadingTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CosineLinkLinkWithoutHeadingTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineLinkLinkWithoutHeadingIdColumn {
                get {
                    return this.columnCosineLinkLinkWithoutHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkXIdColumn {
                get {
                    return this.columnLinkXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkYIdColumn {
                get {
                    return this.columnLinkYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkLinkWithoutHeadingColumn {
                get {
                    return this.columnCosineValueLinkLinkWithoutHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingTUBSRow this[int index] {
                get {
                    return ((CosineLinkLinkWithoutHeadingTUBSRow)(this.Rows[index]));
                }
            }
            
            public event CosineLinkLinkWithoutHeadingTUBSRowChangeEventHandler CosineLinkLinkWithoutHeadingTUBSRowChanging;
            
            public event CosineLinkLinkWithoutHeadingTUBSRowChangeEventHandler CosineLinkLinkWithoutHeadingTUBSRowChanged;
            
            public event CosineLinkLinkWithoutHeadingTUBSRowChangeEventHandler CosineLinkLinkWithoutHeadingTUBSRowDeleting;
            
            public event CosineLinkLinkWithoutHeadingTUBSRowChangeEventHandler CosineLinkLinkWithoutHeadingTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCosineLinkLinkWithoutHeadingTUBSRow(CosineLinkLinkWithoutHeadingTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingTUBSRow AddCosineLinkLinkWithoutHeadingTUBSRow(int LinkXId, int LinkYId, string CosineValueLinkLinkWithoutHeading, int WebPageId) {
                CosineLinkLinkWithoutHeadingTUBSRow rowCosineLinkLinkWithoutHeadingTUBSRow = ((CosineLinkLinkWithoutHeadingTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkXId,
                        LinkYId,
                        CosineValueLinkLinkWithoutHeading,
                        WebPageId};
                rowCosineLinkLinkWithoutHeadingTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCosineLinkLinkWithoutHeadingTUBSRow);
                return rowCosineLinkLinkWithoutHeadingTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CosineLinkLinkWithoutHeadingTUBSDataTable cln = ((CosineLinkLinkWithoutHeadingTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CosineLinkLinkWithoutHeadingTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCosineLinkLinkWithoutHeadingId = base.Columns["CosineLinkLinkWithoutHeadingId"];
                this.columnLinkXId = base.Columns["LinkXId"];
                this.columnLinkYId = base.Columns["LinkYId"];
                this.columnCosineValueLinkLinkWithoutHeading = base.Columns["CosineValueLinkLinkWithoutHeading"];
                this.columnWebPageId = base.Columns["WebPageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCosineLinkLinkWithoutHeadingId = new global::System.Data.DataColumn("CosineLinkLinkWithoutHeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineLinkLinkWithoutHeadingId);
                this.columnLinkXId = new global::System.Data.DataColumn("LinkXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkXId);
                this.columnLinkYId = new global::System.Data.DataColumn("LinkYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkYId);
                this.columnCosineValueLinkLinkWithoutHeading = new global::System.Data.DataColumn("CosineValueLinkLinkWithoutHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkLinkWithoutHeading);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnCosineLinkLinkWithoutHeadingId.AutoIncrement = true;
                this.columnCosineLinkLinkWithoutHeadingId.AutoIncrementSeed = -1;
                this.columnCosineLinkLinkWithoutHeadingId.AutoIncrementStep = -1;
                this.columnCosineLinkLinkWithoutHeadingId.AllowDBNull = false;
                this.columnCosineLinkLinkWithoutHeadingId.ReadOnly = true;
                this.columnLinkXId.AllowDBNull = false;
                this.columnLinkYId.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithoutHeading.AllowDBNull = false;
                this.columnCosineValueLinkLinkWithoutHeading.MaxLength = 2147483647;
                this.columnWebPageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingTUBSRow NewCosineLinkLinkWithoutHeadingTUBSRow() {
                return ((CosineLinkLinkWithoutHeadingTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CosineLinkLinkWithoutHeadingTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CosineLinkLinkWithoutHeadingTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CosineLinkLinkWithoutHeadingTUBSRowChanged != null)) {
                    this.CosineLinkLinkWithoutHeadingTUBSRowChanged(this, new CosineLinkLinkWithoutHeadingTUBSRowChangeEvent(((CosineLinkLinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CosineLinkLinkWithoutHeadingTUBSRowChanging != null)) {
                    this.CosineLinkLinkWithoutHeadingTUBSRowChanging(this, new CosineLinkLinkWithoutHeadingTUBSRowChangeEvent(((CosineLinkLinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CosineLinkLinkWithoutHeadingTUBSRowDeleted != null)) {
                    this.CosineLinkLinkWithoutHeadingTUBSRowDeleted(this, new CosineLinkLinkWithoutHeadingTUBSRowChangeEvent(((CosineLinkLinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CosineLinkLinkWithoutHeadingTUBSRowDeleting != null)) {
                    this.CosineLinkLinkWithoutHeadingTUBSRowDeleting(this, new CosineLinkLinkWithoutHeadingTUBSRowChangeEvent(((CosineLinkLinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCosineLinkLinkWithoutHeadingTUBSRow(CosineLinkLinkWithoutHeadingTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CosineLinkLinkWithoutHeadingTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GoalDataTable : global::System.Data.TypedTableBase<GoalRow> {
            
            private global::System.Data.DataColumn columntext;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalDataTable() {
                this.TableName = "Goal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GoalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow this[int index] {
                get {
                    return ((GoalRow)(this.Rows[index]));
                }
            }
            
            public event GoalRowChangeEventHandler GoalRowChanging;
            
            public event GoalRowChangeEventHandler GoalRowChanged;
            
            public event GoalRowChangeEventHandler GoalRowDeleting;
            
            public event GoalRowChangeEventHandler GoalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGoalRow(GoalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow AddGoalRow(string text) {
                GoalRow rowGoalRow = ((GoalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        text};
                rowGoalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGoalRow);
                return rowGoalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GoalDataTable cln = ((GoalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GoalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntext = base.Columns["text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.columntext.AllowDBNull = false;
                this.columntext.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow NewGoalRow() {
                return ((GoalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GoalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GoalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GoalRowChanged != null)) {
                    this.GoalRowChanged(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GoalRowChanging != null)) {
                    this.GoalRowChanging(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GoalRowDeleted != null)) {
                    this.GoalRowDeleted(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GoalRowDeleting != null)) {
                    this.GoalRowDeleting(this, new GoalRowChangeEvent(((GoalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGoalRow(GoalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GoalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadingDataTable : global::System.Data.TypedTableBase<HeadingRow> {
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingText;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingDataTable() {
                this.TableName = "Heading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingTextColumn {
                get {
                    return this.columnHeadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRow this[int index] {
                get {
                    return ((HeadingRow)(this.Rows[index]));
                }
            }
            
            public event HeadingRowChangeEventHandler HeadingRowChanging;
            
            public event HeadingRowChangeEventHandler HeadingRowChanged;
            
            public event HeadingRowChangeEventHandler HeadingRowDeleting;
            
            public event HeadingRowChangeEventHandler HeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadingRow(HeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRow AddHeadingRow(int WebPageId, string HeadingText, string VectorTermLength) {
                HeadingRow rowHeadingRow = ((HeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingText,
                        VectorTermLength};
                rowHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadingRow);
                return rowHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRow FindByHeadingId(int HeadingId) {
                return ((HeadingRow)(this.Rows.Find(new object[] {
                            HeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadingDataTable cln = ((HeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingText = base.Columns["HeadingText"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingText = new global::System.Data.DataColumn("HeadingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingText);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHeadingId}, true));
                this.columnHeadingId.AutoIncrement = true;
                this.columnHeadingId.AutoIncrementSeed = -1;
                this.columnHeadingId.AutoIncrementStep = -1;
                this.columnHeadingId.AllowDBNull = false;
                this.columnHeadingId.ReadOnly = true;
                this.columnHeadingId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingText.AllowDBNull = false;
                this.columnHeadingText.MaxLength = 2147483647;
                this.columnVectorTermLength.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRow NewHeadingRow() {
                return ((HeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadingRowChanged != null)) {
                    this.HeadingRowChanged(this, new HeadingRowChangeEvent(((HeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadingRowChanging != null)) {
                    this.HeadingRowChanging(this, new HeadingRowChangeEvent(((HeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadingRowDeleted != null)) {
                    this.HeadingRowDeleted(this, new HeadingRowChangeEvent(((HeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadingRowDeleting != null)) {
                    this.HeadingRowDeleting(this, new HeadingRowChangeEvent(((HeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadingRow(HeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Heading_CosineDataTable : global::System.Data.TypedTableBase<Heading_CosineRow> {
            
            private global::System.Data.DataColumn columnheadingCosineID;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columnheadingId;
            
            private global::System.Data.DataColumn columnheadingText;
            
            private global::System.Data.DataColumn columnCosine;
            
            private global::System.Data.DataColumn columnSelectedRow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineDataTable() {
                this.TableName = "Heading_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Heading_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Heading_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingCosineIDColumn {
                get {
                    return this.columnheadingCosineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingIdColumn {
                get {
                    return this.columnheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingTextColumn {
                get {
                    return this.columnheadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedRowColumn {
                get {
                    return this.columnSelectedRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineRow this[int index] {
                get {
                    return ((Heading_CosineRow)(this.Rows[index]));
                }
            }
            
            public event Heading_CosineRowChangeEventHandler Heading_CosineRowChanging;
            
            public event Heading_CosineRowChangeEventHandler Heading_CosineRowChanged;
            
            public event Heading_CosineRowChangeEventHandler Heading_CosineRowDeleting;
            
            public event Heading_CosineRowChangeEventHandler Heading_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeading_CosineRow(Heading_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineRow AddHeading_CosineRow(int pageId, int headingId, string headingText, string Cosine, string SelectedRow) {
                Heading_CosineRow rowHeading_CosineRow = ((Heading_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pageId,
                        headingId,
                        headingText,
                        Cosine,
                        SelectedRow};
                rowHeading_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeading_CosineRow);
                return rowHeading_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineRow FindByheadingCosineID(int headingCosineID) {
                return ((Heading_CosineRow)(this.Rows.Find(new object[] {
                            headingCosineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Heading_CosineDataTable cln = ((Heading_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Heading_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnheadingCosineID = base.Columns["headingCosineID"];
                this.columnpageId = base.Columns["pageId"];
                this.columnheadingId = base.Columns["headingId"];
                this.columnheadingText = base.Columns["headingText"];
                this.columnCosine = base.Columns["Cosine"];
                this.columnSelectedRow = base.Columns["SelectedRow"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnheadingCosineID = new global::System.Data.DataColumn("headingCosineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingCosineID);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnheadingId = new global::System.Data.DataColumn("headingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingId);
                this.columnheadingText = new global::System.Data.DataColumn("headingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingText);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.columnSelectedRow = new global::System.Data.DataColumn("SelectedRow", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectedRow);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnheadingCosineID}, true));
                this.columnheadingCosineID.AutoIncrement = true;
                this.columnheadingCosineID.AutoIncrementSeed = -1;
                this.columnheadingCosineID.AutoIncrementStep = -1;
                this.columnheadingCosineID.AllowDBNull = false;
                this.columnheadingCosineID.ReadOnly = true;
                this.columnheadingCosineID.Unique = true;
                this.columnpageId.AllowDBNull = false;
                this.columnheadingId.AllowDBNull = false;
                this.columnheadingText.AllowDBNull = false;
                this.columnheadingText.MaxLength = 2147483647;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
                this.columnSelectedRow.AllowDBNull = false;
                this.columnSelectedRow.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineRow NewHeading_CosineRow() {
                return ((Heading_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Heading_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Heading_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Heading_CosineRowChanged != null)) {
                    this.Heading_CosineRowChanged(this, new Heading_CosineRowChangeEvent(((Heading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Heading_CosineRowChanging != null)) {
                    this.Heading_CosineRowChanging(this, new Heading_CosineRowChangeEvent(((Heading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Heading_CosineRowDeleted != null)) {
                    this.Heading_CosineRowDeleted(this, new Heading_CosineRowChangeEvent(((Heading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Heading_CosineRowDeleting != null)) {
                    this.Heading_CosineRowDeleting(this, new Heading_CosineRowChangeEvent(((Heading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeading_CosineRow(Heading_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Heading_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadingModifiedDataTable : global::System.Data.TypedTableBase<HeadingModifiedRow> {
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingText;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedDataTable() {
                this.TableName = "HeadingModified";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingModifiedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadingModifiedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingTextColumn {
                get {
                    return this.columnHeadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedRow this[int index] {
                get {
                    return ((HeadingModifiedRow)(this.Rows[index]));
                }
            }
            
            public event HeadingModifiedRowChangeEventHandler HeadingModifiedRowChanging;
            
            public event HeadingModifiedRowChangeEventHandler HeadingModifiedRowChanged;
            
            public event HeadingModifiedRowChangeEventHandler HeadingModifiedRowDeleting;
            
            public event HeadingModifiedRowChangeEventHandler HeadingModifiedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadingModifiedRow(HeadingModifiedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedRow AddHeadingModifiedRow(int WebPageId, string HeadingText, string VectorTermLength) {
                HeadingModifiedRow rowHeadingModifiedRow = ((HeadingModifiedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingText,
                        VectorTermLength};
                rowHeadingModifiedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadingModifiedRow);
                return rowHeadingModifiedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedRow FindByHeadingId(int HeadingId) {
                return ((HeadingModifiedRow)(this.Rows.Find(new object[] {
                            HeadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadingModifiedDataTable cln = ((HeadingModifiedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadingModifiedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingText = base.Columns["HeadingText"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingText = new global::System.Data.DataColumn("HeadingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingText);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnHeadingId}, true));
                this.columnHeadingId.AutoIncrement = true;
                this.columnHeadingId.AutoIncrementSeed = -1;
                this.columnHeadingId.AutoIncrementStep = -1;
                this.columnHeadingId.AllowDBNull = false;
                this.columnHeadingId.ReadOnly = true;
                this.columnHeadingId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingText.AllowDBNull = false;
                this.columnHeadingText.MaxLength = 2147483647;
                this.columnVectorTermLength.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedRow NewHeadingModifiedRow() {
                return ((HeadingModifiedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadingModifiedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadingModifiedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadingModifiedRowChanged != null)) {
                    this.HeadingModifiedRowChanged(this, new HeadingModifiedRowChangeEvent(((HeadingModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadingModifiedRowChanging != null)) {
                    this.HeadingModifiedRowChanging(this, new HeadingModifiedRowChangeEvent(((HeadingModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadingModifiedRowDeleted != null)) {
                    this.HeadingModifiedRowDeleted(this, new HeadingModifiedRowChangeEvent(((HeadingModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadingModifiedRowDeleting != null)) {
                    this.HeadingModifiedRowDeleting(this, new HeadingModifiedRowChangeEvent(((HeadingModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadingModifiedRow(HeadingModifiedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadingModifiedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadingPathAdequacy_CosineDataTable : global::System.Data.TypedTableBase<HeadingPathAdequacy_CosineRow> {
            
            private global::System.Data.DataColumn columnheadingPathAdequacyCosineID;
            
            private global::System.Data.DataColumn columnpAString;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columnheadingId;
            
            private global::System.Data.DataColumn columnCosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineDataTable() {
                this.TableName = "HeadingPathAdequacy_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingPathAdequacy_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadingPathAdequacy_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingPathAdequacyCosineIDColumn {
                get {
                    return this.columnheadingPathAdequacyCosineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pAStringColumn {
                get {
                    return this.columnpAString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingIdColumn {
                get {
                    return this.columnheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineRow this[int index] {
                get {
                    return ((HeadingPathAdequacy_CosineRow)(this.Rows[index]));
                }
            }
            
            public event HeadingPathAdequacy_CosineRowChangeEventHandler HeadingPathAdequacy_CosineRowChanging;
            
            public event HeadingPathAdequacy_CosineRowChangeEventHandler HeadingPathAdequacy_CosineRowChanged;
            
            public event HeadingPathAdequacy_CosineRowChangeEventHandler HeadingPathAdequacy_CosineRowDeleting;
            
            public event HeadingPathAdequacy_CosineRowChangeEventHandler HeadingPathAdequacy_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadingPathAdequacy_CosineRow(HeadingPathAdequacy_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineRow AddHeadingPathAdequacy_CosineRow(string pAString, int pageId, int headingId, string Cosine) {
                HeadingPathAdequacy_CosineRow rowHeadingPathAdequacy_CosineRow = ((HeadingPathAdequacy_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pAString,
                        pageId,
                        headingId,
                        Cosine};
                rowHeadingPathAdequacy_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadingPathAdequacy_CosineRow);
                return rowHeadingPathAdequacy_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineRow FindByheadingPathAdequacyCosineID(int headingPathAdequacyCosineID) {
                return ((HeadingPathAdequacy_CosineRow)(this.Rows.Find(new object[] {
                            headingPathAdequacyCosineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadingPathAdequacy_CosineDataTable cln = ((HeadingPathAdequacy_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadingPathAdequacy_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnheadingPathAdequacyCosineID = base.Columns["headingPathAdequacyCosineID"];
                this.columnpAString = base.Columns["pAString"];
                this.columnpageId = base.Columns["pageId"];
                this.columnheadingId = base.Columns["headingId"];
                this.columnCosine = base.Columns["Cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnheadingPathAdequacyCosineID = new global::System.Data.DataColumn("headingPathAdequacyCosineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingPathAdequacyCosineID);
                this.columnpAString = new global::System.Data.DataColumn("pAString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpAString);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnheadingId = new global::System.Data.DataColumn("headingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingId);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnheadingPathAdequacyCosineID}, true));
                this.columnheadingPathAdequacyCosineID.AutoIncrement = true;
                this.columnheadingPathAdequacyCosineID.AutoIncrementSeed = -1;
                this.columnheadingPathAdequacyCosineID.AutoIncrementStep = -1;
                this.columnheadingPathAdequacyCosineID.AllowDBNull = false;
                this.columnheadingPathAdequacyCosineID.ReadOnly = true;
                this.columnheadingPathAdequacyCosineID.Unique = true;
                this.columnpAString.AllowDBNull = false;
                this.columnpAString.MaxLength = 2147483647;
                this.columnpageId.AllowDBNull = false;
                this.columnheadingId.AllowDBNull = false;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineRow NewHeadingPathAdequacy_CosineRow() {
                return ((HeadingPathAdequacy_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadingPathAdequacy_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadingPathAdequacy_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadingPathAdequacy_CosineRowChanged != null)) {
                    this.HeadingPathAdequacy_CosineRowChanged(this, new HeadingPathAdequacy_CosineRowChangeEvent(((HeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadingPathAdequacy_CosineRowChanging != null)) {
                    this.HeadingPathAdequacy_CosineRowChanging(this, new HeadingPathAdequacy_CosineRowChangeEvent(((HeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadingPathAdequacy_CosineRowDeleted != null)) {
                    this.HeadingPathAdequacy_CosineRowDeleted(this, new HeadingPathAdequacy_CosineRowChangeEvent(((HeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadingPathAdequacy_CosineRowDeleting != null)) {
                    this.HeadingPathAdequacy_CosineRowDeleting(this, new HeadingPathAdequacy_CosineRowChangeEvent(((HeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadingPathAdequacy_CosineRow(HeadingPathAdequacy_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadingPathAdequacy_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadingTUBSTVLDataTable : global::System.Data.TypedTableBase<HeadingTUBSTVLRow> {
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingText;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingTUBSTVLDataTable() {
                this.TableName = "HeadingTUBSTVL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingTUBSTVLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadingTUBSTVLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingTextColumn {
                get {
                    return this.columnHeadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingTUBSTVLRow this[int index] {
                get {
                    return ((HeadingTUBSTVLRow)(this.Rows[index]));
                }
            }
            
            public event HeadingTUBSTVLRowChangeEventHandler HeadingTUBSTVLRowChanging;
            
            public event HeadingTUBSTVLRowChangeEventHandler HeadingTUBSTVLRowChanged;
            
            public event HeadingTUBSTVLRowChangeEventHandler HeadingTUBSTVLRowDeleting;
            
            public event HeadingTUBSTVLRowChangeEventHandler HeadingTUBSTVLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadingTUBSTVLRow(HeadingTUBSTVLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingTUBSTVLRow AddHeadingTUBSTVLRow(int WebPageId, string HeadingText, string VectorTermLength) {
                HeadingTUBSTVLRow rowHeadingTUBSTVLRow = ((HeadingTUBSTVLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingText,
                        VectorTermLength};
                rowHeadingTUBSTVLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadingTUBSTVLRow);
                return rowHeadingTUBSTVLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadingTUBSTVLDataTable cln = ((HeadingTUBSTVLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadingTUBSTVLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingText = base.Columns["HeadingText"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingText = new global::System.Data.DataColumn("HeadingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingText);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.columnHeadingId.AutoIncrement = true;
                this.columnHeadingId.AutoIncrementSeed = -1;
                this.columnHeadingId.AutoIncrementStep = -1;
                this.columnHeadingId.AllowDBNull = false;
                this.columnHeadingId.ReadOnly = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingText.AllowDBNull = false;
                this.columnHeadingText.MaxLength = 2147483647;
                this.columnVectorTermLength.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingTUBSTVLRow NewHeadingTUBSTVLRow() {
                return ((HeadingTUBSTVLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadingTUBSTVLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadingTUBSTVLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadingTUBSTVLRowChanged != null)) {
                    this.HeadingTUBSTVLRowChanged(this, new HeadingTUBSTVLRowChangeEvent(((HeadingTUBSTVLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadingTUBSTVLRowChanging != null)) {
                    this.HeadingTUBSTVLRowChanging(this, new HeadingTUBSTVLRowChangeEvent(((HeadingTUBSTVLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadingTUBSTVLRowDeleted != null)) {
                    this.HeadingTUBSTVLRowDeleted(this, new HeadingTUBSTVLRowChangeEvent(((HeadingTUBSTVLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadingTUBSTVLRowDeleting != null)) {
                    this.HeadingTUBSTVLRowDeleting(this, new HeadingTUBSTVLRowChangeEvent(((HeadingTUBSTVLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadingTUBSTVLRow(HeadingTUBSTVLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadingTUBSTVLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadingvsHeadinginSamePageCosinesDataTable : global::System.Data.TypedTableBase<HeadingvsHeadinginSamePageCosinesRow> {
            
            private global::System.Data.DataColumn columnheadingvsheadingId;
            
            private global::System.Data.DataColumn columnWebpageId;
            
            private global::System.Data.DataColumn columnHeadingXId;
            
            private global::System.Data.DataColumn columnHeadingYId;
            
            private global::System.Data.DataColumn columnCosineValueHeadingvsHeading;
            
            private global::System.Data.DataColumn columnHeadingXLinkText;
            
            private global::System.Data.DataColumn columnHeadingYLInkText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesDataTable() {
                this.TableName = "HeadingvsHeadinginSamePageCosines";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingvsHeadinginSamePageCosinesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadingvsHeadinginSamePageCosinesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingvsheadingIdColumn {
                get {
                    return this.columnheadingvsheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebpageIdColumn {
                get {
                    return this.columnWebpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingXIdColumn {
                get {
                    return this.columnHeadingXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingYIdColumn {
                get {
                    return this.columnHeadingYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueHeadingvsHeadingColumn {
                get {
                    return this.columnCosineValueHeadingvsHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingXLinkTextColumn {
                get {
                    return this.columnHeadingXLinkText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingYLInkTextColumn {
                get {
                    return this.columnHeadingYLInkText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesRow this[int index] {
                get {
                    return ((HeadingvsHeadinginSamePageCosinesRow)(this.Rows[index]));
                }
            }
            
            public event HeadingvsHeadinginSamePageCosinesRowChangeEventHandler HeadingvsHeadinginSamePageCosinesRowChanging;
            
            public event HeadingvsHeadinginSamePageCosinesRowChangeEventHandler HeadingvsHeadinginSamePageCosinesRowChanged;
            
            public event HeadingvsHeadinginSamePageCosinesRowChangeEventHandler HeadingvsHeadinginSamePageCosinesRowDeleting;
            
            public event HeadingvsHeadinginSamePageCosinesRowChangeEventHandler HeadingvsHeadinginSamePageCosinesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadingvsHeadinginSamePageCosinesRow(HeadingvsHeadinginSamePageCosinesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesRow AddHeadingvsHeadinginSamePageCosinesRow(int WebpageId, int HeadingXId, int HeadingYId, string CosineValueHeadingvsHeading, string HeadingXLinkText, string HeadingYLInkText) {
                HeadingvsHeadinginSamePageCosinesRow rowHeadingvsHeadinginSamePageCosinesRow = ((HeadingvsHeadinginSamePageCosinesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebpageId,
                        HeadingXId,
                        HeadingYId,
                        CosineValueHeadingvsHeading,
                        HeadingXLinkText,
                        HeadingYLInkText};
                rowHeadingvsHeadinginSamePageCosinesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadingvsHeadinginSamePageCosinesRow);
                return rowHeadingvsHeadinginSamePageCosinesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesRow FindByheadingvsheadingId(int headingvsheadingId) {
                return ((HeadingvsHeadinginSamePageCosinesRow)(this.Rows.Find(new object[] {
                            headingvsheadingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadingvsHeadinginSamePageCosinesDataTable cln = ((HeadingvsHeadinginSamePageCosinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadingvsHeadinginSamePageCosinesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnheadingvsheadingId = base.Columns["headingvsheadingId"];
                this.columnWebpageId = base.Columns["WebpageId"];
                this.columnHeadingXId = base.Columns["HeadingXId"];
                this.columnHeadingYId = base.Columns["HeadingYId"];
                this.columnCosineValueHeadingvsHeading = base.Columns["CosineValueHeadingvsHeading"];
                this.columnHeadingXLinkText = base.Columns["HeadingXLinkText"];
                this.columnHeadingYLInkText = base.Columns["HeadingYLInkText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnheadingvsheadingId = new global::System.Data.DataColumn("headingvsheadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingvsheadingId);
                this.columnWebpageId = new global::System.Data.DataColumn("WebpageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebpageId);
                this.columnHeadingXId = new global::System.Data.DataColumn("HeadingXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingXId);
                this.columnHeadingYId = new global::System.Data.DataColumn("HeadingYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingYId);
                this.columnCosineValueHeadingvsHeading = new global::System.Data.DataColumn("CosineValueHeadingvsHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueHeadingvsHeading);
                this.columnHeadingXLinkText = new global::System.Data.DataColumn("HeadingXLinkText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingXLinkText);
                this.columnHeadingYLInkText = new global::System.Data.DataColumn("HeadingYLInkText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingYLInkText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnheadingvsheadingId}, true));
                this.columnheadingvsheadingId.AutoIncrement = true;
                this.columnheadingvsheadingId.AutoIncrementSeed = -1;
                this.columnheadingvsheadingId.AutoIncrementStep = -1;
                this.columnheadingvsheadingId.AllowDBNull = false;
                this.columnheadingvsheadingId.ReadOnly = true;
                this.columnheadingvsheadingId.Unique = true;
                this.columnWebpageId.AllowDBNull = false;
                this.columnHeadingXId.AllowDBNull = false;
                this.columnHeadingYId.AllowDBNull = false;
                this.columnCosineValueHeadingvsHeading.AllowDBNull = false;
                this.columnCosineValueHeadingvsHeading.MaxLength = 2147483647;
                this.columnHeadingXLinkText.AllowDBNull = false;
                this.columnHeadingXLinkText.MaxLength = 2147483647;
                this.columnHeadingYLInkText.AllowDBNull = false;
                this.columnHeadingYLInkText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesRow NewHeadingvsHeadinginSamePageCosinesRow() {
                return ((HeadingvsHeadinginSamePageCosinesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadingvsHeadinginSamePageCosinesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadingvsHeadinginSamePageCosinesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadingvsHeadinginSamePageCosinesRowChanged != null)) {
                    this.HeadingvsHeadinginSamePageCosinesRowChanged(this, new HeadingvsHeadinginSamePageCosinesRowChangeEvent(((HeadingvsHeadinginSamePageCosinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadingvsHeadinginSamePageCosinesRowChanging != null)) {
                    this.HeadingvsHeadinginSamePageCosinesRowChanging(this, new HeadingvsHeadinginSamePageCosinesRowChangeEvent(((HeadingvsHeadinginSamePageCosinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadingvsHeadinginSamePageCosinesRowDeleted != null)) {
                    this.HeadingvsHeadinginSamePageCosinesRowDeleted(this, new HeadingvsHeadinginSamePageCosinesRowChangeEvent(((HeadingvsHeadinginSamePageCosinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadingvsHeadinginSamePageCosinesRowDeleting != null)) {
                    this.HeadingvsHeadinginSamePageCosinesRowDeleting(this, new HeadingvsHeadinginSamePageCosinesRowChangeEvent(((HeadingvsHeadinginSamePageCosinesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadingvsHeadinginSamePageCosinesRow(HeadingvsHeadinginSamePageCosinesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadingvsHeadinginSamePageCosinesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeadingvsHeadinginSamePageCosinesTUBSDataTable : global::System.Data.TypedTableBase<HeadingvsHeadinginSamePageCosinesTUBSRow> {
            
            private global::System.Data.DataColumn columnheadingvsheadingId;
            
            private global::System.Data.DataColumn columnWebpageId;
            
            private global::System.Data.DataColumn columnHeadingXId;
            
            private global::System.Data.DataColumn columnHeadingYId;
            
            private global::System.Data.DataColumn columnCosineValueHeadingvsHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesTUBSDataTable() {
                this.TableName = "HeadingvsHeadinginSamePageCosinesTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingvsHeadinginSamePageCosinesTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeadingvsHeadinginSamePageCosinesTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingvsheadingIdColumn {
                get {
                    return this.columnheadingvsheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebpageIdColumn {
                get {
                    return this.columnWebpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingXIdColumn {
                get {
                    return this.columnHeadingXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingYIdColumn {
                get {
                    return this.columnHeadingYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueHeadingvsHeadingColumn {
                get {
                    return this.columnCosineValueHeadingvsHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesTUBSRow this[int index] {
                get {
                    return ((HeadingvsHeadinginSamePageCosinesTUBSRow)(this.Rows[index]));
                }
            }
            
            public event HeadingvsHeadinginSamePageCosinesTUBSRowChangeEventHandler HeadingvsHeadinginSamePageCosinesTUBSRowChanging;
            
            public event HeadingvsHeadinginSamePageCosinesTUBSRowChangeEventHandler HeadingvsHeadinginSamePageCosinesTUBSRowChanged;
            
            public event HeadingvsHeadinginSamePageCosinesTUBSRowChangeEventHandler HeadingvsHeadinginSamePageCosinesTUBSRowDeleting;
            
            public event HeadingvsHeadinginSamePageCosinesTUBSRowChangeEventHandler HeadingvsHeadinginSamePageCosinesTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeadingvsHeadinginSamePageCosinesTUBSRow(HeadingvsHeadinginSamePageCosinesTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesTUBSRow AddHeadingvsHeadinginSamePageCosinesTUBSRow(int WebpageId, int HeadingXId, int HeadingYId, string CosineValueHeadingvsHeading) {
                HeadingvsHeadinginSamePageCosinesTUBSRow rowHeadingvsHeadinginSamePageCosinesTUBSRow = ((HeadingvsHeadinginSamePageCosinesTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebpageId,
                        HeadingXId,
                        HeadingYId,
                        CosineValueHeadingvsHeading};
                rowHeadingvsHeadinginSamePageCosinesTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHeadingvsHeadinginSamePageCosinesTUBSRow);
                return rowHeadingvsHeadinginSamePageCosinesTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HeadingvsHeadinginSamePageCosinesTUBSDataTable cln = ((HeadingvsHeadinginSamePageCosinesTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HeadingvsHeadinginSamePageCosinesTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnheadingvsheadingId = base.Columns["headingvsheadingId"];
                this.columnWebpageId = base.Columns["WebpageId"];
                this.columnHeadingXId = base.Columns["HeadingXId"];
                this.columnHeadingYId = base.Columns["HeadingYId"];
                this.columnCosineValueHeadingvsHeading = base.Columns["CosineValueHeadingvsHeading"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnheadingvsheadingId = new global::System.Data.DataColumn("headingvsheadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingvsheadingId);
                this.columnWebpageId = new global::System.Data.DataColumn("WebpageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebpageId);
                this.columnHeadingXId = new global::System.Data.DataColumn("HeadingXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingXId);
                this.columnHeadingYId = new global::System.Data.DataColumn("HeadingYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingYId);
                this.columnCosineValueHeadingvsHeading = new global::System.Data.DataColumn("CosineValueHeadingvsHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueHeadingvsHeading);
                this.columnheadingvsheadingId.AutoIncrement = true;
                this.columnheadingvsheadingId.AutoIncrementSeed = -1;
                this.columnheadingvsheadingId.AutoIncrementStep = -1;
                this.columnheadingvsheadingId.AllowDBNull = false;
                this.columnheadingvsheadingId.ReadOnly = true;
                this.columnWebpageId.AllowDBNull = false;
                this.columnHeadingXId.AllowDBNull = false;
                this.columnHeadingYId.AllowDBNull = false;
                this.columnCosineValueHeadingvsHeading.AllowDBNull = false;
                this.columnCosineValueHeadingvsHeading.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesTUBSRow NewHeadingvsHeadinginSamePageCosinesTUBSRow() {
                return ((HeadingvsHeadinginSamePageCosinesTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HeadingvsHeadinginSamePageCosinesTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HeadingvsHeadinginSamePageCosinesTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeadingvsHeadinginSamePageCosinesTUBSRowChanged != null)) {
                    this.HeadingvsHeadinginSamePageCosinesTUBSRowChanged(this, new HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent(((HeadingvsHeadinginSamePageCosinesTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeadingvsHeadinginSamePageCosinesTUBSRowChanging != null)) {
                    this.HeadingvsHeadinginSamePageCosinesTUBSRowChanging(this, new HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent(((HeadingvsHeadinginSamePageCosinesTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeadingvsHeadinginSamePageCosinesTUBSRowDeleted != null)) {
                    this.HeadingvsHeadinginSamePageCosinesTUBSRowDeleted(this, new HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent(((HeadingvsHeadinginSamePageCosinesTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeadingvsHeadinginSamePageCosinesTUBSRowDeleting != null)) {
                    this.HeadingvsHeadinginSamePageCosinesTUBSRowDeleting(this, new HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent(((HeadingvsHeadinginSamePageCosinesTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeadingvsHeadinginSamePageCosinesTUBSRow(HeadingvsHeadinginSamePageCosinesTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeadingvsHeadinginSamePageCosinesTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkLinkTemplateOfLinksDataTable : global::System.Data.TypedTableBase<LinkLinkTemplateOfLinksRow> {
            
            private global::System.Data.DataColumn columnLinkLinkTemplateOfLinksId;
            
            private global::System.Data.DataColumn columnLinkXId;
            
            private global::System.Data.DataColumn columnLinkYId;
            
            private global::System.Data.DataColumn columnCosineLinkLinkTemplateOfLinks;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksDataTable() {
                this.TableName = "LinkLinkTemplateOfLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkLinkTemplateOfLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkLinkTemplateOfLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkLinkTemplateOfLinksIdColumn {
                get {
                    return this.columnLinkLinkTemplateOfLinksId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkXIdColumn {
                get {
                    return this.columnLinkXId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkYIdColumn {
                get {
                    return this.columnLinkYId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineLinkLinkTemplateOfLinksColumn {
                get {
                    return this.columnCosineLinkLinkTemplateOfLinks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksRow this[int index] {
                get {
                    return ((LinkLinkTemplateOfLinksRow)(this.Rows[index]));
                }
            }
            
            public event LinkLinkTemplateOfLinksRowChangeEventHandler LinkLinkTemplateOfLinksRowChanging;
            
            public event LinkLinkTemplateOfLinksRowChangeEventHandler LinkLinkTemplateOfLinksRowChanged;
            
            public event LinkLinkTemplateOfLinksRowChangeEventHandler LinkLinkTemplateOfLinksRowDeleting;
            
            public event LinkLinkTemplateOfLinksRowChangeEventHandler LinkLinkTemplateOfLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkLinkTemplateOfLinksRow(LinkLinkTemplateOfLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksRow AddLinkLinkTemplateOfLinksRow(int LinkXId, int LinkYId, string CosineLinkLinkTemplateOfLinks, int WebPageId) {
                LinkLinkTemplateOfLinksRow rowLinkLinkTemplateOfLinksRow = ((LinkLinkTemplateOfLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkXId,
                        LinkYId,
                        CosineLinkLinkTemplateOfLinks,
                        WebPageId};
                rowLinkLinkTemplateOfLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkLinkTemplateOfLinksRow);
                return rowLinkLinkTemplateOfLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksRow FindByLinkLinkTemplateOfLinksId(int LinkLinkTemplateOfLinksId) {
                return ((LinkLinkTemplateOfLinksRow)(this.Rows.Find(new object[] {
                            LinkLinkTemplateOfLinksId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkLinkTemplateOfLinksDataTable cln = ((LinkLinkTemplateOfLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkLinkTemplateOfLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkLinkTemplateOfLinksId = base.Columns["LinkLinkTemplateOfLinksId"];
                this.columnLinkXId = base.Columns["LinkXId"];
                this.columnLinkYId = base.Columns["LinkYId"];
                this.columnCosineLinkLinkTemplateOfLinks = base.Columns["CosineLinkLinkTemplateOfLinks"];
                this.columnWebPageId = base.Columns["WebPageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkLinkTemplateOfLinksId = new global::System.Data.DataColumn("LinkLinkTemplateOfLinksId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkLinkTemplateOfLinksId);
                this.columnLinkXId = new global::System.Data.DataColumn("LinkXId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkXId);
                this.columnLinkYId = new global::System.Data.DataColumn("LinkYId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkYId);
                this.columnCosineLinkLinkTemplateOfLinks = new global::System.Data.DataColumn("CosineLinkLinkTemplateOfLinks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineLinkLinkTemplateOfLinks);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkLinkTemplateOfLinksId}, true));
                this.columnLinkLinkTemplateOfLinksId.AutoIncrement = true;
                this.columnLinkLinkTemplateOfLinksId.AutoIncrementSeed = -1;
                this.columnLinkLinkTemplateOfLinksId.AutoIncrementStep = -1;
                this.columnLinkLinkTemplateOfLinksId.AllowDBNull = false;
                this.columnLinkLinkTemplateOfLinksId.ReadOnly = true;
                this.columnLinkLinkTemplateOfLinksId.Unique = true;
                this.columnLinkXId.AllowDBNull = false;
                this.columnLinkYId.AllowDBNull = false;
                this.columnCosineLinkLinkTemplateOfLinks.AllowDBNull = false;
                this.columnCosineLinkLinkTemplateOfLinks.MaxLength = 2147483647;
                this.columnWebPageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksRow NewLinkLinkTemplateOfLinksRow() {
                return ((LinkLinkTemplateOfLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkLinkTemplateOfLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkLinkTemplateOfLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkLinkTemplateOfLinksRowChanged != null)) {
                    this.LinkLinkTemplateOfLinksRowChanged(this, new LinkLinkTemplateOfLinksRowChangeEvent(((LinkLinkTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkLinkTemplateOfLinksRowChanging != null)) {
                    this.LinkLinkTemplateOfLinksRowChanging(this, new LinkLinkTemplateOfLinksRowChangeEvent(((LinkLinkTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkLinkTemplateOfLinksRowDeleted != null)) {
                    this.LinkLinkTemplateOfLinksRowDeleted(this, new LinkLinkTemplateOfLinksRowChangeEvent(((LinkLinkTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkLinkTemplateOfLinksRowDeleting != null)) {
                    this.LinkLinkTemplateOfLinksRowDeleting(this, new LinkLinkTemplateOfLinksRowChangeEvent(((LinkLinkTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkLinkTemplateOfLinksRow(LinkLinkTemplateOfLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkLinkTemplateOfLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkUnderHeading_CosineDataTable : global::System.Data.TypedTableBase<LinkUnderHeading_CosineRow> {
            
            private global::System.Data.DataColumn columnlinkUnderHeadingCosineID;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnheadingId;
            
            private global::System.Data.DataColumn columnheadingText;
            
            private global::System.Data.DataColumn columnlinkId;
            
            private global::System.Data.DataColumn columnLinkName;
            
            private global::System.Data.DataColumn columnCosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineDataTable() {
                this.TableName = "LinkUnderHeading_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkUnderHeading_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkUnderHeading_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkUnderHeadingCosineIDColumn {
                get {
                    return this.columnlinkUnderHeadingCosineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingIdColumn {
                get {
                    return this.columnheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingTextColumn {
                get {
                    return this.columnheadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkIdColumn {
                get {
                    return this.columnlinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkNameColumn {
                get {
                    return this.columnLinkName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineRow this[int index] {
                get {
                    return ((LinkUnderHeading_CosineRow)(this.Rows[index]));
                }
            }
            
            public event LinkUnderHeading_CosineRowChangeEventHandler LinkUnderHeading_CosineRowChanging;
            
            public event LinkUnderHeading_CosineRowChangeEventHandler LinkUnderHeading_CosineRowChanged;
            
            public event LinkUnderHeading_CosineRowChangeEventHandler LinkUnderHeading_CosineRowDeleting;
            
            public event LinkUnderHeading_CosineRowChangeEventHandler LinkUnderHeading_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkUnderHeading_CosineRow(LinkUnderHeading_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineRow AddLinkUnderHeading_CosineRow(int pageId, int ToPageId, int headingId, string headingText, int linkId, string LinkName, string Cosine) {
                LinkUnderHeading_CosineRow rowLinkUnderHeading_CosineRow = ((LinkUnderHeading_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pageId,
                        ToPageId,
                        headingId,
                        headingText,
                        linkId,
                        LinkName,
                        Cosine};
                rowLinkUnderHeading_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkUnderHeading_CosineRow);
                return rowLinkUnderHeading_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineRow FindBylinkUnderHeadingCosineID(int linkUnderHeadingCosineID) {
                return ((LinkUnderHeading_CosineRow)(this.Rows.Find(new object[] {
                            linkUnderHeadingCosineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkUnderHeading_CosineDataTable cln = ((LinkUnderHeading_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkUnderHeading_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlinkUnderHeadingCosineID = base.Columns["linkUnderHeadingCosineID"];
                this.columnpageId = base.Columns["pageId"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnheadingId = base.Columns["headingId"];
                this.columnheadingText = base.Columns["headingText"];
                this.columnlinkId = base.Columns["linkId"];
                this.columnLinkName = base.Columns["LinkName"];
                this.columnCosine = base.Columns["Cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlinkUnderHeadingCosineID = new global::System.Data.DataColumn("linkUnderHeadingCosineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkUnderHeadingCosineID);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnheadingId = new global::System.Data.DataColumn("headingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingId);
                this.columnheadingText = new global::System.Data.DataColumn("headingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingText);
                this.columnlinkId = new global::System.Data.DataColumn("linkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkId);
                this.columnLinkName = new global::System.Data.DataColumn("LinkName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkName);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlinkUnderHeadingCosineID}, true));
                this.columnlinkUnderHeadingCosineID.AutoIncrement = true;
                this.columnlinkUnderHeadingCosineID.AutoIncrementSeed = -1;
                this.columnlinkUnderHeadingCosineID.AutoIncrementStep = -1;
                this.columnlinkUnderHeadingCosineID.AllowDBNull = false;
                this.columnlinkUnderHeadingCosineID.ReadOnly = true;
                this.columnlinkUnderHeadingCosineID.Unique = true;
                this.columnpageId.AllowDBNull = false;
                this.columnheadingId.AllowDBNull = false;
                this.columnheadingText.AllowDBNull = false;
                this.columnheadingText.MaxLength = 2147483647;
                this.columnlinkId.AllowDBNull = false;
                this.columnLinkName.AllowDBNull = false;
                this.columnLinkName.MaxLength = 2147483647;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineRow NewLinkUnderHeading_CosineRow() {
                return ((LinkUnderHeading_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkUnderHeading_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkUnderHeading_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkUnderHeading_CosineRowChanged != null)) {
                    this.LinkUnderHeading_CosineRowChanged(this, new LinkUnderHeading_CosineRowChangeEvent(((LinkUnderHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkUnderHeading_CosineRowChanging != null)) {
                    this.LinkUnderHeading_CosineRowChanging(this, new LinkUnderHeading_CosineRowChangeEvent(((LinkUnderHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkUnderHeading_CosineRowDeleted != null)) {
                    this.LinkUnderHeading_CosineRowDeleted(this, new LinkUnderHeading_CosineRowChangeEvent(((LinkUnderHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkUnderHeading_CosineRowDeleting != null)) {
                    this.LinkUnderHeading_CosineRowDeleting(this, new LinkUnderHeading_CosineRowChangeEvent(((LinkUnderHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkUnderHeading_CosineRow(LinkUnderHeading_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkUnderHeading_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkUnderHeadingPathAdequacy_CosineDataTable : global::System.Data.TypedTableBase<LinkUnderHeadingPathAdequacy_CosineRow> {
            
            private global::System.Data.DataColumn columnlinkUnderHeadingPathAdequacyCosineID;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnpAString;
            
            private global::System.Data.DataColumn columnheadingId;
            
            private global::System.Data.DataColumn columnlinkId;
            
            private global::System.Data.DataColumn columnCosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineDataTable() {
                this.TableName = "LinkUnderHeadingPathAdequacy_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkUnderHeadingPathAdequacy_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkUnderHeadingPathAdequacy_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkUnderHeadingPathAdequacyCosineIDColumn {
                get {
                    return this.columnlinkUnderHeadingPathAdequacyCosineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pAStringColumn {
                get {
                    return this.columnpAString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingIdColumn {
                get {
                    return this.columnheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkIdColumn {
                get {
                    return this.columnlinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineRow this[int index] {
                get {
                    return ((LinkUnderHeadingPathAdequacy_CosineRow)(this.Rows[index]));
                }
            }
            
            public event LinkUnderHeadingPathAdequacy_CosineRowChangeEventHandler LinkUnderHeadingPathAdequacy_CosineRowChanging;
            
            public event LinkUnderHeadingPathAdequacy_CosineRowChangeEventHandler LinkUnderHeadingPathAdequacy_CosineRowChanged;
            
            public event LinkUnderHeadingPathAdequacy_CosineRowChangeEventHandler LinkUnderHeadingPathAdequacy_CosineRowDeleting;
            
            public event LinkUnderHeadingPathAdequacy_CosineRowChangeEventHandler LinkUnderHeadingPathAdequacy_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkUnderHeadingPathAdequacy_CosineRow(LinkUnderHeadingPathAdequacy_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineRow AddLinkUnderHeadingPathAdequacy_CosineRow(int pageId, int ToPageId, string pAString, int headingId, int linkId, string Cosine) {
                LinkUnderHeadingPathAdequacy_CosineRow rowLinkUnderHeadingPathAdequacy_CosineRow = ((LinkUnderHeadingPathAdequacy_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pageId,
                        ToPageId,
                        pAString,
                        headingId,
                        linkId,
                        Cosine};
                rowLinkUnderHeadingPathAdequacy_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkUnderHeadingPathAdequacy_CosineRow);
                return rowLinkUnderHeadingPathAdequacy_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineRow FindBylinkUnderHeadingPathAdequacyCosineID(int linkUnderHeadingPathAdequacyCosineID) {
                return ((LinkUnderHeadingPathAdequacy_CosineRow)(this.Rows.Find(new object[] {
                            linkUnderHeadingPathAdequacyCosineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkUnderHeadingPathAdequacy_CosineDataTable cln = ((LinkUnderHeadingPathAdequacy_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkUnderHeadingPathAdequacy_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlinkUnderHeadingPathAdequacyCosineID = base.Columns["linkUnderHeadingPathAdequacyCosineID"];
                this.columnpageId = base.Columns["pageId"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnpAString = base.Columns["pAString"];
                this.columnheadingId = base.Columns["headingId"];
                this.columnlinkId = base.Columns["linkId"];
                this.columnCosine = base.Columns["Cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlinkUnderHeadingPathAdequacyCosineID = new global::System.Data.DataColumn("linkUnderHeadingPathAdequacyCosineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkUnderHeadingPathAdequacyCosineID);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnpAString = new global::System.Data.DataColumn("pAString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpAString);
                this.columnheadingId = new global::System.Data.DataColumn("headingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingId);
                this.columnlinkId = new global::System.Data.DataColumn("linkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkId);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlinkUnderHeadingPathAdequacyCosineID}, true));
                this.columnlinkUnderHeadingPathAdequacyCosineID.AutoIncrement = true;
                this.columnlinkUnderHeadingPathAdequacyCosineID.AutoIncrementSeed = -1;
                this.columnlinkUnderHeadingPathAdequacyCosineID.AutoIncrementStep = -1;
                this.columnlinkUnderHeadingPathAdequacyCosineID.AllowDBNull = false;
                this.columnlinkUnderHeadingPathAdequacyCosineID.ReadOnly = true;
                this.columnlinkUnderHeadingPathAdequacyCosineID.Unique = true;
                this.columnpageId.AllowDBNull = false;
                this.columnToPageId.AllowDBNull = false;
                this.columnpAString.AllowDBNull = false;
                this.columnpAString.MaxLength = 2147483647;
                this.columnheadingId.AllowDBNull = false;
                this.columnlinkId.AllowDBNull = false;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineRow NewLinkUnderHeadingPathAdequacy_CosineRow() {
                return ((LinkUnderHeadingPathAdequacy_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkUnderHeadingPathAdequacy_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkUnderHeadingPathAdequacy_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkUnderHeadingPathAdequacy_CosineRowChanged != null)) {
                    this.LinkUnderHeadingPathAdequacy_CosineRowChanged(this, new LinkUnderHeadingPathAdequacy_CosineRowChangeEvent(((LinkUnderHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkUnderHeadingPathAdequacy_CosineRowChanging != null)) {
                    this.LinkUnderHeadingPathAdequacy_CosineRowChanging(this, new LinkUnderHeadingPathAdequacy_CosineRowChangeEvent(((LinkUnderHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkUnderHeadingPathAdequacy_CosineRowDeleted != null)) {
                    this.LinkUnderHeadingPathAdequacy_CosineRowDeleted(this, new LinkUnderHeadingPathAdequacy_CosineRowChangeEvent(((LinkUnderHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkUnderHeadingPathAdequacy_CosineRowDeleting != null)) {
                    this.LinkUnderHeadingPathAdequacy_CosineRowDeleting(this, new LinkUnderHeadingPathAdequacy_CosineRowChangeEvent(((LinkUnderHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkUnderHeadingPathAdequacy_CosineRow(LinkUnderHeadingPathAdequacy_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkUnderHeadingPathAdequacy_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithHeadingDataTable : global::System.Data.TypedTableBase<LinkWithHeadingRow> {
            
            private global::System.Data.DataColumn columnLinkId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            private global::System.Data.DataColumn columnCosineValueLinkHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingDataTable() {
                this.TableName = "LinkWithHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIdColumn {
                get {
                    return this.columnLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkHeadingColumn {
                get {
                    return this.columnCosineValueLinkHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow this[int index] {
                get {
                    return ((LinkWithHeadingRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithHeadingRowChangeEventHandler LinkWithHeadingRowChanging;
            
            public event LinkWithHeadingRowChangeEventHandler LinkWithHeadingRowChanged;
            
            public event LinkWithHeadingRowChangeEventHandler LinkWithHeadingRowDeleting;
            
            public event LinkWithHeadingRowChangeEventHandler LinkWithHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithHeadingRow(LinkWithHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow AddLinkWithHeadingRow(WebPageRow parentWebPageRowByFK_LinkWithHeading_WebPage, HeadingRow parentHeadingRowByFK_LinkWithHeading_Heading, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading) {
                LinkWithHeadingRow rowLinkWithHeadingRow = ((LinkWithHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        VectorTermLength,
                        CosineValueLinkHeading};
                if ((parentWebPageRowByFK_LinkWithHeading_WebPage != null)) {
                    columnValuesArray[1] = parentWebPageRowByFK_LinkWithHeading_WebPage[0];
                }
                if ((parentHeadingRowByFK_LinkWithHeading_Heading != null)) {
                    columnValuesArray[2] = parentHeadingRowByFK_LinkWithHeading_Heading[0];
                }
                rowLinkWithHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithHeadingRow);
                return rowLinkWithHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow FindByLinkId(int LinkId) {
                return ((LinkWithHeadingRow)(this.Rows.Find(new object[] {
                            LinkId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithHeadingDataTable cln = ((LinkWithHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkId = base.Columns["LinkId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
                this.columnCosineValueLinkHeading = base.Columns["CosineValueLinkHeading"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkId = new global::System.Data.DataColumn("LinkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.columnCosineValueLinkHeading = new global::System.Data.DataColumn("CosineValueLinkHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkHeading);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkId}, true));
                this.columnLinkId.AutoIncrement = true;
                this.columnLinkId.AutoIncrementSeed = -1;
                this.columnLinkId.AutoIncrementStep = -1;
                this.columnLinkId.AllowDBNull = false;
                this.columnLinkId.ReadOnly = true;
                this.columnLinkId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
                this.columnCosineValueLinkHeading.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow NewLinkWithHeadingRow() {
                return ((LinkWithHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithHeadingRowChanged != null)) {
                    this.LinkWithHeadingRowChanged(this, new LinkWithHeadingRowChangeEvent(((LinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithHeadingRowChanging != null)) {
                    this.LinkWithHeadingRowChanging(this, new LinkWithHeadingRowChangeEvent(((LinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithHeadingRowDeleted != null)) {
                    this.LinkWithHeadingRowDeleted(this, new LinkWithHeadingRowChangeEvent(((LinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithHeadingRowDeleting != null)) {
                    this.LinkWithHeadingRowDeleting(this, new LinkWithHeadingRowChangeEvent(((LinkWithHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithHeadingRow(LinkWithHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithHeadingTUBSDataTable : global::System.Data.TypedTableBase<LinkWithHeadingTUBSRow> {
            
            private global::System.Data.DataColumn columnLinkId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            private global::System.Data.DataColumn columnCosineValueLinkHeading;
            
            private global::System.Data.DataColumn columnVisited;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSDataTable() {
                this.TableName = "LinkWithHeadingTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithHeadingTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithHeadingTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIdColumn {
                get {
                    return this.columnLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkHeadingColumn {
                get {
                    return this.columnCosineValueLinkHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSRow this[int index] {
                get {
                    return ((LinkWithHeadingTUBSRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithHeadingTUBSRowChangeEventHandler LinkWithHeadingTUBSRowChanging;
            
            public event LinkWithHeadingTUBSRowChangeEventHandler LinkWithHeadingTUBSRowChanged;
            
            public event LinkWithHeadingTUBSRowChangeEventHandler LinkWithHeadingTUBSRowDeleting;
            
            public event LinkWithHeadingTUBSRowChangeEventHandler LinkWithHeadingTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithHeadingTUBSRow(LinkWithHeadingTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSRow AddLinkWithHeadingTUBSRow(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, bool Visited) {
                LinkWithHeadingTUBSRow rowLinkWithHeadingTUBSRow = ((LinkWithHeadingTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingId,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        VectorTermLength,
                        CosineValueLinkHeading,
                        Visited};
                rowLinkWithHeadingTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithHeadingTUBSRow);
                return rowLinkWithHeadingTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSRow FindByLinkId(int LinkId) {
                return ((LinkWithHeadingTUBSRow)(this.Rows.Find(new object[] {
                            LinkId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithHeadingTUBSDataTable cln = ((LinkWithHeadingTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithHeadingTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkId = base.Columns["LinkId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
                this.columnCosineValueLinkHeading = base.Columns["CosineValueLinkHeading"];
                this.columnVisited = base.Columns["Visited"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkId = new global::System.Data.DataColumn("LinkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.columnCosineValueLinkHeading = new global::System.Data.DataColumn("CosineValueLinkHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkHeading);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkId}, true));
                this.columnLinkId.AutoIncrement = true;
                this.columnLinkId.AutoIncrementSeed = -1;
                this.columnLinkId.AutoIncrementStep = -1;
                this.columnLinkId.AllowDBNull = false;
                this.columnLinkId.ReadOnly = true;
                this.columnLinkId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
                this.columnCosineValueLinkHeading.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSRow NewLinkWithHeadingTUBSRow() {
                return ((LinkWithHeadingTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithHeadingTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithHeadingTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithHeadingTUBSRowChanged != null)) {
                    this.LinkWithHeadingTUBSRowChanged(this, new LinkWithHeadingTUBSRowChangeEvent(((LinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithHeadingTUBSRowChanging != null)) {
                    this.LinkWithHeadingTUBSRowChanging(this, new LinkWithHeadingTUBSRowChangeEvent(((LinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithHeadingTUBSRowDeleted != null)) {
                    this.LinkWithHeadingTUBSRowDeleted(this, new LinkWithHeadingTUBSRowChangeEvent(((LinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithHeadingTUBSRowDeleting != null)) {
                    this.LinkWithHeadingTUBSRowDeleting(this, new LinkWithHeadingTUBSRowChangeEvent(((LinkWithHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithHeadingTUBSRow(LinkWithHeadingTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithHeadingTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithHeadingTUBSModifiedDataTable : global::System.Data.TypedTableBase<LinkWithHeadingTUBSModifiedRow> {
            
            private global::System.Data.DataColumn columnLinkId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            private global::System.Data.DataColumn columnCosineValueLinkHeading;
            
            private global::System.Data.DataColumn columnVisited;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedDataTable() {
                this.TableName = "LinkWithHeadingTUBSModified";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithHeadingTUBSModifiedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithHeadingTUBSModifiedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIdColumn {
                get {
                    return this.columnLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueLinkHeadingColumn {
                get {
                    return this.columnCosineValueLinkHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedRow this[int index] {
                get {
                    return ((LinkWithHeadingTUBSModifiedRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithHeadingTUBSModifiedRowChangeEventHandler LinkWithHeadingTUBSModifiedRowChanging;
            
            public event LinkWithHeadingTUBSModifiedRowChangeEventHandler LinkWithHeadingTUBSModifiedRowChanged;
            
            public event LinkWithHeadingTUBSModifiedRowChangeEventHandler LinkWithHeadingTUBSModifiedRowDeleting;
            
            public event LinkWithHeadingTUBSModifiedRowChangeEventHandler LinkWithHeadingTUBSModifiedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithHeadingTUBSModifiedRow(LinkWithHeadingTUBSModifiedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedRow AddLinkWithHeadingTUBSModifiedRow(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, bool Visited) {
                LinkWithHeadingTUBSModifiedRow rowLinkWithHeadingTUBSModifiedRow = ((LinkWithHeadingTUBSModifiedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingId,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        VectorTermLength,
                        CosineValueLinkHeading,
                        Visited};
                rowLinkWithHeadingTUBSModifiedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithHeadingTUBSModifiedRow);
                return rowLinkWithHeadingTUBSModifiedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedRow FindByLinkId(int LinkId) {
                return ((LinkWithHeadingTUBSModifiedRow)(this.Rows.Find(new object[] {
                            LinkId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithHeadingTUBSModifiedDataTable cln = ((LinkWithHeadingTUBSModifiedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithHeadingTUBSModifiedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkId = base.Columns["LinkId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
                this.columnCosineValueLinkHeading = base.Columns["CosineValueLinkHeading"];
                this.columnVisited = base.Columns["Visited"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkId = new global::System.Data.DataColumn("LinkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.columnCosineValueLinkHeading = new global::System.Data.DataColumn("CosineValueLinkHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueLinkHeading);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkId}, true));
                this.columnLinkId.AutoIncrement = true;
                this.columnLinkId.AutoIncrementSeed = -1;
                this.columnLinkId.AutoIncrementStep = -1;
                this.columnLinkId.AllowDBNull = false;
                this.columnLinkId.ReadOnly = true;
                this.columnLinkId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
                this.columnCosineValueLinkHeading.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedRow NewLinkWithHeadingTUBSModifiedRow() {
                return ((LinkWithHeadingTUBSModifiedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithHeadingTUBSModifiedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithHeadingTUBSModifiedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithHeadingTUBSModifiedRowChanged != null)) {
                    this.LinkWithHeadingTUBSModifiedRowChanged(this, new LinkWithHeadingTUBSModifiedRowChangeEvent(((LinkWithHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithHeadingTUBSModifiedRowChanging != null)) {
                    this.LinkWithHeadingTUBSModifiedRowChanging(this, new LinkWithHeadingTUBSModifiedRowChangeEvent(((LinkWithHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithHeadingTUBSModifiedRowDeleted != null)) {
                    this.LinkWithHeadingTUBSModifiedRowDeleted(this, new LinkWithHeadingTUBSModifiedRowChangeEvent(((LinkWithHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithHeadingTUBSModifiedRowDeleting != null)) {
                    this.LinkWithHeadingTUBSModifiedRowDeleting(this, new LinkWithHeadingTUBSModifiedRowChangeEvent(((LinkWithHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithHeadingTUBSModifiedRow(LinkWithHeadingTUBSModifiedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithHeadingTUBSModifiedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeadingDataTable : global::System.Data.TypedTableBase<LinkWithoutHeadingRow> {
            
            private global::System.Data.DataColumn columnLinkId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingDataTable() {
                this.TableName = "LinkWithoutHeading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeadingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIdColumn {
                get {
                    return this.columnLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRow this[int index] {
                get {
                    return ((LinkWithoutHeadingRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeadingRowChangeEventHandler LinkWithoutHeadingRowChanging;
            
            public event LinkWithoutHeadingRowChangeEventHandler LinkWithoutHeadingRowChanged;
            
            public event LinkWithoutHeadingRowChangeEventHandler LinkWithoutHeadingRowDeleting;
            
            public event LinkWithoutHeadingRowChangeEventHandler LinkWithoutHeadingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeadingRow(LinkWithoutHeadingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRow AddLinkWithoutHeadingRow(WebPageRow parentWebPageRowByFK_LinkWithoutHeading_WebPage, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength) {
                LinkWithoutHeadingRow rowLinkWithoutHeadingRow = ((LinkWithoutHeadingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        VectorTermLength};
                if ((parentWebPageRowByFK_LinkWithoutHeading_WebPage != null)) {
                    columnValuesArray[1] = parentWebPageRowByFK_LinkWithoutHeading_WebPage[0];
                }
                rowLinkWithoutHeadingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeadingRow);
                return rowLinkWithoutHeadingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRow FindByLinkId(int LinkId) {
                return ((LinkWithoutHeadingRow)(this.Rows.Find(new object[] {
                            LinkId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeadingDataTable cln = ((LinkWithoutHeadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeadingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkId = base.Columns["LinkId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkId = new global::System.Data.DataColumn("LinkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkId}, true));
                this.columnLinkId.AutoIncrement = true;
                this.columnLinkId.AutoIncrementSeed = -1;
                this.columnLinkId.AutoIncrementStep = -1;
                this.columnLinkId.AllowDBNull = false;
                this.columnLinkId.ReadOnly = true;
                this.columnLinkId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnLinkAnchorText.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRow NewLinkWithoutHeadingRow() {
                return ((LinkWithoutHeadingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeadingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeadingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeadingRowChanged != null)) {
                    this.LinkWithoutHeadingRowChanged(this, new LinkWithoutHeadingRowChangeEvent(((LinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeadingRowChanging != null)) {
                    this.LinkWithoutHeadingRowChanging(this, new LinkWithoutHeadingRowChangeEvent(((LinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeadingRowDeleted != null)) {
                    this.LinkWithoutHeadingRowDeleted(this, new LinkWithoutHeadingRowChangeEvent(((LinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeadingRowDeleting != null)) {
                    this.LinkWithoutHeadingRowDeleting(this, new LinkWithoutHeadingRowChangeEvent(((LinkWithoutHeadingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeadingRow(LinkWithoutHeadingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeading_CosineDataTable : global::System.Data.TypedTableBase<LinkWithoutHeading_CosineRow> {
            
            private global::System.Data.DataColumn columnlinkWithoutHeadingCosineID;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnlinkId;
            
            private global::System.Data.DataColumn columnLinkName;
            
            private global::System.Data.DataColumn columnCosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineDataTable() {
                this.TableName = "LinkWithoutHeading_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeading_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeading_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkWithoutHeadingCosineIDColumn {
                get {
                    return this.columnlinkWithoutHeadingCosineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkIdColumn {
                get {
                    return this.columnlinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkNameColumn {
                get {
                    return this.columnLinkName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineRow this[int index] {
                get {
                    return ((LinkWithoutHeading_CosineRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeading_CosineRowChangeEventHandler LinkWithoutHeading_CosineRowChanging;
            
            public event LinkWithoutHeading_CosineRowChangeEventHandler LinkWithoutHeading_CosineRowChanged;
            
            public event LinkWithoutHeading_CosineRowChangeEventHandler LinkWithoutHeading_CosineRowDeleting;
            
            public event LinkWithoutHeading_CosineRowChangeEventHandler LinkWithoutHeading_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeading_CosineRow(LinkWithoutHeading_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineRow AddLinkWithoutHeading_CosineRow(int pageId, int ToPageId, int linkId, string LinkName, string Cosine) {
                LinkWithoutHeading_CosineRow rowLinkWithoutHeading_CosineRow = ((LinkWithoutHeading_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pageId,
                        ToPageId,
                        linkId,
                        LinkName,
                        Cosine};
                rowLinkWithoutHeading_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeading_CosineRow);
                return rowLinkWithoutHeading_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineRow FindBylinkWithoutHeadingCosineID(int linkWithoutHeadingCosineID) {
                return ((LinkWithoutHeading_CosineRow)(this.Rows.Find(new object[] {
                            linkWithoutHeadingCosineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeading_CosineDataTable cln = ((LinkWithoutHeading_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeading_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlinkWithoutHeadingCosineID = base.Columns["linkWithoutHeadingCosineID"];
                this.columnpageId = base.Columns["pageId"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnlinkId = base.Columns["linkId"];
                this.columnLinkName = base.Columns["LinkName"];
                this.columnCosine = base.Columns["Cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlinkWithoutHeadingCosineID = new global::System.Data.DataColumn("linkWithoutHeadingCosineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkWithoutHeadingCosineID);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnlinkId = new global::System.Data.DataColumn("linkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkId);
                this.columnLinkName = new global::System.Data.DataColumn("LinkName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkName);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlinkWithoutHeadingCosineID}, true));
                this.columnlinkWithoutHeadingCosineID.AutoIncrement = true;
                this.columnlinkWithoutHeadingCosineID.AutoIncrementSeed = -1;
                this.columnlinkWithoutHeadingCosineID.AutoIncrementStep = -1;
                this.columnlinkWithoutHeadingCosineID.AllowDBNull = false;
                this.columnlinkWithoutHeadingCosineID.ReadOnly = true;
                this.columnlinkWithoutHeadingCosineID.Unique = true;
                this.columnpageId.AllowDBNull = false;
                this.columnlinkId.AllowDBNull = false;
                this.columnLinkName.AllowDBNull = false;
                this.columnLinkName.MaxLength = 2147483647;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineRow NewLinkWithoutHeading_CosineRow() {
                return ((LinkWithoutHeading_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeading_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeading_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeading_CosineRowChanged != null)) {
                    this.LinkWithoutHeading_CosineRowChanged(this, new LinkWithoutHeading_CosineRowChangeEvent(((LinkWithoutHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeading_CosineRowChanging != null)) {
                    this.LinkWithoutHeading_CosineRowChanging(this, new LinkWithoutHeading_CosineRowChangeEvent(((LinkWithoutHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeading_CosineRowDeleted != null)) {
                    this.LinkWithoutHeading_CosineRowDeleted(this, new LinkWithoutHeading_CosineRowChangeEvent(((LinkWithoutHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeading_CosineRowDeleting != null)) {
                    this.LinkWithoutHeading_CosineRowDeleting(this, new LinkWithoutHeading_CosineRowChangeEvent(((LinkWithoutHeading_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeading_CosineRow(LinkWithoutHeading_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeading_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeadingPathAdequacy_CosineDataTable : global::System.Data.TypedTableBase<LinkWithoutHeadingPathAdequacy_CosineRow> {
            
            private global::System.Data.DataColumn columnlinkWithoutHeadingPathAdequacyCosineID;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnpAString;
            
            private global::System.Data.DataColumn columnlinkId;
            
            private global::System.Data.DataColumn columnCosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineDataTable() {
                this.TableName = "LinkWithoutHeadingPathAdequacy_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingPathAdequacy_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeadingPathAdequacy_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkWithoutHeadingPathAdequacyCosineIDColumn {
                get {
                    return this.columnlinkWithoutHeadingPathAdequacyCosineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pAStringColumn {
                get {
                    return this.columnpAString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkIdColumn {
                get {
                    return this.columnlinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineRow this[int index] {
                get {
                    return ((LinkWithoutHeadingPathAdequacy_CosineRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeadingPathAdequacy_CosineRowChangeEventHandler LinkWithoutHeadingPathAdequacy_CosineRowChanging;
            
            public event LinkWithoutHeadingPathAdequacy_CosineRowChangeEventHandler LinkWithoutHeadingPathAdequacy_CosineRowChanged;
            
            public event LinkWithoutHeadingPathAdequacy_CosineRowChangeEventHandler LinkWithoutHeadingPathAdequacy_CosineRowDeleting;
            
            public event LinkWithoutHeadingPathAdequacy_CosineRowChangeEventHandler LinkWithoutHeadingPathAdequacy_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeadingPathAdequacy_CosineRow(LinkWithoutHeadingPathAdequacy_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineRow AddLinkWithoutHeadingPathAdequacy_CosineRow(int pageId, int ToPageId, string pAString, int linkId, string Cosine) {
                LinkWithoutHeadingPathAdequacy_CosineRow rowLinkWithoutHeadingPathAdequacy_CosineRow = ((LinkWithoutHeadingPathAdequacy_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pageId,
                        ToPageId,
                        pAString,
                        linkId,
                        Cosine};
                rowLinkWithoutHeadingPathAdequacy_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeadingPathAdequacy_CosineRow);
                return rowLinkWithoutHeadingPathAdequacy_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineRow FindBylinkWithoutHeadingPathAdequacyCosineID(int linkWithoutHeadingPathAdequacyCosineID) {
                return ((LinkWithoutHeadingPathAdequacy_CosineRow)(this.Rows.Find(new object[] {
                            linkWithoutHeadingPathAdequacyCosineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeadingPathAdequacy_CosineDataTable cln = ((LinkWithoutHeadingPathAdequacy_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeadingPathAdequacy_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlinkWithoutHeadingPathAdequacyCosineID = base.Columns["linkWithoutHeadingPathAdequacyCosineID"];
                this.columnpageId = base.Columns["pageId"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnpAString = base.Columns["pAString"];
                this.columnlinkId = base.Columns["linkId"];
                this.columnCosine = base.Columns["Cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlinkWithoutHeadingPathAdequacyCosineID = new global::System.Data.DataColumn("linkWithoutHeadingPathAdequacyCosineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkWithoutHeadingPathAdequacyCosineID);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnpAString = new global::System.Data.DataColumn("pAString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpAString);
                this.columnlinkId = new global::System.Data.DataColumn("linkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkId);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlinkWithoutHeadingPathAdequacyCosineID}, true));
                this.columnlinkWithoutHeadingPathAdequacyCosineID.AutoIncrement = true;
                this.columnlinkWithoutHeadingPathAdequacyCosineID.AutoIncrementSeed = -1;
                this.columnlinkWithoutHeadingPathAdequacyCosineID.AutoIncrementStep = -1;
                this.columnlinkWithoutHeadingPathAdequacyCosineID.AllowDBNull = false;
                this.columnlinkWithoutHeadingPathAdequacyCosineID.ReadOnly = true;
                this.columnlinkWithoutHeadingPathAdequacyCosineID.Unique = true;
                this.columnpageId.AllowDBNull = false;
                this.columnpAString.AllowDBNull = false;
                this.columnpAString.MaxLength = 2147483647;
                this.columnlinkId.AllowDBNull = false;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineRow NewLinkWithoutHeadingPathAdequacy_CosineRow() {
                return ((LinkWithoutHeadingPathAdequacy_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeadingPathAdequacy_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeadingPathAdequacy_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeadingPathAdequacy_CosineRowChanged != null)) {
                    this.LinkWithoutHeadingPathAdequacy_CosineRowChanged(this, new LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent(((LinkWithoutHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeadingPathAdequacy_CosineRowChanging != null)) {
                    this.LinkWithoutHeadingPathAdequacy_CosineRowChanging(this, new LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent(((LinkWithoutHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeadingPathAdequacy_CosineRowDeleted != null)) {
                    this.LinkWithoutHeadingPathAdequacy_CosineRowDeleted(this, new LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent(((LinkWithoutHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeadingPathAdequacy_CosineRowDeleting != null)) {
                    this.LinkWithoutHeadingPathAdequacy_CosineRowDeleting(this, new LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent(((LinkWithoutHeadingPathAdequacy_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeadingPathAdequacy_CosineRow(LinkWithoutHeadingPathAdequacy_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeadingPathAdequacy_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeadingTemplateOfLinksDataTable : global::System.Data.TypedTableBase<LinkWithoutHeadingTemplateOfLinksRow> {
            
            private global::System.Data.DataColumn columnLinkWithoutHeadingTemplateOfLinksId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnAllLinksOfTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksDataTable() {
                this.TableName = "LinkWithoutHeadingTemplateOfLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTemplateOfLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeadingTemplateOfLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkWithoutHeadingTemplateOfLinksIdColumn {
                get {
                    return this.columnLinkWithoutHeadingTemplateOfLinksId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllLinksOfTemplateColumn {
                get {
                    return this.columnAllLinksOfTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksRow this[int index] {
                get {
                    return ((LinkWithoutHeadingTemplateOfLinksRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeadingTemplateOfLinksRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksRowChanging;
            
            public event LinkWithoutHeadingTemplateOfLinksRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksRowChanged;
            
            public event LinkWithoutHeadingTemplateOfLinksRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksRowDeleting;
            
            public event LinkWithoutHeadingTemplateOfLinksRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeadingTemplateOfLinksRow(LinkWithoutHeadingTemplateOfLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksRow AddLinkWithoutHeadingTemplateOfLinksRow(int WebPageId, string AllLinksOfTemplate) {
                LinkWithoutHeadingTemplateOfLinksRow rowLinkWithoutHeadingTemplateOfLinksRow = ((LinkWithoutHeadingTemplateOfLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        AllLinksOfTemplate};
                rowLinkWithoutHeadingTemplateOfLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeadingTemplateOfLinksRow);
                return rowLinkWithoutHeadingTemplateOfLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksRow FindByLinkWithoutHeadingTemplateOfLinksId(int LinkWithoutHeadingTemplateOfLinksId) {
                return ((LinkWithoutHeadingTemplateOfLinksRow)(this.Rows.Find(new object[] {
                            LinkWithoutHeadingTemplateOfLinksId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeadingTemplateOfLinksDataTable cln = ((LinkWithoutHeadingTemplateOfLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeadingTemplateOfLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkWithoutHeadingTemplateOfLinksId = base.Columns["LinkWithoutHeadingTemplateOfLinksId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnAllLinksOfTemplate = base.Columns["AllLinksOfTemplate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkWithoutHeadingTemplateOfLinksId = new global::System.Data.DataColumn("LinkWithoutHeadingTemplateOfLinksId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkWithoutHeadingTemplateOfLinksId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnAllLinksOfTemplate = new global::System.Data.DataColumn("AllLinksOfTemplate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllLinksOfTemplate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkWithoutHeadingTemplateOfLinksId}, true));
                this.columnLinkWithoutHeadingTemplateOfLinksId.AutoIncrement = true;
                this.columnLinkWithoutHeadingTemplateOfLinksId.AutoIncrementSeed = -1;
                this.columnLinkWithoutHeadingTemplateOfLinksId.AutoIncrementStep = -1;
                this.columnLinkWithoutHeadingTemplateOfLinksId.AllowDBNull = false;
                this.columnLinkWithoutHeadingTemplateOfLinksId.ReadOnly = true;
                this.columnLinkWithoutHeadingTemplateOfLinksId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnAllLinksOfTemplate.AllowDBNull = false;
                this.columnAllLinksOfTemplate.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksRow NewLinkWithoutHeadingTemplateOfLinksRow() {
                return ((LinkWithoutHeadingTemplateOfLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeadingTemplateOfLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeadingTemplateOfLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksRowChanged != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksRowChanged(this, new LinkWithoutHeadingTemplateOfLinksRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksRowChanging != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksRowChanging(this, new LinkWithoutHeadingTemplateOfLinksRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksRowDeleted != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksRowDeleted(this, new LinkWithoutHeadingTemplateOfLinksRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksRowDeleting != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksRowDeleting(this, new LinkWithoutHeadingTemplateOfLinksRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeadingTemplateOfLinksRow(LinkWithoutHeadingTemplateOfLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeadingTemplateOfLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeadingTemplateOfLinksTUBSDataTable : global::System.Data.TypedTableBase<LinkWithoutHeadingTemplateOfLinksTUBSRow> {
            
            private global::System.Data.DataColumn columnLinkWithoutHeadingTemplateOfLinksId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnAllLinksOfTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSDataTable() {
                this.TableName = "LinkWithoutHeadingTemplateOfLinksTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTemplateOfLinksTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeadingTemplateOfLinksTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkWithoutHeadingTemplateOfLinksIdColumn {
                get {
                    return this.columnLinkWithoutHeadingTemplateOfLinksId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllLinksOfTemplateColumn {
                get {
                    return this.columnAllLinksOfTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSRow this[int index] {
                get {
                    return ((LinkWithoutHeadingTemplateOfLinksTUBSRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksTUBSRowChanging;
            
            public event LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksTUBSRowChanged;
            
            public event LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksTUBSRowDeleting;
            
            public event LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEventHandler LinkWithoutHeadingTemplateOfLinksTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeadingTemplateOfLinksTUBSRow(LinkWithoutHeadingTemplateOfLinksTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSRow AddLinkWithoutHeadingTemplateOfLinksTUBSRow(int WebPageId, string AllLinksOfTemplate) {
                LinkWithoutHeadingTemplateOfLinksTUBSRow rowLinkWithoutHeadingTemplateOfLinksTUBSRow = ((LinkWithoutHeadingTemplateOfLinksTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        AllLinksOfTemplate};
                rowLinkWithoutHeadingTemplateOfLinksTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeadingTemplateOfLinksTUBSRow);
                return rowLinkWithoutHeadingTemplateOfLinksTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSRow FindByLinkWithoutHeadingTemplateOfLinksId(int LinkWithoutHeadingTemplateOfLinksId) {
                return ((LinkWithoutHeadingTemplateOfLinksTUBSRow)(this.Rows.Find(new object[] {
                            LinkWithoutHeadingTemplateOfLinksId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeadingTemplateOfLinksTUBSDataTable cln = ((LinkWithoutHeadingTemplateOfLinksTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeadingTemplateOfLinksTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkWithoutHeadingTemplateOfLinksId = base.Columns["LinkWithoutHeadingTemplateOfLinksId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnAllLinksOfTemplate = base.Columns["AllLinksOfTemplate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkWithoutHeadingTemplateOfLinksId = new global::System.Data.DataColumn("LinkWithoutHeadingTemplateOfLinksId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkWithoutHeadingTemplateOfLinksId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnAllLinksOfTemplate = new global::System.Data.DataColumn("AllLinksOfTemplate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllLinksOfTemplate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkWithoutHeadingTemplateOfLinksId}, true));
                this.columnLinkWithoutHeadingTemplateOfLinksId.AutoIncrement = true;
                this.columnLinkWithoutHeadingTemplateOfLinksId.AutoIncrementSeed = -1;
                this.columnLinkWithoutHeadingTemplateOfLinksId.AutoIncrementStep = -1;
                this.columnLinkWithoutHeadingTemplateOfLinksId.AllowDBNull = false;
                this.columnLinkWithoutHeadingTemplateOfLinksId.ReadOnly = true;
                this.columnLinkWithoutHeadingTemplateOfLinksId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnAllLinksOfTemplate.AllowDBNull = false;
                this.columnAllLinksOfTemplate.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSRow NewLinkWithoutHeadingTemplateOfLinksTUBSRow() {
                return ((LinkWithoutHeadingTemplateOfLinksTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeadingTemplateOfLinksTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeadingTemplateOfLinksTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksTUBSRowChanged != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksTUBSRowChanged(this, new LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksTUBSRowChanging != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksTUBSRowChanging(this, new LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksTUBSRowDeleted != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksTUBSRowDeleted(this, new LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeadingTemplateOfLinksTUBSRowDeleting != null)) {
                    this.LinkWithoutHeadingTemplateOfLinksTUBSRowDeleting(this, new LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent(((LinkWithoutHeadingTemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeadingTemplateOfLinksTUBSRow(LinkWithoutHeadingTemplateOfLinksTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeadingTemplateOfLinksTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeadingTUBSDataTable : global::System.Data.TypedTableBase<LinkWithoutHeadingTUBSRow> {
            
            private global::System.Data.DataColumn columnLinkId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            private global::System.Data.DataColumn columnVisited;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSDataTable() {
                this.TableName = "LinkWithoutHeadingTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeadingTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIdColumn {
                get {
                    return this.columnLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSRow this[int index] {
                get {
                    return ((LinkWithoutHeadingTUBSRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeadingTUBSRowChangeEventHandler LinkWithoutHeadingTUBSRowChanging;
            
            public event LinkWithoutHeadingTUBSRowChangeEventHandler LinkWithoutHeadingTUBSRowChanged;
            
            public event LinkWithoutHeadingTUBSRowChangeEventHandler LinkWithoutHeadingTUBSRowDeleting;
            
            public event LinkWithoutHeadingTUBSRowChangeEventHandler LinkWithoutHeadingTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeadingTUBSRow(LinkWithoutHeadingTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSRow AddLinkWithoutHeadingTUBSRow(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, bool Visited) {
                LinkWithoutHeadingTUBSRow rowLinkWithoutHeadingTUBSRow = ((LinkWithoutHeadingTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        VectorTermLength,
                        Visited};
                rowLinkWithoutHeadingTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeadingTUBSRow);
                return rowLinkWithoutHeadingTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSRow FindByLinkId(int LinkId) {
                return ((LinkWithoutHeadingTUBSRow)(this.Rows.Find(new object[] {
                            LinkId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeadingTUBSDataTable cln = ((LinkWithoutHeadingTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeadingTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkId = base.Columns["LinkId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
                this.columnVisited = base.Columns["Visited"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkId = new global::System.Data.DataColumn("LinkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkId}, true));
                this.columnLinkId.AutoIncrement = true;
                this.columnLinkId.AutoIncrementSeed = -1;
                this.columnLinkId.AutoIncrementStep = -1;
                this.columnLinkId.AllowDBNull = false;
                this.columnLinkId.ReadOnly = true;
                this.columnLinkId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnLinkAnchorText.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSRow NewLinkWithoutHeadingTUBSRow() {
                return ((LinkWithoutHeadingTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeadingTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeadingTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeadingTUBSRowChanged != null)) {
                    this.LinkWithoutHeadingTUBSRowChanged(this, new LinkWithoutHeadingTUBSRowChangeEvent(((LinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeadingTUBSRowChanging != null)) {
                    this.LinkWithoutHeadingTUBSRowChanging(this, new LinkWithoutHeadingTUBSRowChangeEvent(((LinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeadingTUBSRowDeleted != null)) {
                    this.LinkWithoutHeadingTUBSRowDeleted(this, new LinkWithoutHeadingTUBSRowChangeEvent(((LinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeadingTUBSRowDeleting != null)) {
                    this.LinkWithoutHeadingTUBSRowDeleting(this, new LinkWithoutHeadingTUBSRowChangeEvent(((LinkWithoutHeadingTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeadingTUBSRow(LinkWithoutHeadingTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeadingTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkWithoutHeadingTUBSModifiedDataTable : global::System.Data.TypedTableBase<LinkWithoutHeadingTUBSModifiedRow> {
            
            private global::System.Data.DataColumn columnLinkId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnVectorTermLength;
            
            private global::System.Data.DataColumn columnVisited;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedDataTable() {
                this.TableName = "LinkWithoutHeadingTUBSModified";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTUBSModifiedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkWithoutHeadingTUBSModifiedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkIdColumn {
                get {
                    return this.columnLinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VectorTermLengthColumn {
                get {
                    return this.columnVectorTermLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedRow this[int index] {
                get {
                    return ((LinkWithoutHeadingTUBSModifiedRow)(this.Rows[index]));
                }
            }
            
            public event LinkWithoutHeadingTUBSModifiedRowChangeEventHandler LinkWithoutHeadingTUBSModifiedRowChanging;
            
            public event LinkWithoutHeadingTUBSModifiedRowChangeEventHandler LinkWithoutHeadingTUBSModifiedRowChanged;
            
            public event LinkWithoutHeadingTUBSModifiedRowChangeEventHandler LinkWithoutHeadingTUBSModifiedRowDeleting;
            
            public event LinkWithoutHeadingTUBSModifiedRowChangeEventHandler LinkWithoutHeadingTUBSModifiedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkWithoutHeadingTUBSModifiedRow(LinkWithoutHeadingTUBSModifiedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedRow AddLinkWithoutHeadingTUBSModifiedRow(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, bool Visited) {
                LinkWithoutHeadingTUBSModifiedRow rowLinkWithoutHeadingTUBSModifiedRow = ((LinkWithoutHeadingTUBSModifiedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        VectorTermLength,
                        Visited};
                rowLinkWithoutHeadingTUBSModifiedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkWithoutHeadingTUBSModifiedRow);
                return rowLinkWithoutHeadingTUBSModifiedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedRow FindByLinkId(int LinkId) {
                return ((LinkWithoutHeadingTUBSModifiedRow)(this.Rows.Find(new object[] {
                            LinkId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkWithoutHeadingTUBSModifiedDataTable cln = ((LinkWithoutHeadingTUBSModifiedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkWithoutHeadingTUBSModifiedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkId = base.Columns["LinkId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnVectorTermLength = base.Columns["VectorTermLength"];
                this.columnVisited = base.Columns["Visited"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkId = new global::System.Data.DataColumn("LinkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnVectorTermLength = new global::System.Data.DataColumn("VectorTermLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVectorTermLength);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkId}, true));
                this.columnLinkId.AutoIncrement = true;
                this.columnLinkId.AutoIncrementSeed = -1;
                this.columnLinkId.AutoIncrementStep = -1;
                this.columnLinkId.AllowDBNull = false;
                this.columnLinkId.ReadOnly = true;
                this.columnLinkId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnLinkAnchorText.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnVectorTermLength.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedRow NewLinkWithoutHeadingTUBSModifiedRow() {
                return ((LinkWithoutHeadingTUBSModifiedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkWithoutHeadingTUBSModifiedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkWithoutHeadingTUBSModifiedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkWithoutHeadingTUBSModifiedRowChanged != null)) {
                    this.LinkWithoutHeadingTUBSModifiedRowChanged(this, new LinkWithoutHeadingTUBSModifiedRowChangeEvent(((LinkWithoutHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkWithoutHeadingTUBSModifiedRowChanging != null)) {
                    this.LinkWithoutHeadingTUBSModifiedRowChanging(this, new LinkWithoutHeadingTUBSModifiedRowChangeEvent(((LinkWithoutHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkWithoutHeadingTUBSModifiedRowDeleted != null)) {
                    this.LinkWithoutHeadingTUBSModifiedRowDeleted(this, new LinkWithoutHeadingTUBSModifiedRowChangeEvent(((LinkWithoutHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkWithoutHeadingTUBSModifiedRowDeleting != null)) {
                    this.LinkWithoutHeadingTUBSModifiedRowDeleting(this, new LinkWithoutHeadingTUBSModifiedRowChangeEvent(((LinkWithoutHeadingTUBSModifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkWithoutHeadingTUBSModifiedRow(LinkWithoutHeadingTUBSModifiedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkWithoutHeadingTUBSModifiedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Page_Visited_UnsuccessfullyDataTable : global::System.Data.TypedTableBase<Page_Visited_UnsuccessfullyRow> {
            
            private global::System.Data.DataColumn columnpageId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Page_Visited_UnsuccessfullyDataTable() {
                this.TableName = "Page_Visited_Unsuccessfully";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Page_Visited_UnsuccessfullyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Page_Visited_UnsuccessfullyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Page_Visited_UnsuccessfullyRow this[int index] {
                get {
                    return ((Page_Visited_UnsuccessfullyRow)(this.Rows[index]));
                }
            }
            
            public event Page_Visited_UnsuccessfullyRowChangeEventHandler Page_Visited_UnsuccessfullyRowChanging;
            
            public event Page_Visited_UnsuccessfullyRowChangeEventHandler Page_Visited_UnsuccessfullyRowChanged;
            
            public event Page_Visited_UnsuccessfullyRowChangeEventHandler Page_Visited_UnsuccessfullyRowDeleting;
            
            public event Page_Visited_UnsuccessfullyRowChangeEventHandler Page_Visited_UnsuccessfullyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPage_Visited_UnsuccessfullyRow(Page_Visited_UnsuccessfullyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Page_Visited_UnsuccessfullyRow AddPage_Visited_UnsuccessfullyRow(int pageId) {
                Page_Visited_UnsuccessfullyRow rowPage_Visited_UnsuccessfullyRow = ((Page_Visited_UnsuccessfullyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        pageId};
                rowPage_Visited_UnsuccessfullyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPage_Visited_UnsuccessfullyRow);
                return rowPage_Visited_UnsuccessfullyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Page_Visited_UnsuccessfullyDataTable cln = ((Page_Visited_UnsuccessfullyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Page_Visited_UnsuccessfullyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpageId = base.Columns["pageId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columnpageId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Page_Visited_UnsuccessfullyRow NewPage_Visited_UnsuccessfullyRow() {
                return ((Page_Visited_UnsuccessfullyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Page_Visited_UnsuccessfullyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Page_Visited_UnsuccessfullyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Page_Visited_UnsuccessfullyRowChanged != null)) {
                    this.Page_Visited_UnsuccessfullyRowChanged(this, new Page_Visited_UnsuccessfullyRowChangeEvent(((Page_Visited_UnsuccessfullyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Page_Visited_UnsuccessfullyRowChanging != null)) {
                    this.Page_Visited_UnsuccessfullyRowChanging(this, new Page_Visited_UnsuccessfullyRowChangeEvent(((Page_Visited_UnsuccessfullyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Page_Visited_UnsuccessfullyRowDeleted != null)) {
                    this.Page_Visited_UnsuccessfullyRowDeleted(this, new Page_Visited_UnsuccessfullyRowChangeEvent(((Page_Visited_UnsuccessfullyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Page_Visited_UnsuccessfullyRowDeleting != null)) {
                    this.Page_Visited_UnsuccessfullyRowDeleting(this, new Page_Visited_UnsuccessfullyRowChangeEvent(((Page_Visited_UnsuccessfullyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePage_Visited_UnsuccessfullyRow(Page_Visited_UnsuccessfullyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Page_Visited_UnsuccessfullyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PageTemplateDataTable : global::System.Data.TypedTableBase<PageTemplateRow> {
            
            private global::System.Data.DataColumn columnPageTemplateId;
            
            private global::System.Data.DataColumn columnPattern;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateDataTable() {
                this.TableName = "PageTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PageTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PageTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PageTemplateIdColumn {
                get {
                    return this.columnPageTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PatternColumn {
                get {
                    return this.columnPattern;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateRow this[int index] {
                get {
                    return ((PageTemplateRow)(this.Rows[index]));
                }
            }
            
            public event PageTemplateRowChangeEventHandler PageTemplateRowChanging;
            
            public event PageTemplateRowChangeEventHandler PageTemplateRowChanged;
            
            public event PageTemplateRowChangeEventHandler PageTemplateRowDeleting;
            
            public event PageTemplateRowChangeEventHandler PageTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPageTemplateRow(PageTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateRow AddPageTemplateRow(string Pattern, string Name) {
                PageTemplateRow rowPageTemplateRow = ((PageTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Pattern,
                        Name};
                rowPageTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPageTemplateRow);
                return rowPageTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateRow FindByPageTemplateId(int PageTemplateId) {
                return ((PageTemplateRow)(this.Rows.Find(new object[] {
                            PageTemplateId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PageTemplateDataTable cln = ((PageTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PageTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPageTemplateId = base.Columns["PageTemplateId"];
                this.columnPattern = base.Columns["Pattern"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPageTemplateId = new global::System.Data.DataColumn("PageTemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageTemplateId);
                this.columnPattern = new global::System.Data.DataColumn("Pattern", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPattern);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPageTemplateId}, true));
                this.columnPageTemplateId.AutoIncrement = true;
                this.columnPageTemplateId.AutoIncrementSeed = -1;
                this.columnPageTemplateId.AutoIncrementStep = -1;
                this.columnPageTemplateId.AllowDBNull = false;
                this.columnPageTemplateId.ReadOnly = true;
                this.columnPageTemplateId.Unique = true;
                this.columnPattern.AllowDBNull = false;
                this.columnPattern.MaxLength = 4000;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateRow NewPageTemplateRow() {
                return ((PageTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PageTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PageTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PageTemplateRowChanged != null)) {
                    this.PageTemplateRowChanged(this, new PageTemplateRowChangeEvent(((PageTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PageTemplateRowChanging != null)) {
                    this.PageTemplateRowChanging(this, new PageTemplateRowChangeEvent(((PageTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PageTemplateRowDeleted != null)) {
                    this.PageTemplateRowDeleted(this, new PageTemplateRowChangeEvent(((PageTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PageTemplateRowDeleting != null)) {
                    this.PageTemplateRowDeleting(this, new PageTemplateRowChangeEvent(((PageTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePageTemplateRow(PageTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PageTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParagraphDataTable : global::System.Data.TypedTableBase<ParagraphRow> {
            
            private global::System.Data.DataColumn columnParaId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnParaText;
            
            private global::System.Data.DataColumn columnCosineValueParagraphHeading;
            
            private global::System.Data.DataColumn columnHeadingText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphDataTable() {
                this.TableName = "Paragraph";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParagraphDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParagraphDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaIdColumn {
                get {
                    return this.columnParaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaTextColumn {
                get {
                    return this.columnParaText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueParagraphHeadingColumn {
                get {
                    return this.columnCosineValueParagraphHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingTextColumn {
                get {
                    return this.columnHeadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphRow this[int index] {
                get {
                    return ((ParagraphRow)(this.Rows[index]));
                }
            }
            
            public event ParagraphRowChangeEventHandler ParagraphRowChanging;
            
            public event ParagraphRowChangeEventHandler ParagraphRowChanged;
            
            public event ParagraphRowChangeEventHandler ParagraphRowDeleting;
            
            public event ParagraphRowChangeEventHandler ParagraphRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParagraphRow(ParagraphRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphRow AddParagraphRow(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText) {
                ParagraphRow rowParagraphRow = ((ParagraphRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingId,
                        ParaText,
                        CosineValueParagraphHeading,
                        HeadingText};
                rowParagraphRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParagraphRow);
                return rowParagraphRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphRow FindByParaId(int ParaId) {
                return ((ParagraphRow)(this.Rows.Find(new object[] {
                            ParaId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParagraphDataTable cln = ((ParagraphDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParagraphDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParaId = base.Columns["ParaId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnParaText = base.Columns["ParaText"];
                this.columnCosineValueParagraphHeading = base.Columns["CosineValueParagraphHeading"];
                this.columnHeadingText = base.Columns["HeadingText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParaId = new global::System.Data.DataColumn("ParaId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnParaText = new global::System.Data.DataColumn("ParaText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaText);
                this.columnCosineValueParagraphHeading = new global::System.Data.DataColumn("CosineValueParagraphHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueParagraphHeading);
                this.columnHeadingText = new global::System.Data.DataColumn("HeadingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnParaId}, true));
                this.columnParaId.AutoIncrement = true;
                this.columnParaId.AutoIncrementSeed = -1;
                this.columnParaId.AutoIncrementStep = -1;
                this.columnParaId.AllowDBNull = false;
                this.columnParaId.ReadOnly = true;
                this.columnParaId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnParaText.AllowDBNull = false;
                this.columnParaText.MaxLength = 2147483647;
                this.columnCosineValueParagraphHeading.AllowDBNull = false;
                this.columnCosineValueParagraphHeading.MaxLength = 2147483647;
                this.columnHeadingText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphRow NewParagraphRow() {
                return ((ParagraphRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParagraphRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParagraphRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParagraphRowChanged != null)) {
                    this.ParagraphRowChanged(this, new ParagraphRowChangeEvent(((ParagraphRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParagraphRowChanging != null)) {
                    this.ParagraphRowChanging(this, new ParagraphRowChangeEvent(((ParagraphRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParagraphRowDeleted != null)) {
                    this.ParagraphRowDeleted(this, new ParagraphRowChangeEvent(((ParagraphRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParagraphRowDeleting != null)) {
                    this.ParagraphRowDeleting(this, new ParagraphRowChangeEvent(((ParagraphRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParagraphRow(ParagraphRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParagraphDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Paragraph_CosineDataTable : global::System.Data.TypedTableBase<Paragraph_CosineRow> {
            
            private global::System.Data.DataColumn columnParagraphCosineId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnParaId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnParaText;
            
            private global::System.Data.DataColumn columnCosineParaAgainstGoal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineDataTable() {
                this.TableName = "Paragraph_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Paragraph_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Paragraph_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParagraphCosineIdColumn {
                get {
                    return this.columnParagraphCosineId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaIdColumn {
                get {
                    return this.columnParaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaTextColumn {
                get {
                    return this.columnParaText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineParaAgainstGoalColumn {
                get {
                    return this.columnCosineParaAgainstGoal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineRow this[int index] {
                get {
                    return ((Paragraph_CosineRow)(this.Rows[index]));
                }
            }
            
            public event Paragraph_CosineRowChangeEventHandler Paragraph_CosineRowChanging;
            
            public event Paragraph_CosineRowChangeEventHandler Paragraph_CosineRowChanged;
            
            public event Paragraph_CosineRowChangeEventHandler Paragraph_CosineRowDeleting;
            
            public event Paragraph_CosineRowChangeEventHandler Paragraph_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParagraph_CosineRow(Paragraph_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineRow AddParagraph_CosineRow(int WebPageId, int ParaId, int HeadingId, string ParaText, string CosineParaAgainstGoal) {
                Paragraph_CosineRow rowParagraph_CosineRow = ((Paragraph_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        ParaId,
                        HeadingId,
                        ParaText,
                        CosineParaAgainstGoal};
                rowParagraph_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParagraph_CosineRow);
                return rowParagraph_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineRow FindByParagraphCosineId(int ParagraphCosineId) {
                return ((Paragraph_CosineRow)(this.Rows.Find(new object[] {
                            ParagraphCosineId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Paragraph_CosineDataTable cln = ((Paragraph_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Paragraph_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParagraphCosineId = base.Columns["ParagraphCosineId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnParaId = base.Columns["ParaId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnParaText = base.Columns["ParaText"];
                this.columnCosineParaAgainstGoal = base.Columns["CosineParaAgainstGoal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParagraphCosineId = new global::System.Data.DataColumn("ParagraphCosineId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParagraphCosineId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnParaId = new global::System.Data.DataColumn("ParaId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnParaText = new global::System.Data.DataColumn("ParaText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaText);
                this.columnCosineParaAgainstGoal = new global::System.Data.DataColumn("CosineParaAgainstGoal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineParaAgainstGoal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnParagraphCosineId}, true));
                this.columnParagraphCosineId.AutoIncrement = true;
                this.columnParagraphCosineId.AutoIncrementSeed = -1;
                this.columnParagraphCosineId.AutoIncrementStep = -1;
                this.columnParagraphCosineId.AllowDBNull = false;
                this.columnParagraphCosineId.ReadOnly = true;
                this.columnParagraphCosineId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnParaId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnParaText.MaxLength = 2147483647;
                this.columnCosineParaAgainstGoal.AllowDBNull = false;
                this.columnCosineParaAgainstGoal.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineRow NewParagraph_CosineRow() {
                return ((Paragraph_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Paragraph_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Paragraph_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Paragraph_CosineRowChanged != null)) {
                    this.Paragraph_CosineRowChanged(this, new Paragraph_CosineRowChangeEvent(((Paragraph_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Paragraph_CosineRowChanging != null)) {
                    this.Paragraph_CosineRowChanging(this, new Paragraph_CosineRowChangeEvent(((Paragraph_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Paragraph_CosineRowDeleted != null)) {
                    this.Paragraph_CosineRowDeleted(this, new Paragraph_CosineRowChangeEvent(((Paragraph_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Paragraph_CosineRowDeleting != null)) {
                    this.Paragraph_CosineRowDeleting(this, new Paragraph_CosineRowChangeEvent(((Paragraph_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParagraph_CosineRow(Paragraph_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Paragraph_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParagraphTUBSDataTable : global::System.Data.TypedTableBase<ParagraphTUBSRow> {
            
            private global::System.Data.DataColumn columnParaId;
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnHeadingId;
            
            private global::System.Data.DataColumn columnParaText;
            
            private global::System.Data.DataColumn columnCosineValueParagraphHeading;
            
            private global::System.Data.DataColumn columnHeadingText;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSDataTable() {
                this.TableName = "ParagraphTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParagraphTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParagraphTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaIdColumn {
                get {
                    return this.columnParaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingIdColumn {
                get {
                    return this.columnHeadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParaTextColumn {
                get {
                    return this.columnParaText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineValueParagraphHeadingColumn {
                get {
                    return this.columnCosineValueParagraphHeading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadingTextColumn {
                get {
                    return this.columnHeadingText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSRow this[int index] {
                get {
                    return ((ParagraphTUBSRow)(this.Rows[index]));
                }
            }
            
            public event ParagraphTUBSRowChangeEventHandler ParagraphTUBSRowChanging;
            
            public event ParagraphTUBSRowChangeEventHandler ParagraphTUBSRowChanged;
            
            public event ParagraphTUBSRowChangeEventHandler ParagraphTUBSRowDeleting;
            
            public event ParagraphTUBSRowChangeEventHandler ParagraphTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParagraphTUBSRow(ParagraphTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSRow AddParagraphTUBSRow(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText) {
                ParagraphTUBSRow rowParagraphTUBSRow = ((ParagraphTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebPageId,
                        HeadingId,
                        ParaText,
                        CosineValueParagraphHeading,
                        HeadingText};
                rowParagraphTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParagraphTUBSRow);
                return rowParagraphTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSRow FindByParaId(int ParaId) {
                return ((ParagraphTUBSRow)(this.Rows.Find(new object[] {
                            ParaId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ParagraphTUBSDataTable cln = ((ParagraphTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParagraphTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParaId = base.Columns["ParaId"];
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnHeadingId = base.Columns["HeadingId"];
                this.columnParaText = base.Columns["ParaText"];
                this.columnCosineValueParagraphHeading = base.Columns["CosineValueParagraphHeading"];
                this.columnHeadingText = base.Columns["HeadingText"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParaId = new global::System.Data.DataColumn("ParaId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaId);
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnHeadingId = new global::System.Data.DataColumn("HeadingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingId);
                this.columnParaText = new global::System.Data.DataColumn("ParaText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParaText);
                this.columnCosineValueParagraphHeading = new global::System.Data.DataColumn("CosineValueParagraphHeading", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosineValueParagraphHeading);
                this.columnHeadingText = new global::System.Data.DataColumn("HeadingText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadingText);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnParaId}, true));
                this.columnParaId.AutoIncrement = true;
                this.columnParaId.AutoIncrementSeed = -1;
                this.columnParaId.AutoIncrementStep = -1;
                this.columnParaId.AllowDBNull = false;
                this.columnParaId.ReadOnly = true;
                this.columnParaId.Unique = true;
                this.columnWebPageId.AllowDBNull = false;
                this.columnHeadingId.AllowDBNull = false;
                this.columnParaText.AllowDBNull = false;
                this.columnParaText.MaxLength = 2147483647;
                this.columnCosineValueParagraphHeading.AllowDBNull = false;
                this.columnCosineValueParagraphHeading.MaxLength = 2147483647;
                this.columnHeadingText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSRow NewParagraphTUBSRow() {
                return ((ParagraphTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParagraphTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ParagraphTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParagraphTUBSRowChanged != null)) {
                    this.ParagraphTUBSRowChanged(this, new ParagraphTUBSRowChangeEvent(((ParagraphTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParagraphTUBSRowChanging != null)) {
                    this.ParagraphTUBSRowChanging(this, new ParagraphTUBSRowChangeEvent(((ParagraphTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParagraphTUBSRowDeleted != null)) {
                    this.ParagraphTUBSRowDeleted(this, new ParagraphTUBSRowChangeEvent(((ParagraphTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParagraphTUBSRowDeleting != null)) {
                    this.ParagraphTUBSRowDeleting(this, new ParagraphTUBSRowChangeEvent(((ParagraphTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParagraphTUBSRow(ParagraphTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParagraphTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PathDataTable : global::System.Data.TypedTableBase<PathRow> {
            
            private global::System.Data.DataColumn columnpathId;
            
            private global::System.Data.DataColumn columnheadingId;
            
            private global::System.Data.DataColumn columnlinkId;
            
            private global::System.Data.DataColumn columnThisPageId;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnPreviousCosine;
            
            private global::System.Data.DataColumn columnNewCosine;
            
            private global::System.Data.DataColumn columnPathChoosen;
            
            private global::System.Data.DataColumn columnPreviousRow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathDataTable() {
                this.TableName = "Path";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PathDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PathDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pathIdColumn {
                get {
                    return this.columnpathId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingIdColumn {
                get {
                    return this.columnheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn linkIdColumn {
                get {
                    return this.columnlinkId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThisPageIdColumn {
                get {
                    return this.columnThisPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreviousCosineColumn {
                get {
                    return this.columnPreviousCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewCosineColumn {
                get {
                    return this.columnNewCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PathChoosenColumn {
                get {
                    return this.columnPathChoosen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreviousRowColumn {
                get {
                    return this.columnPreviousRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathRow this[int index] {
                get {
                    return ((PathRow)(this.Rows[index]));
                }
            }
            
            public event PathRowChangeEventHandler PathRowChanging;
            
            public event PathRowChangeEventHandler PathRowChanged;
            
            public event PathRowChangeEventHandler PathRowDeleting;
            
            public event PathRowChangeEventHandler PathRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPathRow(PathRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathRow AddPathRow(int headingId, int linkId, int ThisPageId, int ToPageId, string PreviousCosine, string NewCosine, string PathChoosen, int PreviousRow) {
                PathRow rowPathRow = ((PathRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        headingId,
                        linkId,
                        ThisPageId,
                        ToPageId,
                        PreviousCosine,
                        NewCosine,
                        PathChoosen,
                        PreviousRow};
                rowPathRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPathRow);
                return rowPathRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathRow FindBypathId(int pathId) {
                return ((PathRow)(this.Rows.Find(new object[] {
                            pathId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PathDataTable cln = ((PathDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PathDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpathId = base.Columns["pathId"];
                this.columnheadingId = base.Columns["headingId"];
                this.columnlinkId = base.Columns["linkId"];
                this.columnThisPageId = base.Columns["ThisPageId"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnPreviousCosine = base.Columns["PreviousCosine"];
                this.columnNewCosine = base.Columns["NewCosine"];
                this.columnPathChoosen = base.Columns["PathChoosen"];
                this.columnPreviousRow = base.Columns["PreviousRow"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpathId = new global::System.Data.DataColumn("pathId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpathId);
                this.columnheadingId = new global::System.Data.DataColumn("headingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingId);
                this.columnlinkId = new global::System.Data.DataColumn("linkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlinkId);
                this.columnThisPageId = new global::System.Data.DataColumn("ThisPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThisPageId);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnPreviousCosine = new global::System.Data.DataColumn("PreviousCosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreviousCosine);
                this.columnNewCosine = new global::System.Data.DataColumn("NewCosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewCosine);
                this.columnPathChoosen = new global::System.Data.DataColumn("PathChoosen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPathChoosen);
                this.columnPreviousRow = new global::System.Data.DataColumn("PreviousRow", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreviousRow);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpathId}, true));
                this.columnpathId.AutoIncrement = true;
                this.columnpathId.AutoIncrementSeed = -1;
                this.columnpathId.AutoIncrementStep = -1;
                this.columnpathId.AllowDBNull = false;
                this.columnpathId.ReadOnly = true;
                this.columnpathId.Unique = true;
                this.columnPreviousCosine.MaxLength = 2147483647;
                this.columnNewCosine.MaxLength = 2147483647;
                this.columnPathChoosen.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathRow NewPathRow() {
                return ((PathRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PathRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PathRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PathRowChanged != null)) {
                    this.PathRowChanged(this, new PathRowChangeEvent(((PathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PathRowChanging != null)) {
                    this.PathRowChanging(this, new PathRowChangeEvent(((PathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PathRowDeleted != null)) {
                    this.PathRowDeleted(this, new PathRowChangeEvent(((PathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PathRowDeleting != null)) {
                    this.PathRowDeleting(this, new PathRowChangeEvent(((PathRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePathRow(PathRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PathDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Solution_FoundDataTable : global::System.Data.TypedTableBase<Solution_FoundRow> {
            
            private global::System.Data.DataColumn columnsolutionFoundId;
            
            private global::System.Data.DataColumn columnpageId;
            
            private global::System.Data.DataColumn columntopageId;
            
            private global::System.Data.DataColumn columnheadingId;
            
            private global::System.Data.DataColumn columnpathIdinPathTable;
            
            private global::System.Data.DataColumn columnparagraphId;
            
            private global::System.Data.DataColumn columnparagraphText;
            
            private global::System.Data.DataColumn columncosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundDataTable() {
                this.TableName = "Solution_Found";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Solution_FoundDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Solution_FoundDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn solutionFoundIdColumn {
                get {
                    return this.columnsolutionFoundId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pageIdColumn {
                get {
                    return this.columnpageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn topageIdColumn {
                get {
                    return this.columntopageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn headingIdColumn {
                get {
                    return this.columnheadingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pathIdinPathTableColumn {
                get {
                    return this.columnpathIdinPathTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paragraphIdColumn {
                get {
                    return this.columnparagraphId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paragraphTextColumn {
                get {
                    return this.columnparagraphText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cosineColumn {
                get {
                    return this.columncosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundRow this[int index] {
                get {
                    return ((Solution_FoundRow)(this.Rows[index]));
                }
            }
            
            public event Solution_FoundRowChangeEventHandler Solution_FoundRowChanging;
            
            public event Solution_FoundRowChangeEventHandler Solution_FoundRowChanged;
            
            public event Solution_FoundRowChangeEventHandler Solution_FoundRowDeleting;
            
            public event Solution_FoundRowChangeEventHandler Solution_FoundRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSolution_FoundRow(Solution_FoundRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundRow AddSolution_FoundRow(int pageId, int topageId, int headingId, int pathIdinPathTable, int paragraphId, string paragraphText, string cosine) {
                Solution_FoundRow rowSolution_FoundRow = ((Solution_FoundRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        pageId,
                        topageId,
                        headingId,
                        pathIdinPathTable,
                        paragraphId,
                        paragraphText,
                        cosine};
                rowSolution_FoundRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSolution_FoundRow);
                return rowSolution_FoundRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundRow FindBysolutionFoundId(int solutionFoundId) {
                return ((Solution_FoundRow)(this.Rows.Find(new object[] {
                            solutionFoundId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Solution_FoundDataTable cln = ((Solution_FoundDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Solution_FoundDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsolutionFoundId = base.Columns["solutionFoundId"];
                this.columnpageId = base.Columns["pageId"];
                this.columntopageId = base.Columns["topageId"];
                this.columnheadingId = base.Columns["headingId"];
                this.columnpathIdinPathTable = base.Columns["pathIdinPathTable"];
                this.columnparagraphId = base.Columns["paragraphId"];
                this.columnparagraphText = base.Columns["paragraphText"];
                this.columncosine = base.Columns["cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsolutionFoundId = new global::System.Data.DataColumn("solutionFoundId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsolutionFoundId);
                this.columnpageId = new global::System.Data.DataColumn("pageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpageId);
                this.columntopageId = new global::System.Data.DataColumn("topageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntopageId);
                this.columnheadingId = new global::System.Data.DataColumn("headingId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheadingId);
                this.columnpathIdinPathTable = new global::System.Data.DataColumn("pathIdinPathTable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpathIdinPathTable);
                this.columnparagraphId = new global::System.Data.DataColumn("paragraphId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparagraphId);
                this.columnparagraphText = new global::System.Data.DataColumn("paragraphText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparagraphText);
                this.columncosine = new global::System.Data.DataColumn("cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsolutionFoundId}, true));
                this.columnsolutionFoundId.AutoIncrement = true;
                this.columnsolutionFoundId.AutoIncrementSeed = -1;
                this.columnsolutionFoundId.AutoIncrementStep = -1;
                this.columnsolutionFoundId.AllowDBNull = false;
                this.columnsolutionFoundId.ReadOnly = true;
                this.columnsolutionFoundId.Unique = true;
                this.columnpageId.AllowDBNull = false;
                this.columntopageId.AllowDBNull = false;
                this.columnheadingId.AllowDBNull = false;
                this.columnpathIdinPathTable.AllowDBNull = false;
                this.columnparagraphId.AllowDBNull = false;
                this.columnparagraphText.AllowDBNull = false;
                this.columnparagraphText.MaxLength = 2147483647;
                this.columncosine.AllowDBNull = false;
                this.columncosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundRow NewSolution_FoundRow() {
                return ((Solution_FoundRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Solution_FoundRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Solution_FoundRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Solution_FoundRowChanged != null)) {
                    this.Solution_FoundRowChanged(this, new Solution_FoundRowChangeEvent(((Solution_FoundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Solution_FoundRowChanging != null)) {
                    this.Solution_FoundRowChanging(this, new Solution_FoundRowChangeEvent(((Solution_FoundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Solution_FoundRowDeleted != null)) {
                    this.Solution_FoundRowDeleted(this, new Solution_FoundRowChangeEvent(((Solution_FoundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Solution_FoundRowDeleting != null)) {
                    this.Solution_FoundRowDeleting(this, new Solution_FoundRowChangeEvent(((Solution_FoundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSolution_FoundRow(Solution_FoundRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Solution_FoundDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateOfLinksDataTable : global::System.Data.TypedTableBase<TemplateOfLinksRow> {
            
            private global::System.Data.DataColumn columnLinkTemplateId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnTermVectorLengthLinkTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksDataTable() {
                this.TableName = "TemplateOfLinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateOfLinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateOfLinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTemplateIdColumn {
                get {
                    return this.columnLinkTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermVectorLengthLinkTemplateColumn {
                get {
                    return this.columnTermVectorLengthLinkTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksRow this[int index] {
                get {
                    return ((TemplateOfLinksRow)(this.Rows[index]));
                }
            }
            
            public event TemplateOfLinksRowChangeEventHandler TemplateOfLinksRowChanging;
            
            public event TemplateOfLinksRowChangeEventHandler TemplateOfLinksRowChanged;
            
            public event TemplateOfLinksRowChangeEventHandler TemplateOfLinksRowDeleting;
            
            public event TemplateOfLinksRowChangeEventHandler TemplateOfLinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateOfLinksRow(TemplateOfLinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksRow AddTemplateOfLinksRow(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate) {
                TemplateOfLinksRow rowTemplateOfLinksRow = ((TemplateOfLinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        TermVectorLengthLinkTemplate};
                rowTemplateOfLinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplateOfLinksRow);
                return rowTemplateOfLinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksRow FindByLinkTemplateId(int LinkTemplateId) {
                return ((TemplateOfLinksRow)(this.Rows.Find(new object[] {
                            LinkTemplateId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplateOfLinksDataTable cln = ((TemplateOfLinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplateOfLinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkTemplateId = base.Columns["LinkTemplateId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnTermVectorLengthLinkTemplate = base.Columns["TermVectorLengthLinkTemplate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkTemplateId = new global::System.Data.DataColumn("LinkTemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTemplateId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnTermVectorLengthLinkTemplate = new global::System.Data.DataColumn("TermVectorLengthLinkTemplate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermVectorLengthLinkTemplate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkTemplateId}, true));
                this.columnLinkTemplateId.AutoIncrement = true;
                this.columnLinkTemplateId.AutoIncrementSeed = -1;
                this.columnLinkTemplateId.AutoIncrementStep = -1;
                this.columnLinkTemplateId.AllowDBNull = false;
                this.columnLinkTemplateId.ReadOnly = true;
                this.columnLinkTemplateId.Unique = true;
                this.columnLinkAnchorText.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnTermVectorLengthLinkTemplate.AllowDBNull = false;
                this.columnTermVectorLengthLinkTemplate.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksRow NewTemplateOfLinksRow() {
                return ((TemplateOfLinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplateOfLinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplateOfLinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateOfLinksRowChanged != null)) {
                    this.TemplateOfLinksRowChanged(this, new TemplateOfLinksRowChangeEvent(((TemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateOfLinksRowChanging != null)) {
                    this.TemplateOfLinksRowChanging(this, new TemplateOfLinksRowChangeEvent(((TemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateOfLinksRowDeleted != null)) {
                    this.TemplateOfLinksRowDeleted(this, new TemplateOfLinksRowChangeEvent(((TemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateOfLinksRowDeleting != null)) {
                    this.TemplateOfLinksRowDeleting(this, new TemplateOfLinksRowChangeEvent(((TemplateOfLinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateOfLinksRow(TemplateOfLinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateOfLinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateOfLinks_CosineDataTable : global::System.Data.TypedTableBase<TemplateOfLinks_CosineRow> {
            
            private global::System.Data.DataColumn columnLinkTemplateId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnCosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineDataTable() {
                this.TableName = "TemplateOfLinks_Cosine";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateOfLinks_CosineDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateOfLinks_CosineDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTemplateIdColumn {
                get {
                    return this.columnLinkTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CosineColumn {
                get {
                    return this.columnCosine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineRow this[int index] {
                get {
                    return ((TemplateOfLinks_CosineRow)(this.Rows[index]));
                }
            }
            
            public event TemplateOfLinks_CosineRowChangeEventHandler TemplateOfLinks_CosineRowChanging;
            
            public event TemplateOfLinks_CosineRowChangeEventHandler TemplateOfLinks_CosineRowChanged;
            
            public event TemplateOfLinks_CosineRowChangeEventHandler TemplateOfLinks_CosineRowDeleting;
            
            public event TemplateOfLinks_CosineRowChangeEventHandler TemplateOfLinks_CosineRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateOfLinks_CosineRow(TemplateOfLinks_CosineRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineRow AddTemplateOfLinks_CosineRow(string LinkAnchorText, string LinkUrl, int ToPageId, string Cosine) {
                TemplateOfLinks_CosineRow rowTemplateOfLinks_CosineRow = ((TemplateOfLinks_CosineRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        Cosine};
                rowTemplateOfLinks_CosineRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplateOfLinks_CosineRow);
                return rowTemplateOfLinks_CosineRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineRow FindByLinkTemplateId(int LinkTemplateId) {
                return ((TemplateOfLinks_CosineRow)(this.Rows.Find(new object[] {
                            LinkTemplateId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplateOfLinks_CosineDataTable cln = ((TemplateOfLinks_CosineDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplateOfLinks_CosineDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkTemplateId = base.Columns["LinkTemplateId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnCosine = base.Columns["Cosine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkTemplateId = new global::System.Data.DataColumn("LinkTemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTemplateId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnCosine = new global::System.Data.DataColumn("Cosine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCosine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkTemplateId}, true));
                this.columnLinkTemplateId.AutoIncrement = true;
                this.columnLinkTemplateId.AutoIncrementSeed = -1;
                this.columnLinkTemplateId.AutoIncrementStep = -1;
                this.columnLinkTemplateId.AllowDBNull = false;
                this.columnLinkTemplateId.ReadOnly = true;
                this.columnLinkTemplateId.Unique = true;
                this.columnLinkAnchorText.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnCosine.AllowDBNull = false;
                this.columnCosine.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineRow NewTemplateOfLinks_CosineRow() {
                return ((TemplateOfLinks_CosineRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplateOfLinks_CosineRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplateOfLinks_CosineRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateOfLinks_CosineRowChanged != null)) {
                    this.TemplateOfLinks_CosineRowChanged(this, new TemplateOfLinks_CosineRowChangeEvent(((TemplateOfLinks_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateOfLinks_CosineRowChanging != null)) {
                    this.TemplateOfLinks_CosineRowChanging(this, new TemplateOfLinks_CosineRowChangeEvent(((TemplateOfLinks_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateOfLinks_CosineRowDeleted != null)) {
                    this.TemplateOfLinks_CosineRowDeleted(this, new TemplateOfLinks_CosineRowChangeEvent(((TemplateOfLinks_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateOfLinks_CosineRowDeleting != null)) {
                    this.TemplateOfLinks_CosineRowDeleting(this, new TemplateOfLinks_CosineRowChangeEvent(((TemplateOfLinks_CosineRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateOfLinks_CosineRow(TemplateOfLinks_CosineRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateOfLinks_CosineDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateOfLinksTUBSDataTable : global::System.Data.TypedTableBase<TemplateOfLinksTUBSRow> {
            
            private global::System.Data.DataColumn columnLinkTemplateId;
            
            private global::System.Data.DataColumn columnLinkAnchorText;
            
            private global::System.Data.DataColumn columnLinkUrl;
            
            private global::System.Data.DataColumn columnToPageId;
            
            private global::System.Data.DataColumn columnTermVectorLengthLinkTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSDataTable() {
                this.TableName = "TemplateOfLinksTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateOfLinksTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateOfLinksTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkTemplateIdColumn {
                get {
                    return this.columnLinkTemplateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkAnchorTextColumn {
                get {
                    return this.columnLinkAnchorText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinkUrlColumn {
                get {
                    return this.columnLinkUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToPageIdColumn {
                get {
                    return this.columnToPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TermVectorLengthLinkTemplateColumn {
                get {
                    return this.columnTermVectorLengthLinkTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSRow this[int index] {
                get {
                    return ((TemplateOfLinksTUBSRow)(this.Rows[index]));
                }
            }
            
            public event TemplateOfLinksTUBSRowChangeEventHandler TemplateOfLinksTUBSRowChanging;
            
            public event TemplateOfLinksTUBSRowChangeEventHandler TemplateOfLinksTUBSRowChanged;
            
            public event TemplateOfLinksTUBSRowChangeEventHandler TemplateOfLinksTUBSRowDeleting;
            
            public event TemplateOfLinksTUBSRowChangeEventHandler TemplateOfLinksTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateOfLinksTUBSRow(TemplateOfLinksTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSRow AddTemplateOfLinksTUBSRow(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate) {
                TemplateOfLinksTUBSRow rowTemplateOfLinksTUBSRow = ((TemplateOfLinksTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LinkAnchorText,
                        LinkUrl,
                        ToPageId,
                        TermVectorLengthLinkTemplate};
                rowTemplateOfLinksTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplateOfLinksTUBSRow);
                return rowTemplateOfLinksTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSRow FindByLinkTemplateId(int LinkTemplateId) {
                return ((TemplateOfLinksTUBSRow)(this.Rows.Find(new object[] {
                            LinkTemplateId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplateOfLinksTUBSDataTable cln = ((TemplateOfLinksTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplateOfLinksTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLinkTemplateId = base.Columns["LinkTemplateId"];
                this.columnLinkAnchorText = base.Columns["LinkAnchorText"];
                this.columnLinkUrl = base.Columns["LinkUrl"];
                this.columnToPageId = base.Columns["ToPageId"];
                this.columnTermVectorLengthLinkTemplate = base.Columns["TermVectorLengthLinkTemplate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLinkTemplateId = new global::System.Data.DataColumn("LinkTemplateId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkTemplateId);
                this.columnLinkAnchorText = new global::System.Data.DataColumn("LinkAnchorText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkAnchorText);
                this.columnLinkUrl = new global::System.Data.DataColumn("LinkUrl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkUrl);
                this.columnToPageId = new global::System.Data.DataColumn("ToPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToPageId);
                this.columnTermVectorLengthLinkTemplate = new global::System.Data.DataColumn("TermVectorLengthLinkTemplate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTermVectorLengthLinkTemplate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLinkTemplateId}, true));
                this.columnLinkTemplateId.AutoIncrement = true;
                this.columnLinkTemplateId.AutoIncrementSeed = -1;
                this.columnLinkTemplateId.AutoIncrementStep = -1;
                this.columnLinkTemplateId.AllowDBNull = false;
                this.columnLinkTemplateId.ReadOnly = true;
                this.columnLinkTemplateId.Unique = true;
                this.columnLinkAnchorText.AllowDBNull = false;
                this.columnLinkAnchorText.MaxLength = 2147483647;
                this.columnLinkUrl.AllowDBNull = false;
                this.columnLinkUrl.MaxLength = 2147483647;
                this.columnToPageId.AllowDBNull = false;
                this.columnTermVectorLengthLinkTemplate.AllowDBNull = false;
                this.columnTermVectorLengthLinkTemplate.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSRow NewTemplateOfLinksTUBSRow() {
                return ((TemplateOfLinksTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplateOfLinksTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplateOfLinksTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateOfLinksTUBSRowChanged != null)) {
                    this.TemplateOfLinksTUBSRowChanged(this, new TemplateOfLinksTUBSRowChangeEvent(((TemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateOfLinksTUBSRowChanging != null)) {
                    this.TemplateOfLinksTUBSRowChanging(this, new TemplateOfLinksTUBSRowChangeEvent(((TemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateOfLinksTUBSRowDeleted != null)) {
                    this.TemplateOfLinksTUBSRowDeleted(this, new TemplateOfLinksTUBSRowChangeEvent(((TemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateOfLinksTUBSRowDeleting != null)) {
                    this.TemplateOfLinksTUBSRowDeleting(this, new TemplateOfLinksTUBSRowChangeEvent(((TemplateOfLinksTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateOfLinksTUBSRow(TemplateOfLinksTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateOfLinksTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WebPageDataTable : global::System.Data.TypedTableBase<WebPageRow> {
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnWebSiteId;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnPageTemplate;
            
            private global::System.Data.DataColumn columnUrl;
            
            private global::System.Data.DataColumn columnVisited;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnBestRouteToTop;
            
            private global::System.Data.DataColumn columnCountToTop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageDataTable() {
                this.TableName = "WebPage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WebPageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WebPageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebSiteIdColumn {
                get {
                    return this.columnWebSiteId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PageTemplateColumn {
                get {
                    return this.columnPageTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UrlColumn {
                get {
                    return this.columnUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestRouteToTopColumn {
                get {
                    return this.columnBestRouteToTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountToTopColumn {
                get {
                    return this.columnCountToTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow this[int index] {
                get {
                    return ((WebPageRow)(this.Rows[index]));
                }
            }
            
            public event WebPageRowChangeEventHandler WebPageRowChanging;
            
            public event WebPageRowChangeEventHandler WebPageRowChanged;
            
            public event WebPageRowChangeEventHandler WebPageRowDeleting;
            
            public event WebPageRowChangeEventHandler WebPageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWebPageRow(WebPageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow AddWebPageRow(int WebSiteId, string Title, int PageTemplate, string Url, bool Visited, string Source, int BestRouteToTop, int CountToTop) {
                WebPageRow rowWebPageRow = ((WebPageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebSiteId,
                        Title,
                        PageTemplate,
                        Url,
                        Visited,
                        Source,
                        BestRouteToTop,
                        CountToTop};
                rowWebPageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWebPageRow);
                return rowWebPageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow FindByWebPageId(int WebPageId) {
                return ((WebPageRow)(this.Rows.Find(new object[] {
                            WebPageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WebPageDataTable cln = ((WebPageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WebPageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnWebSiteId = base.Columns["WebSiteId"];
                this.columnTitle = base.Columns["Title"];
                this.columnPageTemplate = base.Columns["PageTemplate"];
                this.columnUrl = base.Columns["Url"];
                this.columnVisited = base.Columns["Visited"];
                this.columnSource = base.Columns["Source"];
                this.columnBestRouteToTop = base.Columns["BestRouteToTop"];
                this.columnCountToTop = base.Columns["CountToTop"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnWebSiteId = new global::System.Data.DataColumn("WebSiteId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebSiteId);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnPageTemplate = new global::System.Data.DataColumn("PageTemplate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageTemplate);
                this.columnUrl = new global::System.Data.DataColumn("Url", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUrl);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnBestRouteToTop = new global::System.Data.DataColumn("BestRouteToTop", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestRouteToTop);
                this.columnCountToTop = new global::System.Data.DataColumn("CountToTop", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountToTop);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWebPageId}, true));
                this.columnWebPageId.AutoIncrement = true;
                this.columnWebPageId.AutoIncrementSeed = -1;
                this.columnWebPageId.AutoIncrementStep = -1;
                this.columnWebPageId.AllowDBNull = false;
                this.columnWebPageId.ReadOnly = true;
                this.columnWebPageId.Unique = true;
                this.columnWebSiteId.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 2147483647;
                this.columnUrl.AllowDBNull = false;
                this.columnUrl.MaxLength = 2147483647;
                this.columnVisited.AllowDBNull = false;
                this.columnSource.AllowDBNull = false;
                this.columnSource.MaxLength = 2147483647;
                this.columnBestRouteToTop.AllowDBNull = false;
                this.columnCountToTop.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow NewWebPageRow() {
                return ((WebPageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WebPageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WebPageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WebPageRowChanged != null)) {
                    this.WebPageRowChanged(this, new WebPageRowChangeEvent(((WebPageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WebPageRowChanging != null)) {
                    this.WebPageRowChanging(this, new WebPageRowChangeEvent(((WebPageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WebPageRowDeleted != null)) {
                    this.WebPageRowDeleted(this, new WebPageRowChangeEvent(((WebPageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WebPageRowDeleting != null)) {
                    this.WebPageRowDeleting(this, new WebPageRowChangeEvent(((WebPageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWebPageRow(WebPageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WebPageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WebPageTUBSDataTable : global::System.Data.TypedTableBase<WebPageTUBSRow> {
            
            private global::System.Data.DataColumn columnWebPageId;
            
            private global::System.Data.DataColumn columnWebSiteId;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnPageTemplate;
            
            private global::System.Data.DataColumn columnUrl;
            
            private global::System.Data.DataColumn columnVisited;
            
            private global::System.Data.DataColumn columnLwhORLwoh;
            
            private global::System.Data.DataColumn columnBestRouteToTop;
            
            private global::System.Data.DataColumn columnCountToTop;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSDataTable() {
                this.TableName = "WebPageTUBS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WebPageTUBSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WebPageTUBSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebPageIdColumn {
                get {
                    return this.columnWebPageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebSiteIdColumn {
                get {
                    return this.columnWebSiteId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PageTemplateColumn {
                get {
                    return this.columnPageTemplate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UrlColumn {
                get {
                    return this.columnUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitedColumn {
                get {
                    return this.columnVisited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LwhORLwohColumn {
                get {
                    return this.columnLwhORLwoh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BestRouteToTopColumn {
                get {
                    return this.columnBestRouteToTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountToTopColumn {
                get {
                    return this.columnCountToTop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSRow this[int index] {
                get {
                    return ((WebPageTUBSRow)(this.Rows[index]));
                }
            }
            
            public event WebPageTUBSRowChangeEventHandler WebPageTUBSRowChanging;
            
            public event WebPageTUBSRowChangeEventHandler WebPageTUBSRowChanged;
            
            public event WebPageTUBSRowChangeEventHandler WebPageTUBSRowDeleting;
            
            public event WebPageTUBSRowChangeEventHandler WebPageTUBSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWebPageTUBSRow(WebPageTUBSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSRow AddWebPageTUBSRow(int WebSiteId, string Title, int PageTemplate, string Url, bool Visited, string LwhORLwoh, int BestRouteToTop, int CountToTop) {
                WebPageTUBSRow rowWebPageTUBSRow = ((WebPageTUBSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebSiteId,
                        Title,
                        PageTemplate,
                        Url,
                        Visited,
                        LwhORLwoh,
                        BestRouteToTop,
                        CountToTop};
                rowWebPageTUBSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWebPageTUBSRow);
                return rowWebPageTUBSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSRow FindByWebPageId(int WebPageId) {
                return ((WebPageTUBSRow)(this.Rows.Find(new object[] {
                            WebPageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WebPageTUBSDataTable cln = ((WebPageTUBSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WebPageTUBSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWebPageId = base.Columns["WebPageId"];
                this.columnWebSiteId = base.Columns["WebSiteId"];
                this.columnTitle = base.Columns["Title"];
                this.columnPageTemplate = base.Columns["PageTemplate"];
                this.columnUrl = base.Columns["Url"];
                this.columnVisited = base.Columns["Visited"];
                this.columnLwhORLwoh = base.Columns["LwhORLwoh"];
                this.columnBestRouteToTop = base.Columns["BestRouteToTop"];
                this.columnCountToTop = base.Columns["CountToTop"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWebPageId = new global::System.Data.DataColumn("WebPageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebPageId);
                this.columnWebSiteId = new global::System.Data.DataColumn("WebSiteId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebSiteId);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnPageTemplate = new global::System.Data.DataColumn("PageTemplate", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageTemplate);
                this.columnUrl = new global::System.Data.DataColumn("Url", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUrl);
                this.columnVisited = new global::System.Data.DataColumn("Visited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisited);
                this.columnLwhORLwoh = new global::System.Data.DataColumn("LwhORLwoh", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLwhORLwoh);
                this.columnBestRouteToTop = new global::System.Data.DataColumn("BestRouteToTop", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBestRouteToTop);
                this.columnCountToTop = new global::System.Data.DataColumn("CountToTop", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountToTop);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWebPageId}, true));
                this.columnWebPageId.AutoIncrement = true;
                this.columnWebPageId.AutoIncrementSeed = -1;
                this.columnWebPageId.AutoIncrementStep = -1;
                this.columnWebPageId.AllowDBNull = false;
                this.columnWebPageId.ReadOnly = true;
                this.columnWebPageId.Unique = true;
                this.columnWebSiteId.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 2147483647;
                this.columnUrl.AllowDBNull = false;
                this.columnUrl.MaxLength = 2147483647;
                this.columnVisited.AllowDBNull = false;
                this.columnLwhORLwoh.AllowDBNull = false;
                this.columnLwhORLwoh.MaxLength = 2147483647;
                this.columnBestRouteToTop.AllowDBNull = false;
                this.columnCountToTop.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSRow NewWebPageTUBSRow() {
                return ((WebPageTUBSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WebPageTUBSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WebPageTUBSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WebPageTUBSRowChanged != null)) {
                    this.WebPageTUBSRowChanged(this, new WebPageTUBSRowChangeEvent(((WebPageTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WebPageTUBSRowChanging != null)) {
                    this.WebPageTUBSRowChanging(this, new WebPageTUBSRowChangeEvent(((WebPageTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WebPageTUBSRowDeleted != null)) {
                    this.WebPageTUBSRowDeleted(this, new WebPageTUBSRowChangeEvent(((WebPageTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WebPageTUBSRowDeleting != null)) {
                    this.WebPageTUBSRowDeleting(this, new WebPageTUBSRowChangeEvent(((WebPageTUBSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWebPageTUBSRow(WebPageTUBSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WebPageTUBSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WebSiteDataTable : global::System.Data.TypedTableBase<WebSiteRow> {
            
            private global::System.Data.DataColumn columnWebSiteId;
            
            private global::System.Data.DataColumn columnWebSiteName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteDataTable() {
                this.TableName = "WebSite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WebSiteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WebSiteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebSiteIdColumn {
                get {
                    return this.columnWebSiteId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebSiteNameColumn {
                get {
                    return this.columnWebSiteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteRow this[int index] {
                get {
                    return ((WebSiteRow)(this.Rows[index]));
                }
            }
            
            public event WebSiteRowChangeEventHandler WebSiteRowChanging;
            
            public event WebSiteRowChangeEventHandler WebSiteRowChanged;
            
            public event WebSiteRowChangeEventHandler WebSiteRowDeleting;
            
            public event WebSiteRowChangeEventHandler WebSiteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWebSiteRow(WebSiteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteRow AddWebSiteRow(string WebSiteName) {
                WebSiteRow rowWebSiteRow = ((WebSiteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        WebSiteName};
                rowWebSiteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWebSiteRow);
                return rowWebSiteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteRow FindByWebSiteId(int WebSiteId) {
                return ((WebSiteRow)(this.Rows.Find(new object[] {
                            WebSiteId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WebSiteDataTable cln = ((WebSiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WebSiteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWebSiteId = base.Columns["WebSiteId"];
                this.columnWebSiteName = base.Columns["WebSiteName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWebSiteId = new global::System.Data.DataColumn("WebSiteId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebSiteId);
                this.columnWebSiteName = new global::System.Data.DataColumn("WebSiteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebSiteName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWebSiteId}, true));
                this.columnWebSiteId.AutoIncrement = true;
                this.columnWebSiteId.AutoIncrementSeed = -1;
                this.columnWebSiteId.AutoIncrementStep = -1;
                this.columnWebSiteId.AllowDBNull = false;
                this.columnWebSiteId.ReadOnly = true;
                this.columnWebSiteId.Unique = true;
                this.columnWebSiteName.AllowDBNull = false;
                this.columnWebSiteName.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteRow NewWebSiteRow() {
                return ((WebSiteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WebSiteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WebSiteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WebSiteRowChanged != null)) {
                    this.WebSiteRowChanged(this, new WebSiteRowChangeEvent(((WebSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WebSiteRowChanging != null)) {
                    this.WebSiteRowChanging(this, new WebSiteRowChangeEvent(((WebSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WebSiteRowDeleted != null)) {
                    this.WebSiteRowDeleted(this, new WebSiteRowChangeEvent(((WebSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WebSiteRowDeleting != null)) {
                    this.WebSiteRowDeleting(this, new WebSiteRowChangeEvent(((WebSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWebSiteRow(WebSiteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                InfoArchDataSet ds = new InfoArchDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WebSiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnImageRow : global::System.Data.DataRow {
            
            private AnImageDataTable tableAnImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnImageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnImage = ((AnImageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImgId {
                get {
                    return ((int)(this[this.tableAnImage.ImgIdColumn]));
                }
                set {
                    this[this.tableAnImage.ImgIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableAnImage.WebPageIdColumn]));
                }
                set {
                    this[this.tableAnImage.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableAnImage.HeadingIdColumn]));
                }
                set {
                    this[this.tableAnImage.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageAltText {
                get {
                    return ((string)(this[this.tableAnImage.ImageAltTextColumn]));
                }
                set {
                    this[this.tableAnImage.ImageAltTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageUrl {
                get {
                    return ((string)(this[this.tableAnImage.ImageUrlColumn]));
                }
                set {
                    this[this.tableAnImage.ImageUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagePicture {
                get {
                    return ((string)(this[this.tableAnImage.ImagePictureColumn]));
                }
                set {
                    this[this.tableAnImage.ImagePictureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosienValueImageHeading {
                get {
                    return ((string)(this[this.tableAnImage.CosienValueImageHeadingColumn]));
                }
                set {
                    this[this.tableAnImage.CosienValueImageHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermVectorLength {
                get {
                    return ((string)(this[this.tableAnImage.TermVectorLengthColumn]));
                }
                set {
                    this[this.tableAnImage.TermVectorLengthColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AnImageWithoutHeadingRow : global::System.Data.DataRow {
            
            private AnImageWithoutHeadingDataTable tableAnImageWithoutHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AnImageWithoutHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnImageWithoutHeading = ((AnImageWithoutHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageWithoutHeadingId {
                get {
                    return ((int)(this[this.tableAnImageWithoutHeading.ImageWithoutHeadingIdColumn]));
                }
                set {
                    this[this.tableAnImageWithoutHeading.ImageWithoutHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableAnImageWithoutHeading.WebPageIdColumn]));
                }
                set {
                    this[this.tableAnImageWithoutHeading.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageUrl {
                get {
                    return ((string)(this[this.tableAnImageWithoutHeading.ImageUrlColumn]));
                }
                set {
                    this[this.tableAnImageWithoutHeading.ImageUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLegnth {
                get {
                    return ((string)(this[this.tableAnImageWithoutHeading.VectorTermLegnthColumn]));
                }
                set {
                    this[this.tableAnImageWithoutHeading.VectorTermLegnthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageAltText {
                get {
                    return ((string)(this[this.tableAnImageWithoutHeading.ImageAltTextColumn]));
                }
                set {
                    this[this.tableAnImageWithoutHeading.ImageAltTextColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CosineImageImageUnderSameHeadingRow : global::System.Data.DataRow {
            
            private CosineImageImageUnderSameHeadingDataTable tableCosineImageImageUnderSameHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineImageImageUnderSameHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCosineImageImageUnderSameHeading = ((CosineImageImageUnderSameHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CosineImageImageUnderHeadingId {
                get {
                    return ((int)(this[this.tableCosineImageImageUnderSameHeading.CosineImageImageUnderHeadingIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageUnderSameHeading.CosineImageImageUnderHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableCosineImageImageUnderSameHeading.HeadingIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageUnderSameHeading.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageXId {
                get {
                    return ((int)(this[this.tableCosineImageImageUnderSameHeading.ImageXIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageUnderSameHeading.ImageXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageYId {
                get {
                    return ((int)(this[this.tableCosineImageImageUnderSameHeading.ImageYIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageUnderSameHeading.ImageYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueImageImageWithHeading {
                get {
                    return ((string)(this[this.tableCosineImageImageUnderSameHeading.CosineValueImageImageWithHeadingColumn]));
                }
                set {
                    this[this.tableCosineImageImageUnderSameHeading.CosineValueImageImageWithHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebpageId {
                get {
                    return ((int)(this[this.tableCosineImageImageUnderSameHeading.WebpageIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageUnderSameHeading.WebpageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CosineImageImageWithoutHeadingRow : global::System.Data.DataRow {
            
            private CosineImageImageWithoutHeadingDataTable tableCosineImageImageWithoutHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineImageImageWithoutHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCosineImageImageWithoutHeading = ((CosineImageImageWithoutHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CosineImageImageWithoutHeadingId {
                get {
                    return ((int)(this[this.tableCosineImageImageWithoutHeading.CosineImageImageWithoutHeadingIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageWithoutHeading.CosineImageImageWithoutHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageXId {
                get {
                    return ((int)(this[this.tableCosineImageImageWithoutHeading.ImageXIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageWithoutHeading.ImageXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImageYId {
                get {
                    return ((int)(this[this.tableCosineImageImageWithoutHeading.ImageYIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageWithoutHeading.ImageYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueImageImageWithoutHeading {
                get {
                    return ((string)(this[this.tableCosineImageImageWithoutHeading.CosineValueImageImageWithoutHeadingColumn]));
                }
                set {
                    this[this.tableCosineImageImageWithoutHeading.CosineValueImageImageWithoutHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableCosineImageImageWithoutHeading.WebPageIdColumn]));
                }
                set {
                    this[this.tableCosineImageImageWithoutHeading.WebPageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CosineLinkLinkWithHeadingRow : global::System.Data.DataRow {
            
            private CosineLinkLinkWithHeadingDataTable tableCosineLinkLinkWithHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCosineLinkLinkWithHeading = ((CosineLinkLinkWithHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CosineLinkLinkWithHeadingId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeading.CosineLinkLinkWithHeadingIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeading.CosineLinkLinkWithHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeading.HeadingIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeading.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkXId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeading.LinkXIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeading.LinkXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkYId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeading.LinkYIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeading.LinkYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkLinkWithHeading {
                get {
                    return ((string)(this[this.tableCosineLinkLinkWithHeading.CosineValueLinkLinkWithHeadingColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeading.CosineValueLinkLinkWithHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebpageId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeading.WebpageIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeading.WebpageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CosineLinkLinkWithHeadingTUBSRow : global::System.Data.DataRow {
            
            private CosineLinkLinkWithHeadingTUBSDataTable tableCosineLinkLinkWithHeadingTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithHeadingTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCosineLinkLinkWithHeadingTUBS = ((CosineLinkLinkWithHeadingTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CosineLinkLinkWithHeadingId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeadingTUBS.CosineLinkLinkWithHeadingIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.CosineLinkLinkWithHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeadingTUBS.HeadingIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkXId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeadingTUBS.LinkXIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.LinkXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkYId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeadingTUBS.LinkYIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.LinkYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkLinkWithHeading {
                get {
                    return ((string)(this[this.tableCosineLinkLinkWithHeadingTUBS.CosineValueLinkLinkWithHeadingColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.CosineValueLinkLinkWithHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebpageId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithHeadingTUBS.WebpageIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.WebpageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkXText {
                get {
                    return ((string)(this[this.tableCosineLinkLinkWithHeadingTUBS.LinkXTextColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.LinkXTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkYText {
                get {
                    return ((string)(this[this.tableCosineLinkLinkWithHeadingTUBS.LinkYTextColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithHeadingTUBS.LinkYTextColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CosineLinkLinkWithoutHeadingRow : global::System.Data.DataRow {
            
            private CosineLinkLinkWithoutHeadingDataTable tableCosineLinkLinkWithoutHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithoutHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCosineLinkLinkWithoutHeading = ((CosineLinkLinkWithoutHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CosineLinkLinkWithoutHeadingId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeading.CosineLinkLinkWithoutHeadingIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeading.CosineLinkLinkWithoutHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkXId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeading.LinkXIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeading.LinkXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkYId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeading.LinkYIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeading.LinkYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkLinkWithoutHeading {
                get {
                    return ((string)(this[this.tableCosineLinkLinkWithoutHeading.CosineValueLinkLinkWithoutHeadingColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeading.CosineValueLinkLinkWithoutHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeading.WebPageIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeading.WebPageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CosineLinkLinkWithoutHeadingTUBSRow : global::System.Data.DataRow {
            
            private CosineLinkLinkWithoutHeadingTUBSDataTable tableCosineLinkLinkWithoutHeadingTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CosineLinkLinkWithoutHeadingTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCosineLinkLinkWithoutHeadingTUBS = ((CosineLinkLinkWithoutHeadingTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CosineLinkLinkWithoutHeadingId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeadingTUBS.CosineLinkLinkWithoutHeadingIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeadingTUBS.CosineLinkLinkWithoutHeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkXId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeadingTUBS.LinkXIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeadingTUBS.LinkXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkYId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeadingTUBS.LinkYIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeadingTUBS.LinkYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkLinkWithoutHeading {
                get {
                    return ((string)(this[this.tableCosineLinkLinkWithoutHeadingTUBS.CosineValueLinkLinkWithoutHeadingColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeadingTUBS.CosineValueLinkLinkWithoutHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableCosineLinkLinkWithoutHeadingTUBS.WebPageIdColumn]));
                }
                set {
                    this[this.tableCosineLinkLinkWithoutHeadingTUBS.WebPageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GoalRow : global::System.Data.DataRow {
            
            private GoalDataTable tableGoal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGoal = ((GoalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    return ((string)(this[this.tableGoal.textColumn]));
                }
                set {
                    this[this.tableGoal.textColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadingRow : global::System.Data.DataRow {
            
            private HeadingDataTable tableHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeading = ((HeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableHeading.HeadingIdColumn]));
                }
                set {
                    this[this.tableHeading.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableHeading.WebPageIdColumn]));
                }
                set {
                    this[this.tableHeading.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingText {
                get {
                    return ((string)(this[this.tableHeading.HeadingTextColumn]));
                }
                set {
                    this[this.tableHeading.HeadingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    return ((string)(this[this.tableHeading.VectorTermLengthColumn]));
                }
                set {
                    this[this.tableHeading.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow[] GetLinkWithHeadingRows() {
                if ((this.Table.ChildRelations["FK_LinkWithHeading_Heading"] == null)) {
                    return new LinkWithHeadingRow[0];
                }
                else {
                    return ((LinkWithHeadingRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LinkWithHeading_Heading"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Heading_CosineRow : global::System.Data.DataRow {
            
            private Heading_CosineDataTable tableHeading_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Heading_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeading_Cosine = ((Heading_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingCosineID {
                get {
                    return ((int)(this[this.tableHeading_Cosine.headingCosineIDColumn]));
                }
                set {
                    this[this.tableHeading_Cosine.headingCosineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableHeading_Cosine.pageIdColumn]));
                }
                set {
                    this[this.tableHeading_Cosine.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingId {
                get {
                    return ((int)(this[this.tableHeading_Cosine.headingIdColumn]));
                }
                set {
                    this[this.tableHeading_Cosine.headingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string headingText {
                get {
                    return ((string)(this[this.tableHeading_Cosine.headingTextColumn]));
                }
                set {
                    this[this.tableHeading_Cosine.headingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableHeading_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableHeading_Cosine.CosineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SelectedRow {
                get {
                    return ((string)(this[this.tableHeading_Cosine.SelectedRowColumn]));
                }
                set {
                    this[this.tableHeading_Cosine.SelectedRowColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadingModifiedRow : global::System.Data.DataRow {
            
            private HeadingModifiedDataTable tableHeadingModified;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingModifiedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeadingModified = ((HeadingModifiedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableHeadingModified.HeadingIdColumn]));
                }
                set {
                    this[this.tableHeadingModified.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableHeadingModified.WebPageIdColumn]));
                }
                set {
                    this[this.tableHeadingModified.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingText {
                get {
                    return ((string)(this[this.tableHeadingModified.HeadingTextColumn]));
                }
                set {
                    this[this.tableHeadingModified.HeadingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    return ((string)(this[this.tableHeadingModified.VectorTermLengthColumn]));
                }
                set {
                    this[this.tableHeadingModified.VectorTermLengthColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadingPathAdequacy_CosineRow : global::System.Data.DataRow {
            
            private HeadingPathAdequacy_CosineDataTable tableHeadingPathAdequacy_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingPathAdequacy_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeadingPathAdequacy_Cosine = ((HeadingPathAdequacy_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingPathAdequacyCosineID {
                get {
                    return ((int)(this[this.tableHeadingPathAdequacy_Cosine.headingPathAdequacyCosineIDColumn]));
                }
                set {
                    this[this.tableHeadingPathAdequacy_Cosine.headingPathAdequacyCosineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pAString {
                get {
                    return ((string)(this[this.tableHeadingPathAdequacy_Cosine.pAStringColumn]));
                }
                set {
                    this[this.tableHeadingPathAdequacy_Cosine.pAStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableHeadingPathAdequacy_Cosine.pageIdColumn]));
                }
                set {
                    this[this.tableHeadingPathAdequacy_Cosine.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingId {
                get {
                    return ((int)(this[this.tableHeadingPathAdequacy_Cosine.headingIdColumn]));
                }
                set {
                    this[this.tableHeadingPathAdequacy_Cosine.headingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableHeadingPathAdequacy_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableHeadingPathAdequacy_Cosine.CosineColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadingTUBSTVLRow : global::System.Data.DataRow {
            
            private HeadingTUBSTVLDataTable tableHeadingTUBSTVL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingTUBSTVLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeadingTUBSTVL = ((HeadingTUBSTVLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableHeadingTUBSTVL.HeadingIdColumn]));
                }
                set {
                    this[this.tableHeadingTUBSTVL.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableHeadingTUBSTVL.WebPageIdColumn]));
                }
                set {
                    this[this.tableHeadingTUBSTVL.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingText {
                get {
                    return ((string)(this[this.tableHeadingTUBSTVL.HeadingTextColumn]));
                }
                set {
                    this[this.tableHeadingTUBSTVL.HeadingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    return ((string)(this[this.tableHeadingTUBSTVL.VectorTermLengthColumn]));
                }
                set {
                    this[this.tableHeadingTUBSTVL.VectorTermLengthColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadingvsHeadinginSamePageCosinesRow : global::System.Data.DataRow {
            
            private HeadingvsHeadinginSamePageCosinesDataTable tableHeadingvsHeadinginSamePageCosines;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingvsHeadinginSamePageCosinesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeadingvsHeadinginSamePageCosines = ((HeadingvsHeadinginSamePageCosinesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingvsheadingId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosines.headingvsheadingIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.headingvsheadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebpageId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosines.WebpageIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.WebpageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingXId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosines.HeadingXIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.HeadingXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingYId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosines.HeadingYIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.HeadingYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueHeadingvsHeading {
                get {
                    return ((string)(this[this.tableHeadingvsHeadinginSamePageCosines.CosineValueHeadingvsHeadingColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.CosineValueHeadingvsHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingXLinkText {
                get {
                    return ((string)(this[this.tableHeadingvsHeadinginSamePageCosines.HeadingXLinkTextColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.HeadingXLinkTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingYLInkText {
                get {
                    return ((string)(this[this.tableHeadingvsHeadinginSamePageCosines.HeadingYLInkTextColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosines.HeadingYLInkTextColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeadingvsHeadinginSamePageCosinesTUBSRow : global::System.Data.DataRow {
            
            private HeadingvsHeadinginSamePageCosinesTUBSDataTable tableHeadingvsHeadinginSamePageCosinesTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeadingvsHeadinginSamePageCosinesTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeadingvsHeadinginSamePageCosinesTUBS = ((HeadingvsHeadinginSamePageCosinesTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingvsheadingId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.headingvsheadingIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.headingvsheadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebpageId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.WebpageIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.WebpageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingXId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.HeadingXIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.HeadingXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingYId {
                get {
                    return ((int)(this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.HeadingYIdColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.HeadingYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueHeadingvsHeading {
                get {
                    return ((string)(this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.CosineValueHeadingvsHeadingColumn]));
                }
                set {
                    this[this.tableHeadingvsHeadinginSamePageCosinesTUBS.CosineValueHeadingvsHeadingColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkLinkTemplateOfLinksRow : global::System.Data.DataRow {
            
            private LinkLinkTemplateOfLinksDataTable tableLinkLinkTemplateOfLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkLinkTemplateOfLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkLinkTemplateOfLinks = ((LinkLinkTemplateOfLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkLinkTemplateOfLinksId {
                get {
                    return ((int)(this[this.tableLinkLinkTemplateOfLinks.LinkLinkTemplateOfLinksIdColumn]));
                }
                set {
                    this[this.tableLinkLinkTemplateOfLinks.LinkLinkTemplateOfLinksIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkXId {
                get {
                    return ((int)(this[this.tableLinkLinkTemplateOfLinks.LinkXIdColumn]));
                }
                set {
                    this[this.tableLinkLinkTemplateOfLinks.LinkXIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkYId {
                get {
                    return ((int)(this[this.tableLinkLinkTemplateOfLinks.LinkYIdColumn]));
                }
                set {
                    this[this.tableLinkLinkTemplateOfLinks.LinkYIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineLinkLinkTemplateOfLinks {
                get {
                    return ((string)(this[this.tableLinkLinkTemplateOfLinks.CosineLinkLinkTemplateOfLinksColumn]));
                }
                set {
                    this[this.tableLinkLinkTemplateOfLinks.CosineLinkLinkTemplateOfLinksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkLinkTemplateOfLinks.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkLinkTemplateOfLinks.WebPageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkUnderHeading_CosineRow : global::System.Data.DataRow {
            
            private LinkUnderHeading_CosineDataTable tableLinkUnderHeading_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkUnderHeading_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkUnderHeading_Cosine = ((LinkUnderHeading_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkUnderHeadingCosineID {
                get {
                    return ((int)(this[this.tableLinkUnderHeading_Cosine.linkUnderHeadingCosineIDColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.linkUnderHeadingCosineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableLinkUnderHeading_Cosine.pageIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    try {
                        return ((int)(this[this.tableLinkUnderHeading_Cosine.ToPageIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToPageId\' in table \'LinkUnderHeading_Cosine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingId {
                get {
                    return ((int)(this[this.tableLinkUnderHeading_Cosine.headingIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.headingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string headingText {
                get {
                    return ((string)(this[this.tableLinkUnderHeading_Cosine.headingTextColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.headingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkId {
                get {
                    return ((int)(this[this.tableLinkUnderHeading_Cosine.linkIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.linkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkName {
                get {
                    return ((string)(this[this.tableLinkUnderHeading_Cosine.LinkNameColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.LinkNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableLinkUnderHeading_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableLinkUnderHeading_Cosine.CosineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToPageIdNull() {
                return this.IsNull(this.tableLinkUnderHeading_Cosine.ToPageIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToPageIdNull() {
                this[this.tableLinkUnderHeading_Cosine.ToPageIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkUnderHeadingPathAdequacy_CosineRow : global::System.Data.DataRow {
            
            private LinkUnderHeadingPathAdequacy_CosineDataTable tableLinkUnderHeadingPathAdequacy_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkUnderHeadingPathAdequacy_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkUnderHeadingPathAdequacy_Cosine = ((LinkUnderHeadingPathAdequacy_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkUnderHeadingPathAdequacyCosineID {
                get {
                    return ((int)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.linkUnderHeadingPathAdequacyCosineIDColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.linkUnderHeadingPathAdequacyCosineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.pageIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pAString {
                get {
                    return ((string)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.pAStringColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.pAStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingId {
                get {
                    return ((int)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.headingIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.headingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkId {
                get {
                    return ((int)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.linkIdColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.linkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableLinkUnderHeadingPathAdequacy_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableLinkUnderHeadingPathAdequacy_Cosine.CosineColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithHeadingRow : global::System.Data.DataRow {
            
            private LinkWithHeadingDataTable tableLinkWithHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithHeading = ((LinkWithHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkId {
                get {
                    return ((int)(this[this.tableLinkWithHeading.LinkIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeading.LinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithHeading.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeading.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableLinkWithHeading.HeadingIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeading.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeading.LinkAnchorTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkAnchorText\' in table \'LinkWithHeading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeading.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableLinkWithHeading.LinkUrlColumn]));
                }
                set {
                    this[this.tableLinkWithHeading.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkWithHeading.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeading.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeading.VectorTermLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VectorTermLength\' in table \'LinkWithHeading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeading.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkHeading {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeading.CosineValueLinkHeadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CosineValueLinkHeading\' in table \'LinkWithHeading\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeading.CosineValueLinkHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRow HeadingRow {
                get {
                    return ((HeadingRow)(this.GetParentRow(this.Table.ParentRelations["FK_LinkWithHeading_Heading"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LinkWithHeading_Heading"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow WebPageRow {
                get {
                    return ((WebPageRow)(this.GetParentRow(this.Table.ParentRelations["FK_LinkWithHeading_WebPage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LinkWithHeading_WebPage"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkAnchorTextNull() {
                return this.IsNull(this.tableLinkWithHeading.LinkAnchorTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkAnchorTextNull() {
                this[this.tableLinkWithHeading.LinkAnchorTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVectorTermLengthNull() {
                return this.IsNull(this.tableLinkWithHeading.VectorTermLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVectorTermLengthNull() {
                this[this.tableLinkWithHeading.VectorTermLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCosineValueLinkHeadingNull() {
                return this.IsNull(this.tableLinkWithHeading.CosineValueLinkHeadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCosineValueLinkHeadingNull() {
                this[this.tableLinkWithHeading.CosineValueLinkHeadingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithHeadingTUBSRow : global::System.Data.DataRow {
            
            private LinkWithHeadingTUBSDataTable tableLinkWithHeadingTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithHeadingTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithHeadingTUBS = ((LinkWithHeadingTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBS.LinkIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.LinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBS.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBS.HeadingIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeadingTUBS.LinkAnchorTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkAnchorText\' in table \'LinkWithHeadingTUBS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableLinkWithHeadingTUBS.LinkUrlColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBS.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeadingTUBS.VectorTermLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VectorTermLength\' in table \'LinkWithHeadingTUBS\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkHeading {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeadingTUBS.CosineValueLinkHeadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CosineValueLinkHeading\' in table \'LinkWithHeadingTUBS\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.CosineValueLinkHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visited {
                get {
                    try {
                        return ((bool)(this[this.tableLinkWithHeadingTUBS.VisitedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Visited\' in table \'LinkWithHeadingTUBS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBS.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkAnchorTextNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBS.LinkAnchorTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkAnchorTextNull() {
                this[this.tableLinkWithHeadingTUBS.LinkAnchorTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVectorTermLengthNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBS.VectorTermLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVectorTermLengthNull() {
                this[this.tableLinkWithHeadingTUBS.VectorTermLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCosineValueLinkHeadingNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBS.CosineValueLinkHeadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCosineValueLinkHeadingNull() {
                this[this.tableLinkWithHeadingTUBS.CosineValueLinkHeadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisitedNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBS.VisitedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisitedNull() {
                this[this.tableLinkWithHeadingTUBS.VisitedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithHeadingTUBSModifiedRow : global::System.Data.DataRow {
            
            private LinkWithHeadingTUBSModifiedDataTable tableLinkWithHeadingTUBSModified;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithHeadingTUBSModifiedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithHeadingTUBSModified = ((LinkWithHeadingTUBSModifiedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBSModified.LinkIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.LinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBSModified.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBSModified.HeadingIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeadingTUBSModified.LinkAnchorTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinkAnchorText\' in table \'LinkWithHeadingTUBSModified\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableLinkWithHeadingTUBSModified.LinkUrlColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkWithHeadingTUBSModified.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeadingTUBSModified.VectorTermLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VectorTermLength\' in table \'LinkWithHeadingTUBSModified\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueLinkHeading {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithHeadingTUBSModified.CosineValueLinkHeadingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CosineValueLinkHeading\' in table \'LinkWithHeadingTUBSModifi" +
                                "ed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.CosineValueLinkHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visited {
                get {
                    try {
                        return ((bool)(this[this.tableLinkWithHeadingTUBSModified.VisitedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Visited\' in table \'LinkWithHeadingTUBSModified\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithHeadingTUBSModified.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinkAnchorTextNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBSModified.LinkAnchorTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinkAnchorTextNull() {
                this[this.tableLinkWithHeadingTUBSModified.LinkAnchorTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVectorTermLengthNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBSModified.VectorTermLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVectorTermLengthNull() {
                this[this.tableLinkWithHeadingTUBSModified.VectorTermLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCosineValueLinkHeadingNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBSModified.CosineValueLinkHeadingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCosineValueLinkHeadingNull() {
                this[this.tableLinkWithHeadingTUBSModified.CosineValueLinkHeadingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisitedNull() {
                return this.IsNull(this.tableLinkWithHeadingTUBSModified.VisitedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisitedNull() {
                this[this.tableLinkWithHeadingTUBSModified.VisitedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeadingRow : global::System.Data.DataRow {
            
            private LinkWithoutHeadingDataTable tableLinkWithoutHeading;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeading = ((LinkWithoutHeadingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeading.LinkIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading.LinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeading.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    return ((string)(this[this.tableLinkWithoutHeading.LinkAnchorTextColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableLinkWithoutHeading.LinkUrlColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeading.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithoutHeading.VectorTermLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VectorTermLength\' in table \'LinkWithoutHeading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeading.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow WebPageRow {
                get {
                    return ((WebPageRow)(this.GetParentRow(this.Table.ParentRelations["FK_LinkWithoutHeading_WebPage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LinkWithoutHeading_WebPage"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVectorTermLengthNull() {
                return this.IsNull(this.tableLinkWithoutHeading.VectorTermLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVectorTermLengthNull() {
                this[this.tableLinkWithoutHeading.VectorTermLengthColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeading_CosineRow : global::System.Data.DataRow {
            
            private LinkWithoutHeading_CosineDataTable tableLinkWithoutHeading_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeading_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeading_Cosine = ((LinkWithoutHeading_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkWithoutHeadingCosineID {
                get {
                    return ((int)(this[this.tableLinkWithoutHeading_Cosine.linkWithoutHeadingCosineIDColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading_Cosine.linkWithoutHeadingCosineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeading_Cosine.pageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading_Cosine.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    try {
                        return ((int)(this[this.tableLinkWithoutHeading_Cosine.ToPageIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToPageId\' in table \'LinkWithoutHeading_Cosine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeading_Cosine.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeading_Cosine.linkIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading_Cosine.linkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkName {
                get {
                    return ((string)(this[this.tableLinkWithoutHeading_Cosine.LinkNameColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading_Cosine.LinkNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableLinkWithoutHeading_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeading_Cosine.CosineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToPageIdNull() {
                return this.IsNull(this.tableLinkWithoutHeading_Cosine.ToPageIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToPageIdNull() {
                this[this.tableLinkWithoutHeading_Cosine.ToPageIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeadingPathAdequacy_CosineRow : global::System.Data.DataRow {
            
            private LinkWithoutHeadingPathAdequacy_CosineDataTable tableLinkWithoutHeadingPathAdequacy_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingPathAdequacy_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeadingPathAdequacy_Cosine = ((LinkWithoutHeadingPathAdequacy_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkWithoutHeadingPathAdequacyCosineID {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.linkWithoutHeadingPathAdequacyCosineIDColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.linkWithoutHeadingPathAdequacyCosineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.pageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    try {
                        return ((int)(this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.ToPageIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToPageId\' in table \'LinkWithoutHeadingPathAdequacy_Cosine\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pAString {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.pAStringColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.pAStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.linkIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.linkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.CosineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToPageIdNull() {
                return this.IsNull(this.tableLinkWithoutHeadingPathAdequacy_Cosine.ToPageIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToPageIdNull() {
                this[this.tableLinkWithoutHeadingPathAdequacy_Cosine.ToPageIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeadingTemplateOfLinksRow : global::System.Data.DataRow {
            
            private LinkWithoutHeadingTemplateOfLinksDataTable tableLinkWithoutHeadingTemplateOfLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTemplateOfLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeadingTemplateOfLinks = ((LinkWithoutHeadingTemplateOfLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkWithoutHeadingTemplateOfLinksId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTemplateOfLinks.LinkWithoutHeadingTemplateOfLinksIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTemplateOfLinks.LinkWithoutHeadingTemplateOfLinksIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTemplateOfLinks.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTemplateOfLinks.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllLinksOfTemplate {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingTemplateOfLinks.AllLinksOfTemplateColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTemplateOfLinks.AllLinksOfTemplateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeadingTemplateOfLinksTUBSRow : global::System.Data.DataRow {
            
            private LinkWithoutHeadingTemplateOfLinksTUBSDataTable tableLinkWithoutHeadingTemplateOfLinksTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTemplateOfLinksTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeadingTemplateOfLinksTUBS = ((LinkWithoutHeadingTemplateOfLinksTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkWithoutHeadingTemplateOfLinksId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTemplateOfLinksTUBS.LinkWithoutHeadingTemplateOfLinksIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTemplateOfLinksTUBS.LinkWithoutHeadingTemplateOfLinksIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTemplateOfLinksTUBS.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTemplateOfLinksTUBS.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllLinksOfTemplate {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingTemplateOfLinksTUBS.AllLinksOfTemplateColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTemplateOfLinksTUBS.AllLinksOfTemplateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeadingTUBSRow : global::System.Data.DataRow {
            
            private LinkWithoutHeadingTUBSDataTable tableLinkWithoutHeadingTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeadingTUBS = ((LinkWithoutHeadingTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTUBS.LinkIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.LinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTUBS.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingTUBS.LinkAnchorTextColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingTUBS.LinkUrlColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTUBS.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithoutHeadingTUBS.VectorTermLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VectorTermLength\' in table \'LinkWithoutHeadingTUBS\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visited {
                get {
                    try {
                        return ((bool)(this[this.tableLinkWithoutHeadingTUBS.VisitedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Visited\' in table \'LinkWithoutHeadingTUBS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBS.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVectorTermLengthNull() {
                return this.IsNull(this.tableLinkWithoutHeadingTUBS.VectorTermLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVectorTermLengthNull() {
                this[this.tableLinkWithoutHeadingTUBS.VectorTermLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisitedNull() {
                return this.IsNull(this.tableLinkWithoutHeadingTUBS.VisitedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisitedNull() {
                this[this.tableLinkWithoutHeadingTUBS.VisitedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkWithoutHeadingTUBSModifiedRow : global::System.Data.DataRow {
            
            private LinkWithoutHeadingTUBSModifiedDataTable tableLinkWithoutHeadingTUBSModified;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkWithoutHeadingTUBSModifiedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkWithoutHeadingTUBSModified = ((LinkWithoutHeadingTUBSModifiedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTUBSModified.LinkIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.LinkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTUBSModified.WebPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingTUBSModified.LinkAnchorTextColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableLinkWithoutHeadingTUBSModified.LinkUrlColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableLinkWithoutHeadingTUBSModified.ToPageIdColumn]));
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VectorTermLength {
                get {
                    try {
                        return ((string)(this[this.tableLinkWithoutHeadingTUBSModified.VectorTermLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VectorTermLength\' in table \'LinkWithoutHeadingTUBSModified\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.VectorTermLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visited {
                get {
                    try {
                        return ((bool)(this[this.tableLinkWithoutHeadingTUBSModified.VisitedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Visited\' in table \'LinkWithoutHeadingTUBSModified\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLinkWithoutHeadingTUBSModified.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVectorTermLengthNull() {
                return this.IsNull(this.tableLinkWithoutHeadingTUBSModified.VectorTermLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVectorTermLengthNull() {
                this[this.tableLinkWithoutHeadingTUBSModified.VectorTermLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVisitedNull() {
                return this.IsNull(this.tableLinkWithoutHeadingTUBSModified.VisitedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVisitedNull() {
                this[this.tableLinkWithoutHeadingTUBSModified.VisitedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Page_Visited_UnsuccessfullyRow : global::System.Data.DataRow {
            
            private Page_Visited_UnsuccessfullyDataTable tablePage_Visited_Unsuccessfully;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Page_Visited_UnsuccessfullyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePage_Visited_Unsuccessfully = ((Page_Visited_UnsuccessfullyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tablePage_Visited_Unsuccessfully.pageIdColumn]));
                }
                set {
                    this[this.tablePage_Visited_Unsuccessfully.pageIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PageTemplateRow : global::System.Data.DataRow {
            
            private PageTemplateDataTable tablePageTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PageTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePageTemplate = ((PageTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageTemplateId {
                get {
                    return ((int)(this[this.tablePageTemplate.PageTemplateIdColumn]));
                }
                set {
                    this[this.tablePageTemplate.PageTemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pattern {
                get {
                    return ((string)(this[this.tablePageTemplate.PatternColumn]));
                }
                set {
                    this[this.tablePageTemplate.PatternColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tablePageTemplate.NameColumn]));
                }
                set {
                    this[this.tablePageTemplate.NameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParagraphRow : global::System.Data.DataRow {
            
            private ParagraphDataTable tableParagraph;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParagraphRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParagraph = ((ParagraphDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParaId {
                get {
                    return ((int)(this[this.tableParagraph.ParaIdColumn]));
                }
                set {
                    this[this.tableParagraph.ParaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableParagraph.WebPageIdColumn]));
                }
                set {
                    this[this.tableParagraph.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableParagraph.HeadingIdColumn]));
                }
                set {
                    this[this.tableParagraph.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParaText {
                get {
                    return ((string)(this[this.tableParagraph.ParaTextColumn]));
                }
                set {
                    this[this.tableParagraph.ParaTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueParagraphHeading {
                get {
                    return ((string)(this[this.tableParagraph.CosineValueParagraphHeadingColumn]));
                }
                set {
                    this[this.tableParagraph.CosineValueParagraphHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingText {
                get {
                    try {
                        return ((string)(this[this.tableParagraph.HeadingTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeadingText\' in table \'Paragraph\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParagraph.HeadingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadingTextNull() {
                return this.IsNull(this.tableParagraph.HeadingTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadingTextNull() {
                this[this.tableParagraph.HeadingTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Paragraph_CosineRow : global::System.Data.DataRow {
            
            private Paragraph_CosineDataTable tableParagraph_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Paragraph_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParagraph_Cosine = ((Paragraph_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParagraphCosineId {
                get {
                    return ((int)(this[this.tableParagraph_Cosine.ParagraphCosineIdColumn]));
                }
                set {
                    this[this.tableParagraph_Cosine.ParagraphCosineIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableParagraph_Cosine.WebPageIdColumn]));
                }
                set {
                    this[this.tableParagraph_Cosine.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParaId {
                get {
                    return ((int)(this[this.tableParagraph_Cosine.ParaIdColumn]));
                }
                set {
                    this[this.tableParagraph_Cosine.ParaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableParagraph_Cosine.HeadingIdColumn]));
                }
                set {
                    this[this.tableParagraph_Cosine.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParaText {
                get {
                    try {
                        return ((string)(this[this.tableParagraph_Cosine.ParaTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParaText\' in table \'Paragraph_Cosine\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParagraph_Cosine.ParaTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineParaAgainstGoal {
                get {
                    return ((string)(this[this.tableParagraph_Cosine.CosineParaAgainstGoalColumn]));
                }
                set {
                    this[this.tableParagraph_Cosine.CosineParaAgainstGoalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParaTextNull() {
                return this.IsNull(this.tableParagraph_Cosine.ParaTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParaTextNull() {
                this[this.tableParagraph_Cosine.ParaTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParagraphTUBSRow : global::System.Data.DataRow {
            
            private ParagraphTUBSDataTable tableParagraphTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParagraphTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParagraphTUBS = ((ParagraphTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParaId {
                get {
                    return ((int)(this[this.tableParagraphTUBS.ParaIdColumn]));
                }
                set {
                    this[this.tableParagraphTUBS.ParaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableParagraphTUBS.WebPageIdColumn]));
                }
                set {
                    this[this.tableParagraphTUBS.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HeadingId {
                get {
                    return ((int)(this[this.tableParagraphTUBS.HeadingIdColumn]));
                }
                set {
                    this[this.tableParagraphTUBS.HeadingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParaText {
                get {
                    return ((string)(this[this.tableParagraphTUBS.ParaTextColumn]));
                }
                set {
                    this[this.tableParagraphTUBS.ParaTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CosineValueParagraphHeading {
                get {
                    return ((string)(this[this.tableParagraphTUBS.CosineValueParagraphHeadingColumn]));
                }
                set {
                    this[this.tableParagraphTUBS.CosineValueParagraphHeadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadingText {
                get {
                    try {
                        return ((string)(this[this.tableParagraphTUBS.HeadingTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeadingText\' in table \'ParagraphTUBS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParagraphTUBS.HeadingTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadingTextNull() {
                return this.IsNull(this.tableParagraphTUBS.HeadingTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadingTextNull() {
                this[this.tableParagraphTUBS.HeadingTextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PathRow : global::System.Data.DataRow {
            
            private PathDataTable tablePath;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PathRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePath = ((PathDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pathId {
                get {
                    return ((int)(this[this.tablePath.pathIdColumn]));
                }
                set {
                    this[this.tablePath.pathIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingId {
                get {
                    try {
                        return ((int)(this[this.tablePath.headingIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'headingId\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.headingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int linkId {
                get {
                    try {
                        return ((int)(this[this.tablePath.linkIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'linkId\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.linkIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThisPageId {
                get {
                    try {
                        return ((int)(this[this.tablePath.ThisPageIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ThisPageId\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.ThisPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    try {
                        return ((int)(this[this.tablePath.ToPageIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToPageId\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreviousCosine {
                get {
                    try {
                        return ((string)(this[this.tablePath.PreviousCosineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreviousCosine\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.PreviousCosineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewCosine {
                get {
                    try {
                        return ((string)(this[this.tablePath.NewCosineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewCosine\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.NewCosineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PathChoosen {
                get {
                    try {
                        return ((string)(this[this.tablePath.PathChoosenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PathChoosen\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.PathChoosenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PreviousRow {
                get {
                    try {
                        return ((int)(this[this.tablePath.PreviousRowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreviousRow\' in table \'Path\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePath.PreviousRowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheadingIdNull() {
                return this.IsNull(this.tablePath.headingIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheadingIdNull() {
                this[this.tablePath.headingIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslinkIdNull() {
                return this.IsNull(this.tablePath.linkIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlinkIdNull() {
                this[this.tablePath.linkIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThisPageIdNull() {
                return this.IsNull(this.tablePath.ThisPageIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThisPageIdNull() {
                this[this.tablePath.ThisPageIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToPageIdNull() {
                return this.IsNull(this.tablePath.ToPageIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToPageIdNull() {
                this[this.tablePath.ToPageIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreviousCosineNull() {
                return this.IsNull(this.tablePath.PreviousCosineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreviousCosineNull() {
                this[this.tablePath.PreviousCosineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewCosineNull() {
                return this.IsNull(this.tablePath.NewCosineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewCosineNull() {
                this[this.tablePath.NewCosineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPathChoosenNull() {
                return this.IsNull(this.tablePath.PathChoosenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPathChoosenNull() {
                this[this.tablePath.PathChoosenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreviousRowNull() {
                return this.IsNull(this.tablePath.PreviousRowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreviousRowNull() {
                this[this.tablePath.PreviousRowColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Solution_FoundRow : global::System.Data.DataRow {
            
            private Solution_FoundDataTable tableSolution_Found;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Solution_FoundRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSolution_Found = ((Solution_FoundDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int solutionFoundId {
                get {
                    return ((int)(this[this.tableSolution_Found.solutionFoundIdColumn]));
                }
                set {
                    this[this.tableSolution_Found.solutionFoundIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pageId {
                get {
                    return ((int)(this[this.tableSolution_Found.pageIdColumn]));
                }
                set {
                    this[this.tableSolution_Found.pageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int topageId {
                get {
                    return ((int)(this[this.tableSolution_Found.topageIdColumn]));
                }
                set {
                    this[this.tableSolution_Found.topageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int headingId {
                get {
                    return ((int)(this[this.tableSolution_Found.headingIdColumn]));
                }
                set {
                    this[this.tableSolution_Found.headingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pathIdinPathTable {
                get {
                    return ((int)(this[this.tableSolution_Found.pathIdinPathTableColumn]));
                }
                set {
                    this[this.tableSolution_Found.pathIdinPathTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int paragraphId {
                get {
                    return ((int)(this[this.tableSolution_Found.paragraphIdColumn]));
                }
                set {
                    this[this.tableSolution_Found.paragraphIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paragraphText {
                get {
                    return ((string)(this[this.tableSolution_Found.paragraphTextColumn]));
                }
                set {
                    this[this.tableSolution_Found.paragraphTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cosine {
                get {
                    return ((string)(this[this.tableSolution_Found.cosineColumn]));
                }
                set {
                    this[this.tableSolution_Found.cosineColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateOfLinksRow : global::System.Data.DataRow {
            
            private TemplateOfLinksDataTable tableTemplateOfLinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateOfLinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplateOfLinks = ((TemplateOfLinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkTemplateId {
                get {
                    return ((int)(this[this.tableTemplateOfLinks.LinkTemplateIdColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks.LinkTemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    return ((string)(this[this.tableTemplateOfLinks.LinkAnchorTextColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableTemplateOfLinks.LinkUrlColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableTemplateOfLinks.ToPageIdColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermVectorLengthLinkTemplate {
                get {
                    return ((string)(this[this.tableTemplateOfLinks.TermVectorLengthLinkTemplateColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks.TermVectorLengthLinkTemplateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateOfLinks_CosineRow : global::System.Data.DataRow {
            
            private TemplateOfLinks_CosineDataTable tableTemplateOfLinks_Cosine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateOfLinks_CosineRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplateOfLinks_Cosine = ((TemplateOfLinks_CosineDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkTemplateId {
                get {
                    return ((int)(this[this.tableTemplateOfLinks_Cosine.LinkTemplateIdColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks_Cosine.LinkTemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    return ((string)(this[this.tableTemplateOfLinks_Cosine.LinkAnchorTextColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks_Cosine.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableTemplateOfLinks_Cosine.LinkUrlColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks_Cosine.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableTemplateOfLinks_Cosine.ToPageIdColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks_Cosine.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cosine {
                get {
                    return ((string)(this[this.tableTemplateOfLinks_Cosine.CosineColumn]));
                }
                set {
                    this[this.tableTemplateOfLinks_Cosine.CosineColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateOfLinksTUBSRow : global::System.Data.DataRow {
            
            private TemplateOfLinksTUBSDataTable tableTemplateOfLinksTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateOfLinksTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplateOfLinksTUBS = ((TemplateOfLinksTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinkTemplateId {
                get {
                    return ((int)(this[this.tableTemplateOfLinksTUBS.LinkTemplateIdColumn]));
                }
                set {
                    this[this.tableTemplateOfLinksTUBS.LinkTemplateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkAnchorText {
                get {
                    return ((string)(this[this.tableTemplateOfLinksTUBS.LinkAnchorTextColumn]));
                }
                set {
                    this[this.tableTemplateOfLinksTUBS.LinkAnchorTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinkUrl {
                get {
                    return ((string)(this[this.tableTemplateOfLinksTUBS.LinkUrlColumn]));
                }
                set {
                    this[this.tableTemplateOfLinksTUBS.LinkUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToPageId {
                get {
                    return ((int)(this[this.tableTemplateOfLinksTUBS.ToPageIdColumn]));
                }
                set {
                    this[this.tableTemplateOfLinksTUBS.ToPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TermVectorLengthLinkTemplate {
                get {
                    return ((string)(this[this.tableTemplateOfLinksTUBS.TermVectorLengthLinkTemplateColumn]));
                }
                set {
                    this[this.tableTemplateOfLinksTUBS.TermVectorLengthLinkTemplateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WebPageRow : global::System.Data.DataRow {
            
            private WebPageDataTable tableWebPage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WebPageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWebPage = ((WebPageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableWebPage.WebPageIdColumn]));
                }
                set {
                    this[this.tableWebPage.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebSiteId {
                get {
                    return ((int)(this[this.tableWebPage.WebSiteIdColumn]));
                }
                set {
                    this[this.tableWebPage.WebSiteIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableWebPage.TitleColumn]));
                }
                set {
                    this[this.tableWebPage.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageTemplate {
                get {
                    try {
                        return ((int)(this[this.tableWebPage.PageTemplateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PageTemplate\' in table \'WebPage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWebPage.PageTemplateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Url {
                get {
                    return ((string)(this[this.tableWebPage.UrlColumn]));
                }
                set {
                    this[this.tableWebPage.UrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visited {
                get {
                    return ((bool)(this[this.tableWebPage.VisitedColumn]));
                }
                set {
                    this[this.tableWebPage.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    return ((string)(this[this.tableWebPage.SourceColumn]));
                }
                set {
                    this[this.tableWebPage.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BestRouteToTop {
                get {
                    return ((int)(this[this.tableWebPage.BestRouteToTopColumn]));
                }
                set {
                    this[this.tableWebPage.BestRouteToTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountToTop {
                get {
                    return ((int)(this[this.tableWebPage.CountToTopColumn]));
                }
                set {
                    this[this.tableWebPage.CountToTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageTemplateNull() {
                return this.IsNull(this.tableWebPage.PageTemplateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageTemplateNull() {
                this[this.tableWebPage.PageTemplateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow[] GetLinkWithHeadingRows() {
                if ((this.Table.ChildRelations["FK_LinkWithHeading_WebPage"] == null)) {
                    return new LinkWithHeadingRow[0];
                }
                else {
                    return ((LinkWithHeadingRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LinkWithHeading_WebPage"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRow[] GetLinkWithoutHeadingRows() {
                if ((this.Table.ChildRelations["FK_LinkWithoutHeading_WebPage"] == null)) {
                    return new LinkWithoutHeadingRow[0];
                }
                else {
                    return ((LinkWithoutHeadingRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LinkWithoutHeading_WebPage"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WebPageTUBSRow : global::System.Data.DataRow {
            
            private WebPageTUBSDataTable tableWebPageTUBS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WebPageTUBSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWebPageTUBS = ((WebPageTUBSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebPageId {
                get {
                    return ((int)(this[this.tableWebPageTUBS.WebPageIdColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.WebPageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebSiteId {
                get {
                    return ((int)(this[this.tableWebPageTUBS.WebSiteIdColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.WebSiteIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableWebPageTUBS.TitleColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageTemplate {
                get {
                    try {
                        return ((int)(this[this.tableWebPageTUBS.PageTemplateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PageTemplate\' in table \'WebPageTUBS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWebPageTUBS.PageTemplateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Url {
                get {
                    return ((string)(this[this.tableWebPageTUBS.UrlColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.UrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Visited {
                get {
                    return ((bool)(this[this.tableWebPageTUBS.VisitedColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.VisitedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LwhORLwoh {
                get {
                    return ((string)(this[this.tableWebPageTUBS.LwhORLwohColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.LwhORLwohColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BestRouteToTop {
                get {
                    return ((int)(this[this.tableWebPageTUBS.BestRouteToTopColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.BestRouteToTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountToTop {
                get {
                    return ((int)(this[this.tableWebPageTUBS.CountToTopColumn]));
                }
                set {
                    this[this.tableWebPageTUBS.CountToTopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageTemplateNull() {
                return this.IsNull(this.tableWebPageTUBS.PageTemplateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageTemplateNull() {
                this[this.tableWebPageTUBS.PageTemplateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WebSiteRow : global::System.Data.DataRow {
            
            private WebSiteDataTable tableWebSite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WebSiteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWebSite = ((WebSiteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WebSiteId {
                get {
                    return ((int)(this[this.tableWebSite.WebSiteIdColumn]));
                }
                set {
                    this[this.tableWebSite.WebSiteIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WebSiteName {
                get {
                    return ((string)(this[this.tableWebSite.WebSiteNameColumn]));
                }
                set {
                    this[this.tableWebSite.WebSiteNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnImageRowChangeEvent : global::System.EventArgs {
            
            private AnImageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageRowChangeEvent(AnImageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AnImageWithoutHeadingRowChangeEvent : global::System.EventArgs {
            
            private AnImageWithoutHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingRowChangeEvent(AnImageWithoutHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AnImageWithoutHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CosineImageImageUnderSameHeadingRowChangeEvent : global::System.EventArgs {
            
            private CosineImageImageUnderSameHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingRowChangeEvent(CosineImageImageUnderSameHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageUnderSameHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CosineImageImageWithoutHeadingRowChangeEvent : global::System.EventArgs {
            
            private CosineImageImageWithoutHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingRowChangeEvent(CosineImageImageWithoutHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineImageImageWithoutHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CosineLinkLinkWithHeadingRowChangeEvent : global::System.EventArgs {
            
            private CosineLinkLinkWithHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingRowChangeEvent(CosineLinkLinkWithHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CosineLinkLinkWithHeadingTUBSRowChangeEvent : global::System.EventArgs {
            
            private CosineLinkLinkWithHeadingTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingTUBSRowChangeEvent(CosineLinkLinkWithHeadingTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithHeadingTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CosineLinkLinkWithoutHeadingRowChangeEvent : global::System.EventArgs {
            
            private CosineLinkLinkWithoutHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingRowChangeEvent(CosineLinkLinkWithoutHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CosineLinkLinkWithoutHeadingTUBSRowChangeEvent : global::System.EventArgs {
            
            private CosineLinkLinkWithoutHeadingTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingTUBSRowChangeEvent(CosineLinkLinkWithoutHeadingTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CosineLinkLinkWithoutHeadingTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GoalRowChangeEvent : global::System.EventArgs {
            
            private GoalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRowChangeEvent(GoalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadingRowChangeEvent : global::System.EventArgs {
            
            private HeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRowChangeEvent(HeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Heading_CosineRowChangeEvent : global::System.EventArgs {
            
            private Heading_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineRowChangeEvent(Heading_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Heading_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadingModifiedRowChangeEvent : global::System.EventArgs {
            
            private HeadingModifiedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedRowChangeEvent(HeadingModifiedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingModifiedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadingPathAdequacy_CosineRowChangeEvent : global::System.EventArgs {
            
            private HeadingPathAdequacy_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineRowChangeEvent(HeadingPathAdequacy_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingPathAdequacy_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadingTUBSTVLRowChangeEvent : global::System.EventArgs {
            
            private HeadingTUBSTVLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingTUBSTVLRowChangeEvent(HeadingTUBSTVLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingTUBSTVLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadingvsHeadinginSamePageCosinesRowChangeEvent : global::System.EventArgs {
            
            private HeadingvsHeadinginSamePageCosinesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesRowChangeEvent(HeadingvsHeadinginSamePageCosinesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent : global::System.EventArgs {
            
            private HeadingvsHeadinginSamePageCosinesTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesTUBSRowChangeEvent(HeadingvsHeadinginSamePageCosinesTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeadingvsHeadinginSamePageCosinesTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkLinkTemplateOfLinksRowChangeEvent : global::System.EventArgs {
            
            private LinkLinkTemplateOfLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksRowChangeEvent(LinkLinkTemplateOfLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkLinkTemplateOfLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkUnderHeading_CosineRowChangeEvent : global::System.EventArgs {
            
            private LinkUnderHeading_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineRowChangeEvent(LinkUnderHeading_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeading_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkUnderHeadingPathAdequacy_CosineRowChangeEvent : global::System.EventArgs {
            
            private LinkUnderHeadingPathAdequacy_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineRowChangeEvent(LinkUnderHeadingPathAdequacy_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkUnderHeadingPathAdequacy_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithHeadingRowChangeEvent : global::System.EventArgs {
            
            private LinkWithHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRowChangeEvent(LinkWithHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithHeadingTUBSRowChangeEvent : global::System.EventArgs {
            
            private LinkWithHeadingTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSRowChangeEvent(LinkWithHeadingTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithHeadingTUBSModifiedRowChangeEvent : global::System.EventArgs {
            
            private LinkWithHeadingTUBSModifiedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedRowChangeEvent(LinkWithHeadingTUBSModifiedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithHeadingTUBSModifiedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeadingRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeadingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRowChangeEvent(LinkWithoutHeadingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeading_CosineRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeading_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineRowChangeEvent(LinkWithoutHeading_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeading_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeadingPathAdequacy_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineRowChangeEvent(LinkWithoutHeadingPathAdequacy_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingPathAdequacy_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeadingTemplateOfLinksRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeadingTemplateOfLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksRowChangeEvent(LinkWithoutHeadingTemplateOfLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeadingTemplateOfLinksTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSRowChangeEvent(LinkWithoutHeadingTemplateOfLinksTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTemplateOfLinksTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeadingTUBSRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeadingTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSRowChangeEvent(LinkWithoutHeadingTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkWithoutHeadingTUBSModifiedRowChangeEvent : global::System.EventArgs {
            
            private LinkWithoutHeadingTUBSModifiedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedRowChangeEvent(LinkWithoutHeadingTUBSModifiedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkWithoutHeadingTUBSModifiedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Page_Visited_UnsuccessfullyRowChangeEvent : global::System.EventArgs {
            
            private Page_Visited_UnsuccessfullyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Page_Visited_UnsuccessfullyRowChangeEvent(Page_Visited_UnsuccessfullyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Page_Visited_UnsuccessfullyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PageTemplateRowChangeEvent : global::System.EventArgs {
            
            private PageTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateRowChangeEvent(PageTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PageTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParagraphRowChangeEvent : global::System.EventArgs {
            
            private ParagraphRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphRowChangeEvent(ParagraphRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Paragraph_CosineRowChangeEvent : global::System.EventArgs {
            
            private Paragraph_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineRowChangeEvent(Paragraph_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Paragraph_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParagraphTUBSRowChangeEvent : global::System.EventArgs {
            
            private ParagraphTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSRowChangeEvent(ParagraphTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParagraphTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PathRowChangeEvent : global::System.EventArgs {
            
            private PathRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathRowChangeEvent(PathRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PathRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Solution_FoundRowChangeEvent : global::System.EventArgs {
            
            private Solution_FoundRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundRowChangeEvent(Solution_FoundRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Solution_FoundRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateOfLinksRowChangeEvent : global::System.EventArgs {
            
            private TemplateOfLinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksRowChangeEvent(TemplateOfLinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateOfLinks_CosineRowChangeEvent : global::System.EventArgs {
            
            private TemplateOfLinks_CosineRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineRowChangeEvent(TemplateOfLinks_CosineRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinks_CosineRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateOfLinksTUBSRowChangeEvent : global::System.EventArgs {
            
            private TemplateOfLinksTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSRowChangeEvent(TemplateOfLinksTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateOfLinksTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WebPageRowChangeEvent : global::System.EventArgs {
            
            private WebPageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRowChangeEvent(WebPageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WebPageTUBSRowChangeEvent : global::System.EventArgs {
            
            private WebPageTUBSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSRowChangeEvent(WebPageTUBSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebPageTUBSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WebSiteRowChangeEvent : global::System.EventArgs {
            
            private WebSiteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteRowChangeEvent(WebSiteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WebSiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace IACollector.InfoArchDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AnImageTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AnImageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AnImage";
            tableMapping.ColumnMappings.Add("ImgId", "ImgId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("ImageAltText", "ImageAltText");
            tableMapping.ColumnMappings.Add("ImageUrl", "ImageUrl");
            tableMapping.ColumnMappings.Add("ImagePicture", "ImagePicture");
            tableMapping.ColumnMappings.Add("CosienValueImageHeading", "CosienValueImageHeading");
            tableMapping.ColumnMappings.Add("TermVectorLength", "TermVectorLength");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AnImage] WHERE (([ImgId] = @Original_ImgId) AND ([WebPageId] =" +
                " @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImgId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImgId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[AnImage] ([WebPageId], [HeadingId], [ImageAltText], [ImageUrl], [ImagePicture], [CosienValueImageHeading], [TermVectorLength]) VALUES (@WebPageId, @HeadingId, @ImageAltText, @ImageUrl, @ImagePicture, @CosienValueImageHeading, @TermVectorLength);
SELECT ImgId, WebPageId, HeadingId, ImageAltText, ImageUrl, ImagePicture, CosienValueImageHeading, TermVectorLength FROM AnImage WHERE (ImgId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageAltText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageAltText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImagePicture", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImagePicture", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosienValueImageHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosienValueImageHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TermVectorLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TermVectorLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[AnImage] SET [WebPageId] = @WebPageId, [HeadingId] = @HeadingId, [ImageAltText] = @ImageAltText, [ImageUrl] = @ImageUrl, [ImagePicture] = @ImagePicture, [CosienValueImageHeading] = @CosienValueImageHeading, [TermVectorLength] = @TermVectorLength WHERE (([ImgId] = @Original_ImgId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId));
SELECT ImgId, WebPageId, HeadingId, ImageAltText, ImageUrl, ImagePicture, CosienValueImageHeading, TermVectorLength FROM AnImage WHERE (ImgId = @ImgId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageAltText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageAltText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImagePicture", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImagePicture", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosienValueImageHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosienValueImageHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TermVectorLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TermVectorLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImgId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImgId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImgId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ImgId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ImgId, WebPageId, HeadingId, ImageAltText, ImageUrl, ImagePicture, CosienV" +
                "alueImageHeading, TermVectorLength FROM dbo.AnImage";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.AnImageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.AnImageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.AnImageDataTable dataTable = new InfoArchDataSet.AnImageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.AnImageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AnImage");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ImgId, int Original_WebPageId, int Original_HeadingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ImgId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int HeadingId, string ImageAltText, string ImageUrl, string ImagePicture, string CosienValueImageHeading, string TermVectorLength) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((ImageAltText == null)) {
                throw new global::System.ArgumentNullException("ImageAltText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ImageAltText));
            }
            if ((ImageUrl == null)) {
                throw new global::System.ArgumentNullException("ImageUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ImageUrl));
            }
            if ((ImagePicture == null)) {
                throw new global::System.ArgumentNullException("ImagePicture");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ImagePicture));
            }
            if ((CosienValueImageHeading == null)) {
                throw new global::System.ArgumentNullException("CosienValueImageHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CosienValueImageHeading));
            }
            if ((TermVectorLength == null)) {
                throw new global::System.ArgumentNullException("TermVectorLength");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TermVectorLength));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string ImageAltText, string ImageUrl, string ImagePicture, string CosienValueImageHeading, string TermVectorLength, int Original_ImgId, int Original_WebPageId, int Original_HeadingId, int ImgId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((ImageAltText == null)) {
                throw new global::System.ArgumentNullException("ImageAltText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ImageAltText));
            }
            if ((ImageUrl == null)) {
                throw new global::System.ArgumentNullException("ImageUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ImageUrl));
            }
            if ((ImagePicture == null)) {
                throw new global::System.ArgumentNullException("ImagePicture");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ImagePicture));
            }
            if ((CosienValueImageHeading == null)) {
                throw new global::System.ArgumentNullException("CosienValueImageHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CosienValueImageHeading));
            }
            if ((TermVectorLength == null)) {
                throw new global::System.ArgumentNullException("TermVectorLength");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TermVectorLength));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ImgId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ImgId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string ImageAltText, string ImageUrl, string ImagePicture, string CosienValueImageHeading, string TermVectorLength, int Original_ImgId, int Original_WebPageId, int Original_HeadingId) {
            return this.Update(WebPageId, HeadingId, ImageAltText, ImageUrl, ImagePicture, CosienValueImageHeading, TermVectorLength, Original_ImgId, Original_WebPageId, Original_HeadingId, Original_ImgId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AnImageWithoutHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AnImageWithoutHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AnImageWithoutHeading";
            tableMapping.ColumnMappings.Add("ImageWithoutHeadingId", "ImageWithoutHeadingId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("ImageUrl", "ImageUrl");
            tableMapping.ColumnMappings.Add("VectorTermLegnth", "VectorTermLegnth");
            tableMapping.ColumnMappings.Add("ImageAltText", "ImageAltText");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AnImageWithoutHeading] WHERE (([ImageWithoutHeadingId] = @Orig" +
                "inal_ImageWithoutHeadingId) AND ([WebPageId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageWithoutHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageWithoutHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[AnImageWithoutHeading] ([WebPageId], [ImageUrl], [VectorTermLegnth], [ImageAltText]) VALUES (@WebPageId, @ImageUrl, @VectorTermLegnth, @ImageAltText);
SELECT ImageWithoutHeadingId, WebPageId, ImageUrl, VectorTermLegnth, ImageAltText FROM AnImageWithoutHeading WHERE (ImageWithoutHeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLegnth", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLegnth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageAltText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageAltText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[AnImageWithoutHeading] SET [WebPageId] = @WebPageId, [ImageUrl] = @ImageUrl, [VectorTermLegnth] = @VectorTermLegnth, [ImageAltText] = @ImageAltText WHERE (([ImageWithoutHeadingId] = @Original_ImageWithoutHeadingId) AND ([WebPageId] = @Original_WebPageId));
SELECT ImageWithoutHeadingId, WebPageId, ImageUrl, VectorTermLegnth, ImageAltText FROM AnImageWithoutHeading WHERE (ImageWithoutHeadingId = @ImageWithoutHeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLegnth", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLegnth", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageAltText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageAltText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageWithoutHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageWithoutHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageWithoutHeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ImageWithoutHeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ImageWithoutHeadingId, WebPageId, ImageUrl, VectorTermLegnth, ImageAltText" +
                " FROM dbo.AnImageWithoutHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.AnImageWithoutHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.AnImageWithoutHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.AnImageWithoutHeadingDataTable dataTable = new InfoArchDataSet.AnImageWithoutHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.AnImageWithoutHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AnImageWithoutHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ImageWithoutHeadingId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ImageWithoutHeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string ImageUrl, string VectorTermLegnth, string ImageAltText) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((ImageUrl == null)) {
                throw new global::System.ArgumentNullException("ImageUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ImageUrl));
            }
            if ((VectorTermLegnth == null)) {
                throw new global::System.ArgumentNullException("VectorTermLegnth");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VectorTermLegnth));
            }
            if ((ImageAltText == null)) {
                throw new global::System.ArgumentNullException("ImageAltText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ImageAltText));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string ImageUrl, string VectorTermLegnth, string ImageAltText, int Original_ImageWithoutHeadingId, int Original_WebPageId, int ImageWithoutHeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((ImageUrl == null)) {
                throw new global::System.ArgumentNullException("ImageUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ImageUrl));
            }
            if ((VectorTermLegnth == null)) {
                throw new global::System.ArgumentNullException("VectorTermLegnth");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VectorTermLegnth));
            }
            if ((ImageAltText == null)) {
                throw new global::System.ArgumentNullException("ImageAltText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ImageAltText));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ImageWithoutHeadingId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ImageWithoutHeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string ImageUrl, string VectorTermLegnth, string ImageAltText, int Original_ImageWithoutHeadingId, int Original_WebPageId) {
            return this.Update(WebPageId, ImageUrl, VectorTermLegnth, ImageAltText, Original_ImageWithoutHeadingId, Original_WebPageId, Original_ImageWithoutHeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CosineImageImageUnderSameHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CosineImageImageUnderSameHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CosineImageImageUnderSameHeading";
            tableMapping.ColumnMappings.Add("CosineImageImageUnderHeadingId", "CosineImageImageUnderHeadingId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("ImageXId", "ImageXId");
            tableMapping.ColumnMappings.Add("ImageYId", "ImageYId");
            tableMapping.ColumnMappings.Add("CosineValueImageImageWithHeading", "CosineValueImageImageWithHeading");
            tableMapping.ColumnMappings.Add("WebpageId", "WebpageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CosineImageImageUnderSameHeading] WHERE (([CosineImageImageUnderHeadingId] = @Original_CosineImageImageUnderHeadingId) AND ([HeadingId] = @Original_HeadingId) AND ([ImageXId] = @Original_ImageXId) AND ([ImageYId] = @Original_ImageYId) AND ([WebpageId] = @Original_WebpageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineImageImageUnderHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineImageImageUnderHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CosineImageImageUnderSameHeading] ([HeadingId], [ImageXId], [ImageYId], [CosineValueImageImageWithHeading], [WebpageId]) VALUES (@HeadingId, @ImageXId, @ImageYId, @CosineValueImageImageWithHeading, @WebpageId);
SELECT CosineImageImageUnderHeadingId, HeadingId, ImageXId, ImageYId, CosineValueImageImageWithHeading, WebpageId FROM CosineImageImageUnderSameHeading WHERE (CosineImageImageUnderHeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueImageImageWithHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueImageImageWithHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CosineImageImageUnderSameHeading] SET [HeadingId] = @HeadingId, [ImageXId] = @ImageXId, [ImageYId] = @ImageYId, [CosineValueImageImageWithHeading] = @CosineValueImageImageWithHeading, [WebpageId] = @WebpageId WHERE (([CosineImageImageUnderHeadingId] = @Original_CosineImageImageUnderHeadingId) AND ([HeadingId] = @Original_HeadingId) AND ([ImageXId] = @Original_ImageXId) AND ([ImageYId] = @Original_ImageYId) AND ([WebpageId] = @Original_WebpageId));
SELECT CosineImageImageUnderHeadingId, HeadingId, ImageXId, ImageYId, CosineValueImageImageWithHeading, WebpageId FROM CosineImageImageUnderSameHeading WHERE (CosineImageImageUnderHeadingId = @CosineImageImageUnderHeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueImageImageWithHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueImageImageWithHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineImageImageUnderHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineImageImageUnderHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineImageImageUnderHeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CosineImageImageUnderHeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CosineImageImageUnderHeadingId, HeadingId, ImageXId, ImageYId, CosineValue" +
                "ImageImageWithHeading, WebpageId FROM dbo.CosineImageImageUnderSameHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.CosineImageImageUnderSameHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.CosineImageImageUnderSameHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.CosineImageImageUnderSameHeadingDataTable dataTable = new InfoArchDataSet.CosineImageImageUnderSameHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.CosineImageImageUnderSameHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CosineImageImageUnderSameHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CosineImageImageUnderHeadingId, int Original_HeadingId, int Original_ImageXId, int Original_ImageYId, int Original_WebpageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CosineImageImageUnderHeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ImageXId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ImageYId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_WebpageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int HeadingId, int ImageXId, int ImageYId, string CosineValueImageImageWithHeading, int WebpageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(HeadingId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ImageXId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ImageYId));
            if ((CosineValueImageImageWithHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueImageImageWithHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueImageImageWithHeading));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(WebpageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int HeadingId, int ImageXId, int ImageYId, string CosineValueImageImageWithHeading, int WebpageId, int Original_CosineImageImageUnderHeadingId, int Original_HeadingId, int Original_ImageXId, int Original_ImageYId, int Original_WebpageId, int CosineImageImageUnderHeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(HeadingId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ImageXId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ImageYId));
            if ((CosineValueImageImageWithHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueImageImageWithHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CosineValueImageImageWithHeading));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(WebpageId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_CosineImageImageUnderHeadingId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ImageXId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ImageYId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WebpageId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(CosineImageImageUnderHeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int HeadingId, int ImageXId, int ImageYId, string CosineValueImageImageWithHeading, int WebpageId, int Original_CosineImageImageUnderHeadingId, int Original_HeadingId, int Original_ImageXId, int Original_ImageYId, int Original_WebpageId) {
            return this.Update(HeadingId, ImageXId, ImageYId, CosineValueImageImageWithHeading, WebpageId, Original_CosineImageImageUnderHeadingId, Original_HeadingId, Original_ImageXId, Original_ImageYId, Original_WebpageId, Original_CosineImageImageUnderHeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CosineImageImageWithoutHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CosineImageImageWithoutHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CosineImageImageWithoutHeading";
            tableMapping.ColumnMappings.Add("CosineImageImageWithoutHeadingId", "CosineImageImageWithoutHeadingId");
            tableMapping.ColumnMappings.Add("ImageXId", "ImageXId");
            tableMapping.ColumnMappings.Add("ImageYId", "ImageYId");
            tableMapping.ColumnMappings.Add("CosineValueImageImageWithoutHeading", "CosineValueImageImageWithoutHeading");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CosineImageImageWithoutHeading] WHERE (([CosineImageImageWithoutHeadingId] = @Original_CosineImageImageWithoutHeadingId) AND ([ImageXId] = @Original_ImageXId) AND ([ImageYId] = @Original_ImageYId) AND ([WebPageId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineImageImageWithoutHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineImageImageWithoutHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CosineImageImageWithoutHeading] ([ImageXId], [ImageYId], [CosineValueImageImageWithoutHeading], [WebPageId]) VALUES (@ImageXId, @ImageYId, @CosineValueImageImageWithoutHeading, @WebPageId);
SELECT CosineImageImageWithoutHeadingId, ImageXId, ImageYId, CosineValueImageImageWithoutHeading, WebPageId FROM CosineImageImageWithoutHeading WHERE (CosineImageImageWithoutHeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueImageImageWithoutHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueImageImageWithoutHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CosineImageImageWithoutHeading] SET [ImageXId] = @ImageXId, [ImageYId] = @ImageYId, [CosineValueImageImageWithoutHeading] = @CosineValueImageImageWithoutHeading, [WebPageId] = @WebPageId WHERE (([CosineImageImageWithoutHeadingId] = @Original_CosineImageImageWithoutHeadingId) AND ([ImageXId] = @Original_ImageXId) AND ([ImageYId] = @Original_ImageYId) AND ([WebPageId] = @Original_WebPageId));
SELECT CosineImageImageWithoutHeadingId, ImageXId, ImageYId, CosineValueImageImageWithoutHeading, WebPageId FROM CosineImageImageWithoutHeading WHERE (CosineImageImageWithoutHeadingId = @CosineImageImageWithoutHeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueImageImageWithoutHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueImageImageWithoutHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineImageImageWithoutHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineImageImageWithoutHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineImageImageWithoutHeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CosineImageImageWithoutHeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CosineImageImageWithoutHeadingId, ImageXId, ImageYId, CosineValueImageImag" +
                "eWithoutHeading, WebPageId FROM dbo.CosineImageImageWithoutHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.CosineImageImageWithoutHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.CosineImageImageWithoutHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.CosineImageImageWithoutHeadingDataTable dataTable = new InfoArchDataSet.CosineImageImageWithoutHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.CosineImageImageWithoutHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CosineImageImageWithoutHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CosineImageImageWithoutHeadingId, int Original_ImageXId, int Original_ImageYId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CosineImageImageWithoutHeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ImageXId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ImageYId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ImageXId, int ImageYId, string CosineValueImageImageWithoutHeading, int WebPageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ImageXId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ImageYId));
            if ((CosineValueImageImageWithoutHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueImageImageWithoutHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CosineValueImageImageWithoutHeading));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ImageXId, int ImageYId, string CosineValueImageImageWithoutHeading, int WebPageId, int Original_CosineImageImageWithoutHeadingId, int Original_ImageXId, int Original_ImageYId, int Original_WebPageId, int CosineImageImageWithoutHeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ImageXId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ImageYId));
            if ((CosineValueImageImageWithoutHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueImageImageWithoutHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CosineValueImageImageWithoutHeading));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_CosineImageImageWithoutHeadingId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ImageXId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ImageYId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(CosineImageImageWithoutHeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ImageXId, int ImageYId, string CosineValueImageImageWithoutHeading, int WebPageId, int Original_CosineImageImageWithoutHeadingId, int Original_ImageXId, int Original_ImageYId, int Original_WebPageId) {
            return this.Update(ImageXId, ImageYId, CosineValueImageImageWithoutHeading, WebPageId, Original_CosineImageImageWithoutHeadingId, Original_ImageXId, Original_ImageYId, Original_WebPageId, Original_CosineImageImageWithoutHeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CosineLinkLinkWithHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CosineLinkLinkWithHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CosineLinkLinkWithHeading";
            tableMapping.ColumnMappings.Add("CosineLinkLinkWithHeadingId", "CosineLinkLinkWithHeadingId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("LinkXId", "LinkXId");
            tableMapping.ColumnMappings.Add("LinkYId", "LinkYId");
            tableMapping.ColumnMappings.Add("CosineValueLinkLinkWithHeading", "CosineValueLinkLinkWithHeading");
            tableMapping.ColumnMappings.Add("WebpageId", "WebpageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CosineLinkLinkWithHeading] WHERE (([CosineLinkLinkWithHeadingId] = @Original_CosineLinkLinkWithHeadingId) AND ([HeadingId] = @Original_HeadingId) AND ([LinkXId] = @Original_LinkXId) AND ([LinkYId] = @Original_LinkYId) AND ([WebpageId] = @Original_WebpageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineLinkLinkWithHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkWithHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CosineLinkLinkWithHeading] ([HeadingId], [LinkXId], [LinkYId], [CosineValueLinkLinkWithHeading], [WebpageId]) VALUES (@HeadingId, @LinkXId, @LinkYId, @CosineValueLinkLinkWithHeading, @WebpageId);
SELECT CosineLinkLinkWithHeadingId, HeadingId, LinkXId, LinkYId, CosineValueLinkLinkWithHeading, WebpageId FROM CosineLinkLinkWithHeading WHERE (CosineLinkLinkWithHeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkLinkWithHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkLinkWithHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CosineLinkLinkWithHeading] SET [HeadingId] = @HeadingId, [LinkXId] = @LinkXId, [LinkYId] = @LinkYId, [CosineValueLinkLinkWithHeading] = @CosineValueLinkLinkWithHeading, [WebpageId] = @WebpageId WHERE (([CosineLinkLinkWithHeadingId] = @Original_CosineLinkLinkWithHeadingId) AND ([HeadingId] = @Original_HeadingId) AND ([LinkXId] = @Original_LinkXId) AND ([LinkYId] = @Original_LinkYId) AND ([WebpageId] = @Original_WebpageId));
SELECT CosineLinkLinkWithHeadingId, HeadingId, LinkXId, LinkYId, CosineValueLinkLinkWithHeading, WebpageId FROM CosineLinkLinkWithHeading WHERE (CosineLinkLinkWithHeadingId = @CosineLinkLinkWithHeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkLinkWithHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkLinkWithHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineLinkLinkWithHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkWithHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineLinkLinkWithHeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkWithHeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CosineLinkLinkWithHeadingId, HeadingId, LinkXId, LinkYId, CosineValueLinkL" +
                "inkWithHeading, WebpageId FROM dbo.CosineLinkLinkWithHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.CosineLinkLinkWithHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.CosineLinkLinkWithHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.CosineLinkLinkWithHeadingDataTable dataTable = new InfoArchDataSet.CosineLinkLinkWithHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.CosineLinkLinkWithHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CosineLinkLinkWithHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CosineLinkLinkWithHeadingId, int Original_HeadingId, int Original_LinkXId, int Original_LinkYId, int Original_WebpageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CosineLinkLinkWithHeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LinkXId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_LinkYId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_WebpageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int HeadingId, int LinkXId, int LinkYId, string CosineValueLinkLinkWithHeading, int WebpageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(HeadingId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LinkXId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LinkYId));
            if ((CosineValueLinkLinkWithHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueLinkLinkWithHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueLinkLinkWithHeading));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(WebpageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int HeadingId, int LinkXId, int LinkYId, string CosineValueLinkLinkWithHeading, int WebpageId, int Original_CosineLinkLinkWithHeadingId, int Original_HeadingId, int Original_LinkXId, int Original_LinkYId, int Original_WebpageId, int CosineLinkLinkWithHeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(HeadingId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(LinkXId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LinkYId));
            if ((CosineValueLinkLinkWithHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueLinkLinkWithHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CosineValueLinkLinkWithHeading));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(WebpageId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_CosineLinkLinkWithHeadingId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_LinkXId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_LinkYId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WebpageId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(CosineLinkLinkWithHeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int HeadingId, int LinkXId, int LinkYId, string CosineValueLinkLinkWithHeading, int WebpageId, int Original_CosineLinkLinkWithHeadingId, int Original_HeadingId, int Original_LinkXId, int Original_LinkYId, int Original_WebpageId) {
            return this.Update(HeadingId, LinkXId, LinkYId, CosineValueLinkLinkWithHeading, WebpageId, Original_CosineLinkLinkWithHeadingId, Original_HeadingId, Original_LinkXId, Original_LinkYId, Original_WebpageId, Original_CosineLinkLinkWithHeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CosineLinkLinkWithHeadingTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CosineLinkLinkWithHeadingTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CosineLinkLinkWithHeadingTUBS";
            tableMapping.ColumnMappings.Add("CosineLinkLinkWithHeadingId", "CosineLinkLinkWithHeadingId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("LinkXId", "LinkXId");
            tableMapping.ColumnMappings.Add("LinkYId", "LinkYId");
            tableMapping.ColumnMappings.Add("CosineValueLinkLinkWithHeading", "CosineValueLinkLinkWithHeading");
            tableMapping.ColumnMappings.Add("WebpageId", "WebpageId");
            tableMapping.ColumnMappings.Add("LinkXText", "LinkXText");
            tableMapping.ColumnMappings.Add("LinkYText", "LinkYText");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CosineLinkLinkWithHeadingTUBS] ([HeadingId], [LinkXId], [LinkYId], [CosineValueLinkLinkWithHeading], [WebpageId], [LinkXText], [LinkYText]) VALUES (@HeadingId, @LinkXId, @LinkYId, @CosineValueLinkLinkWithHeading, @WebpageId, @LinkXText, @LinkYText)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkLinkWithHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkLinkWithHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CosineLinkLinkWithHeadingId, HeadingId, LinkXId, LinkYId, CosineValueLinkL" +
                "inkWithHeading, WebpageId, LinkXText, LinkYText FROM dbo.CosineLinkLinkWithHeadi" +
                "ngTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.CosineLinkLinkWithHeadingTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.CosineLinkLinkWithHeadingTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.CosineLinkLinkWithHeadingTUBSDataTable dataTable = new InfoArchDataSet.CosineLinkLinkWithHeadingTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.CosineLinkLinkWithHeadingTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CosineLinkLinkWithHeadingTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int HeadingId, int LinkXId, int LinkYId, string CosineValueLinkLinkWithHeading, int WebpageId, string LinkXText, string LinkYText) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(HeadingId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LinkXId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LinkYId));
            if ((CosineValueLinkLinkWithHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueLinkLinkWithHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueLinkLinkWithHeading));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(WebpageId));
            if ((LinkXText == null)) {
                throw new global::System.ArgumentNullException("LinkXText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LinkXText));
            }
            if ((LinkYText == null)) {
                throw new global::System.ArgumentNullException("LinkYText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(LinkYText));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CosineLinkLinkWithoutHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CosineLinkLinkWithoutHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CosineLinkLinkWithoutHeading";
            tableMapping.ColumnMappings.Add("CosineLinkLinkWithoutHeadingId", "CosineLinkLinkWithoutHeadingId");
            tableMapping.ColumnMappings.Add("LinkXId", "LinkXId");
            tableMapping.ColumnMappings.Add("LinkYId", "LinkYId");
            tableMapping.ColumnMappings.Add("CosineValueLinkLinkWithoutHeading", "CosineValueLinkLinkWithoutHeading");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CosineLinkLinkWithoutHeading] WHERE (([CosineLinkLinkWithoutHe" +
                "adingId] = @Original_CosineLinkLinkWithoutHeadingId) AND ([LinkXId] = @Original_" +
                "LinkXId) AND ([LinkYId] = @Original_LinkYId) AND ([WebPageId] = @Original_WebPag" +
                "eId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineLinkLinkWithoutHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkWithoutHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CosineLinkLinkWithoutHeading] ([LinkXId], [LinkYId], [CosineValueLinkLinkWithoutHeading], [WebPageId]) VALUES (@LinkXId, @LinkYId, @CosineValueLinkLinkWithoutHeading, @WebPageId);
SELECT CosineLinkLinkWithoutHeadingId, LinkXId, LinkYId, CosineValueLinkLinkWithoutHeading, WebPageId FROM CosineLinkLinkWithoutHeading WHERE (CosineLinkLinkWithoutHeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkLinkWithoutHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkLinkWithoutHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CosineLinkLinkWithoutHeading] SET [LinkXId] = @LinkXId, [LinkYId] = @LinkYId, [CosineValueLinkLinkWithoutHeading] = @CosineValueLinkLinkWithoutHeading, [WebPageId] = @WebPageId WHERE (([CosineLinkLinkWithoutHeadingId] = @Original_CosineLinkLinkWithoutHeadingId) AND ([LinkXId] = @Original_LinkXId) AND ([LinkYId] = @Original_LinkYId) AND ([WebPageId] = @Original_WebPageId));
SELECT CosineLinkLinkWithoutHeadingId, LinkXId, LinkYId, CosineValueLinkLinkWithoutHeading, WebPageId FROM CosineLinkLinkWithoutHeading WHERE (CosineLinkLinkWithoutHeadingId = @CosineLinkLinkWithoutHeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkLinkWithoutHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkLinkWithoutHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CosineLinkLinkWithoutHeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkWithoutHeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineLinkLinkWithoutHeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkWithoutHeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CosineLinkLinkWithoutHeadingId, LinkXId, LinkYId, CosineValueLinkLinkWitho" +
                "utHeading, WebPageId FROM dbo.CosineLinkLinkWithoutHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.CosineLinkLinkWithoutHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.CosineLinkLinkWithoutHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.CosineLinkLinkWithoutHeadingDataTable dataTable = new InfoArchDataSet.CosineLinkLinkWithoutHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.CosineLinkLinkWithoutHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CosineLinkLinkWithoutHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CosineLinkLinkWithoutHeadingId, int Original_LinkXId, int Original_LinkYId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CosineLinkLinkWithoutHeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_LinkXId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LinkYId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LinkXId, int LinkYId, string CosineValueLinkLinkWithoutHeading, int WebPageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LinkXId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LinkYId));
            if ((CosineValueLinkLinkWithoutHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueLinkLinkWithoutHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CosineValueLinkLinkWithoutHeading));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LinkXId, int LinkYId, string CosineValueLinkLinkWithoutHeading, int WebPageId, int Original_CosineLinkLinkWithoutHeadingId, int Original_LinkXId, int Original_LinkYId, int Original_WebPageId, int CosineLinkLinkWithoutHeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LinkXId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(LinkYId));
            if ((CosineValueLinkLinkWithoutHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueLinkLinkWithoutHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CosineValueLinkLinkWithoutHeading));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_CosineLinkLinkWithoutHeadingId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_LinkXId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_LinkYId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(CosineLinkLinkWithoutHeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LinkXId, int LinkYId, string CosineValueLinkLinkWithoutHeading, int WebPageId, int Original_CosineLinkLinkWithoutHeadingId, int Original_LinkXId, int Original_LinkYId, int Original_WebPageId) {
            return this.Update(LinkXId, LinkYId, CosineValueLinkLinkWithoutHeading, WebPageId, Original_CosineLinkLinkWithoutHeadingId, Original_LinkXId, Original_LinkYId, Original_WebPageId, Original_CosineLinkLinkWithoutHeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CosineLinkLinkWithoutHeadingTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CosineLinkLinkWithoutHeadingTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CosineLinkLinkWithoutHeadingTUBS";
            tableMapping.ColumnMappings.Add("CosineLinkLinkWithoutHeadingId", "CosineLinkLinkWithoutHeadingId");
            tableMapping.ColumnMappings.Add("LinkXId", "LinkXId");
            tableMapping.ColumnMappings.Add("LinkYId", "LinkYId");
            tableMapping.ColumnMappings.Add("CosineValueLinkLinkWithoutHeading", "CosineValueLinkLinkWithoutHeading");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CosineLinkLinkWithoutHeadingTUBS] ([LinkXId], [LinkYId], [Cosi" +
                "neValueLinkLinkWithoutHeading], [WebPageId]) VALUES (@LinkXId, @LinkYId, @Cosine" +
                "ValueLinkLinkWithoutHeading, @WebPageId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkLinkWithoutHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkLinkWithoutHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CosineLinkLinkWithoutHeadingId, LinkXId, LinkYId, CosineValueLinkLinkWitho" +
                "utHeading, WebPageId FROM dbo.CosineLinkLinkWithoutHeadingTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.CosineLinkLinkWithoutHeadingTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.CosineLinkLinkWithoutHeadingTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.CosineLinkLinkWithoutHeadingTUBSDataTable dataTable = new InfoArchDataSet.CosineLinkLinkWithoutHeadingTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.CosineLinkLinkWithoutHeadingTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CosineLinkLinkWithoutHeadingTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LinkXId, int LinkYId, string CosineValueLinkLinkWithoutHeading, int WebPageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LinkXId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LinkYId));
            if ((CosineValueLinkLinkWithoutHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueLinkLinkWithoutHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CosineValueLinkLinkWithoutHeading));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GoalTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GoalTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Goal";
            tableMapping.ColumnMappings.Add("text", "text");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Goal] ([text]) VALUES (@text)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT text FROM dbo.Goal";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.GoalDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.GoalDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.GoalDataTable dataTable = new InfoArchDataSet.GoalDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.GoalDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Goal");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string text) {
            if ((text == null)) {
                throw new global::System.ArgumentNullException("text");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Heading";
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingText", "HeadingText");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Heading] WHERE (([HeadingId] = @Original_HeadingId) AND ([WebP" +
                "ageId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Heading] ([WebPageId], [HeadingText], [VectorTermLength]) VALU" +
                "ES (@WebPageId, @HeadingText, @VectorTermLength);\r\nSELECT HeadingId, WebPageId, " +
                "HeadingText, VectorTermLength FROM Heading WHERE (HeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Heading] SET [WebPageId] = @WebPageId, [HeadingText] = @HeadingText, [VectorTermLength] = @VectorTermLength WHERE (([HeadingId] = @Original_HeadingId) AND ([WebPageId] = @Original_WebPageId));
SELECT HeadingId, WebPageId, HeadingText, VectorTermLength FROM Heading WHERE (HeadingId = @HeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT HeadingId, WebPageId, HeadingText, VectorTermLength FROM dbo.Heading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.HeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.HeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.HeadingDataTable dataTable = new InfoArchDataSet.HeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.HeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Heading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_HeadingId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string HeadingText, string VectorTermLength) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((HeadingText == null)) {
                throw new global::System.ArgumentNullException("HeadingText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(HeadingText));
            }
            if ((VectorTermLength == null)) {
                throw new global::System.ArgumentNullException("VectorTermLength");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VectorTermLength));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string HeadingText, string VectorTermLength, int Original_HeadingId, int Original_WebPageId, int HeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((HeadingText == null)) {
                throw new global::System.ArgumentNullException("HeadingText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(HeadingText));
            }
            if ((VectorTermLength == null)) {
                throw new global::System.ArgumentNullException("VectorTermLength");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VectorTermLength));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(HeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string HeadingText, string VectorTermLength, int Original_HeadingId, int Original_WebPageId) {
            return this.Update(WebPageId, HeadingText, VectorTermLength, Original_HeadingId, Original_WebPageId, Original_HeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Heading_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Heading_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Heading_Cosine";
            tableMapping.ColumnMappings.Add("headingCosineID", "headingCosineID");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("headingId", "headingId");
            tableMapping.ColumnMappings.Add("headingText", "headingText");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            tableMapping.ColumnMappings.Add("SelectedRow", "SelectedRow");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Heading_Cosine] WHERE (([headingCosineID] = @Original_headingC" +
                "osineID) AND ([pageId] = @Original_pageId) AND ([headingId] = @Original_headingI" +
                "d))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Heading_Cosine] ([pageId], [headingId], [headingText], [Cosine], [SelectedRow]) VALUES (@pageId, @headingId, @headingText, @Cosine, @SelectedRow);
SELECT headingCosineID, pageId, headingId, headingText, Cosine, SelectedRow FROM Heading_Cosine WHERE (headingCosineID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectedRow", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectedRow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Heading_Cosine] SET [pageId] = @pageId, [headingId] = @headingId, [headingText] = @headingText, [Cosine] = @Cosine, [SelectedRow] = @SelectedRow WHERE (([headingCosineID] = @Original_headingCosineID) AND ([pageId] = @Original_pageId) AND ([headingId] = @Original_headingId));
SELECT headingCosineID, pageId, headingId, headingText, Cosine, SelectedRow FROM Heading_Cosine WHERE (headingCosineID = @headingCosineID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectedRow", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectedRow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingCosineID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "headingCosineID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT headingCosineID, pageId, headingId, headingText, Cosine, SelectedRow FROM " +
                "dbo.Heading_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.Heading_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.Heading_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.Heading_CosineDataTable dataTable = new InfoArchDataSet.Heading_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.Heading_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Heading_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_headingCosineID, int Original_pageId, int Original_headingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_headingCosineID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_headingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId, int headingId, string headingText, string Cosine, string SelectedRow) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(headingId));
            if ((headingText == null)) {
                throw new global::System.ArgumentNullException("headingText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(headingText));
            }
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Cosine));
            }
            if ((SelectedRow == null)) {
                throw new global::System.ArgumentNullException("SelectedRow");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SelectedRow));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, int headingId, string headingText, string Cosine, string SelectedRow, int Original_headingCosineID, int Original_pageId, int Original_headingId, int headingCosineID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(headingId));
            if ((headingText == null)) {
                throw new global::System.ArgumentNullException("headingText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(headingText));
            }
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Cosine));
            }
            if ((SelectedRow == null)) {
                throw new global::System.ArgumentNullException("SelectedRow");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SelectedRow));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_headingCosineID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_pageId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_headingId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(headingCosineID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, int headingId, string headingText, string Cosine, string SelectedRow, int Original_headingCosineID, int Original_pageId, int Original_headingId) {
            return this.Update(pageId, headingId, headingText, Cosine, SelectedRow, Original_headingCosineID, Original_pageId, Original_headingId, Original_headingCosineID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HeadingModifiedTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadingModifiedTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HeadingModified";
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingText", "HeadingText");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HeadingModified] WHERE (([HeadingId] = @Original_HeadingId) AN" +
                "D ([WebPageId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[HeadingModified] ([WebPageId], [HeadingText], [VectorTermLength]) VALUES (@WebPageId, @HeadingText, @VectorTermLength);
SELECT HeadingId, WebPageId, HeadingText, VectorTermLength FROM HeadingModified WHERE (HeadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[HeadingModified] SET [WebPageId] = @WebPageId, [HeadingText] = @HeadingText, [VectorTermLength] = @VectorTermLength WHERE (([HeadingId] = @Original_HeadingId) AND ([WebPageId] = @Original_WebPageId));
SELECT HeadingId, WebPageId, HeadingText, VectorTermLength FROM HeadingModified WHERE (HeadingId = @HeadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT HeadingId, WebPageId, HeadingText, VectorTermLength FROM dbo.HeadingModifi" +
                "ed";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.HeadingModifiedDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.HeadingModifiedDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.HeadingModifiedDataTable dataTable = new InfoArchDataSet.HeadingModifiedDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.HeadingModifiedDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HeadingModified");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_HeadingId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string HeadingText, string VectorTermLength) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((HeadingText == null)) {
                throw new global::System.ArgumentNullException("HeadingText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(HeadingText));
            }
            if ((VectorTermLength == null)) {
                throw new global::System.ArgumentNullException("VectorTermLength");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VectorTermLength));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string HeadingText, string VectorTermLength, int Original_HeadingId, int Original_WebPageId, int HeadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((HeadingText == null)) {
                throw new global::System.ArgumentNullException("HeadingText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(HeadingText));
            }
            if ((VectorTermLength == null)) {
                throw new global::System.ArgumentNullException("VectorTermLength");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VectorTermLength));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(HeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string HeadingText, string VectorTermLength, int Original_HeadingId, int Original_WebPageId) {
            return this.Update(WebPageId, HeadingText, VectorTermLength, Original_HeadingId, Original_WebPageId, Original_HeadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HeadingPathAdequacy_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadingPathAdequacy_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HeadingPathAdequacy_Cosine";
            tableMapping.ColumnMappings.Add("headingPathAdequacyCosineID", "headingPathAdequacyCosineID");
            tableMapping.ColumnMappings.Add("pAString", "pAString");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("headingId", "headingId");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HeadingPathAdequacy_Cosine] WHERE (([headingPathAdequacyCosine" +
                "ID] = @Original_headingPathAdequacyCosineID) AND ([pageId] = @Original_pageId) A" +
                "ND ([headingId] = @Original_headingId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingPathAdequacyCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[HeadingPathAdequacy_Cosine] ([pAString], [pageId], [headingId], [Cosine]) VALUES (@pAString, @pageId, @headingId, @Cosine);
SELECT headingPathAdequacyCosineID, pAString, pageId, headingId, Cosine FROM HeadingPathAdequacy_Cosine WHERE (headingPathAdequacyCosineID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pAString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pAString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[HeadingPathAdequacy_Cosine] SET [pAString] = @pAString, [pageId] = @pageId, [headingId] = @headingId, [Cosine] = @Cosine WHERE (([headingPathAdequacyCosineID] = @Original_headingPathAdequacyCosineID) AND ([pageId] = @Original_pageId) AND ([headingId] = @Original_headingId));
SELECT headingPathAdequacyCosineID, pAString, pageId, headingId, Cosine FROM HeadingPathAdequacy_Cosine WHERE (headingPathAdequacyCosineID = @headingPathAdequacyCosineID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pAString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pAString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingPathAdequacyCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "headingPathAdequacyCosineID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT headingPathAdequacyCosineID, pAString, pageId, headingId, Cosine FROM dbo." +
                "HeadingPathAdequacy_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.HeadingPathAdequacy_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.HeadingPathAdequacy_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.HeadingPathAdequacy_CosineDataTable dataTable = new InfoArchDataSet.HeadingPathAdequacy_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.HeadingPathAdequacy_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HeadingPathAdequacy_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_headingPathAdequacyCosineID, int Original_pageId, int Original_headingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_headingPathAdequacyCosineID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_headingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string pAString, int pageId, int headingId, string Cosine) {
            if ((pAString == null)) {
                throw new global::System.ArgumentNullException("pAString");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(pAString));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(pageId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(headingId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string pAString, int pageId, int headingId, string Cosine, int Original_headingPathAdequacyCosineID, int Original_pageId, int Original_headingId, int headingPathAdequacyCosineID) {
            if ((pAString == null)) {
                throw new global::System.ArgumentNullException("pAString");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(pAString));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(pageId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(headingId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Cosine));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_headingPathAdequacyCosineID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_pageId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_headingId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(headingPathAdequacyCosineID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string pAString, int pageId, int headingId, string Cosine, int Original_headingPathAdequacyCosineID, int Original_pageId, int Original_headingId) {
            return this.Update(pAString, pageId, headingId, Cosine, Original_headingPathAdequacyCosineID, Original_pageId, Original_headingId, Original_headingPathAdequacyCosineID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HeadingTUBSTVLTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadingTUBSTVLTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HeadingTUBSTVL";
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingText", "HeadingText");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HeadingTUBSTVL] ([WebPageId], [HeadingText], [VectorTermLength" +
                "]) VALUES (@WebPageId, @HeadingText, @VectorTermLength)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT HeadingId, WebPageId, HeadingText, VectorTermLength FROM dbo.HeadingTUBSTV" +
                "L";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.HeadingTUBSTVLDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.HeadingTUBSTVLDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.HeadingTUBSTVLDataTable dataTable = new InfoArchDataSet.HeadingTUBSTVLDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.HeadingTUBSTVLDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HeadingTUBSTVL");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string HeadingText, string VectorTermLength) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((HeadingText == null)) {
                throw new global::System.ArgumentNullException("HeadingText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(HeadingText));
            }
            if ((VectorTermLength == null)) {
                throw new global::System.ArgumentNullException("VectorTermLength");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VectorTermLength));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HeadingvsHeadinginSamePageCosinesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadingvsHeadinginSamePageCosinesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HeadingvsHeadinginSamePageCosines";
            tableMapping.ColumnMappings.Add("headingvsheadingId", "headingvsheadingId");
            tableMapping.ColumnMappings.Add("WebpageId", "WebpageId");
            tableMapping.ColumnMappings.Add("HeadingXId", "HeadingXId");
            tableMapping.ColumnMappings.Add("HeadingYId", "HeadingYId");
            tableMapping.ColumnMappings.Add("CosineValueHeadingvsHeading", "CosineValueHeadingvsHeading");
            tableMapping.ColumnMappings.Add("HeadingXLinkText", "HeadingXLinkText");
            tableMapping.ColumnMappings.Add("HeadingYLInkText", "HeadingYLInkText");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HeadingvsHeadinginSamePageCosines] WHERE (([headingvsheadingId" +
                "] = @Original_headingvsheadingId) AND ([WebpageId] = @Original_WebpageId) AND ([" +
                "HeadingXId] = @Original_HeadingXId) AND ([HeadingYId] = @Original_HeadingYId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingvsheadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingvsheadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[HeadingvsHeadinginSamePageCosines] ([WebpageId], [HeadingXId], [HeadingYId], [CosineValueHeadingvsHeading], [HeadingXLinkText], [HeadingYLInkText]) VALUES (@WebpageId, @HeadingXId, @HeadingYId, @CosineValueHeadingvsHeading, @HeadingXLinkText, @HeadingYLInkText);
SELECT headingvsheadingId, WebpageId, HeadingXId, HeadingYId, CosineValueHeadingvsHeading, HeadingXLinkText, HeadingYLInkText FROM HeadingvsHeadinginSamePageCosines WHERE (headingvsheadingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueHeadingvsHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueHeadingvsHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingXLinkText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXLinkText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingYLInkText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYLInkText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[HeadingvsHeadinginSamePageCosines] SET [WebpageId] = @WebpageId, [HeadingXId] = @HeadingXId, [HeadingYId] = @HeadingYId, [CosineValueHeadingvsHeading] = @CosineValueHeadingvsHeading, [HeadingXLinkText] = @HeadingXLinkText, [HeadingYLInkText] = @HeadingYLInkText WHERE (([headingvsheadingId] = @Original_headingvsheadingId) AND ([WebpageId] = @Original_WebpageId) AND ([HeadingXId] = @Original_HeadingXId) AND ([HeadingYId] = @Original_HeadingYId));
SELECT headingvsheadingId, WebpageId, HeadingXId, HeadingYId, CosineValueHeadingvsHeading, HeadingXLinkText, HeadingYLInkText FROM HeadingvsHeadinginSamePageCosines WHERE (headingvsheadingId = @headingvsheadingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueHeadingvsHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueHeadingvsHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingXLinkText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXLinkText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingYLInkText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYLInkText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingvsheadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingvsheadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingvsheadingId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "headingvsheadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT headingvsheadingId, WebpageId, HeadingXId, HeadingYId, CosineValueHeadingv" +
                "sHeading, HeadingXLinkText, HeadingYLInkText FROM dbo.HeadingvsHeadinginSamePage" +
                "Cosines";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.HeadingvsHeadinginSamePageCosinesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.HeadingvsHeadinginSamePageCosinesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.HeadingvsHeadinginSamePageCosinesDataTable dataTable = new InfoArchDataSet.HeadingvsHeadinginSamePageCosinesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.HeadingvsHeadinginSamePageCosinesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HeadingvsHeadinginSamePageCosines");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_headingvsheadingId, int Original_WebpageId, int Original_HeadingXId, int Original_HeadingYId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_headingvsheadingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebpageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingXId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_HeadingYId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebpageId, int HeadingXId, int HeadingYId, string CosineValueHeadingvsHeading, string HeadingXLinkText, string HeadingYLInkText) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebpageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingXId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(HeadingYId));
            if ((CosineValueHeadingvsHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueHeadingvsHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueHeadingvsHeading));
            }
            if ((HeadingXLinkText == null)) {
                throw new global::System.ArgumentNullException("HeadingXLinkText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(HeadingXLinkText));
            }
            if ((HeadingYLInkText == null)) {
                throw new global::System.ArgumentNullException("HeadingYLInkText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(HeadingYLInkText));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebpageId, int HeadingXId, int HeadingYId, string CosineValueHeadingvsHeading, string HeadingXLinkText, string HeadingYLInkText, int Original_headingvsheadingId, int Original_WebpageId, int Original_HeadingXId, int Original_HeadingYId, int headingvsheadingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebpageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingXId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(HeadingYId));
            if ((CosineValueHeadingvsHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueHeadingvsHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CosineValueHeadingvsHeading));
            }
            if ((HeadingXLinkText == null)) {
                throw new global::System.ArgumentNullException("HeadingXLinkText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(HeadingXLinkText));
            }
            if ((HeadingYLInkText == null)) {
                throw new global::System.ArgumentNullException("HeadingYLInkText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(HeadingYLInkText));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_headingvsheadingId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_WebpageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_HeadingXId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_HeadingYId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(headingvsheadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebpageId, int HeadingXId, int HeadingYId, string CosineValueHeadingvsHeading, string HeadingXLinkText, string HeadingYLInkText, int Original_headingvsheadingId, int Original_WebpageId, int Original_HeadingXId, int Original_HeadingYId) {
            return this.Update(WebpageId, HeadingXId, HeadingYId, CosineValueHeadingvsHeading, HeadingXLinkText, HeadingYLInkText, Original_headingvsheadingId, Original_WebpageId, Original_HeadingXId, Original_HeadingYId, Original_headingvsheadingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HeadingvsHeadinginSamePageCosinesTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HeadingvsHeadinginSamePageCosinesTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HeadingvsHeadinginSamePageCosinesTUBS";
            tableMapping.ColumnMappings.Add("headingvsheadingId", "headingvsheadingId");
            tableMapping.ColumnMappings.Add("WebpageId", "WebpageId");
            tableMapping.ColumnMappings.Add("HeadingXId", "HeadingXId");
            tableMapping.ColumnMappings.Add("HeadingYId", "HeadingYId");
            tableMapping.ColumnMappings.Add("CosineValueHeadingvsHeading", "CosineValueHeadingvsHeading");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HeadingvsHeadinginSamePageCosinesTUBS] ([WebpageId], [HeadingX" +
                "Id], [HeadingYId], [CosineValueHeadingvsHeading]) VALUES (@WebpageId, @HeadingXI" +
                "d, @HeadingYId, @CosineValueHeadingvsHeading)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebpageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebpageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueHeadingvsHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueHeadingvsHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT headingvsheadingId, WebpageId, HeadingXId, HeadingYId, CosineValueHeadingv" +
                "sHeading FROM dbo.HeadingvsHeadinginSamePageCosinesTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.HeadingvsHeadinginSamePageCosinesTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.HeadingvsHeadinginSamePageCosinesTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.HeadingvsHeadinginSamePageCosinesTUBSDataTable dataTable = new InfoArchDataSet.HeadingvsHeadinginSamePageCosinesTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.HeadingvsHeadinginSamePageCosinesTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HeadingvsHeadinginSamePageCosinesTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebpageId, int HeadingXId, int HeadingYId, string CosineValueHeadingvsHeading) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebpageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingXId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(HeadingYId));
            if ((CosineValueHeadingvsHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueHeadingvsHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueHeadingvsHeading));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkLinkTemplateOfLinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkLinkTemplateOfLinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkLinkTemplateOfLinks";
            tableMapping.ColumnMappings.Add("LinkLinkTemplateOfLinksId", "LinkLinkTemplateOfLinksId");
            tableMapping.ColumnMappings.Add("LinkXId", "LinkXId");
            tableMapping.ColumnMappings.Add("LinkYId", "LinkYId");
            tableMapping.ColumnMappings.Add("CosineLinkLinkTemplateOfLinks", "CosineLinkLinkTemplateOfLinks");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkLinkTemplateOfLinks] WHERE (([LinkLinkTemplateOfLinksId] =" +
                " @Original_LinkLinkTemplateOfLinksId) AND ([LinkXId] = @Original_LinkXId) AND ([" +
                "LinkYId] = @Original_LinkYId) AND ([WebPageId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkLinkTemplateOfLinksId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkLinkTemplateOfLinksId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkLinkTemplateOfLinks] ([LinkXId], [LinkYId], [CosineLinkLinkTemplateOfLinks], [WebPageId]) VALUES (@LinkXId, @LinkYId, @CosineLinkLinkTemplateOfLinks, @WebPageId);
SELECT LinkLinkTemplateOfLinksId, LinkXId, LinkYId, CosineLinkLinkTemplateOfLinks, WebPageId FROM LinkLinkTemplateOfLinks WHERE (LinkLinkTemplateOfLinksId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineLinkLinkTemplateOfLinks", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkTemplateOfLinks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkLinkTemplateOfLinks] SET [LinkXId] = @LinkXId, [LinkYId] = @LinkYId, [CosineLinkLinkTemplateOfLinks] = @CosineLinkLinkTemplateOfLinks, [WebPageId] = @WebPageId WHERE (([LinkLinkTemplateOfLinksId] = @Original_LinkLinkTemplateOfLinksId) AND ([LinkXId] = @Original_LinkXId) AND ([LinkYId] = @Original_LinkYId) AND ([WebPageId] = @Original_WebPageId));
SELECT LinkLinkTemplateOfLinksId, LinkXId, LinkYId, CosineLinkLinkTemplateOfLinks, WebPageId FROM LinkLinkTemplateOfLinks WHERE (LinkLinkTemplateOfLinksId = @LinkLinkTemplateOfLinksId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineLinkLinkTemplateOfLinks", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineLinkLinkTemplateOfLinks", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkLinkTemplateOfLinksId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkLinkTemplateOfLinksId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkXId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkXId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkYId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkYId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkLinkTemplateOfLinksId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkLinkTemplateOfLinksId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkLinkTemplateOfLinksId, LinkXId, LinkYId, CosineLinkLinkTemplateOfLinks" +
                ", WebPageId FROM dbo.LinkLinkTemplateOfLinks";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkLinkTemplateOfLinksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkLinkTemplateOfLinksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkLinkTemplateOfLinksDataTable dataTable = new InfoArchDataSet.LinkLinkTemplateOfLinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkLinkTemplateOfLinksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkLinkTemplateOfLinks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkLinkTemplateOfLinksId, int Original_LinkXId, int Original_LinkYId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkLinkTemplateOfLinksId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_LinkXId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LinkYId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LinkXId, int LinkYId, string CosineLinkLinkTemplateOfLinks, int WebPageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LinkXId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LinkYId));
            if ((CosineLinkLinkTemplateOfLinks == null)) {
                throw new global::System.ArgumentNullException("CosineLinkLinkTemplateOfLinks");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CosineLinkLinkTemplateOfLinks));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LinkXId, int LinkYId, string CosineLinkLinkTemplateOfLinks, int WebPageId, int Original_LinkLinkTemplateOfLinksId, int Original_LinkXId, int Original_LinkYId, int Original_WebPageId, int LinkLinkTemplateOfLinksId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LinkXId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(LinkYId));
            if ((CosineLinkLinkTemplateOfLinks == null)) {
                throw new global::System.ArgumentNullException("CosineLinkLinkTemplateOfLinks");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CosineLinkLinkTemplateOfLinks));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_LinkLinkTemplateOfLinksId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_LinkXId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_LinkYId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(LinkLinkTemplateOfLinksId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LinkXId, int LinkYId, string CosineLinkLinkTemplateOfLinks, int WebPageId, int Original_LinkLinkTemplateOfLinksId, int Original_LinkXId, int Original_LinkYId, int Original_WebPageId) {
            return this.Update(LinkXId, LinkYId, CosineLinkLinkTemplateOfLinks, WebPageId, Original_LinkLinkTemplateOfLinksId, Original_LinkXId, Original_LinkYId, Original_WebPageId, Original_LinkLinkTemplateOfLinksId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkUnderHeading_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkUnderHeading_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkUnderHeading_Cosine";
            tableMapping.ColumnMappings.Add("linkUnderHeadingCosineID", "linkUnderHeadingCosineID");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("headingId", "headingId");
            tableMapping.ColumnMappings.Add("headingText", "headingText");
            tableMapping.ColumnMappings.Add("linkId", "linkId");
            tableMapping.ColumnMappings.Add("LinkName", "LinkName");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LinkUnderHeading_Cosine] WHERE (([linkUnderHeadingCosineID] = @Original_linkUnderHeadingCosineID) AND ([pageId] = @Original_pageId) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ([headingId] = @Original_headingId) AND ([linkId] = @Original_linkId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkUnderHeadingCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkUnderHeadingCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkUnderHeading_Cosine] ([pageId], [ToPageId], [headingId], [headingText], [linkId], [LinkName], [Cosine]) VALUES (@pageId, @ToPageId, @headingId, @headingText, @linkId, @LinkName, @Cosine);
SELECT linkUnderHeadingCosineID, pageId, ToPageId, headingId, headingText, linkId, LinkName, Cosine FROM LinkUnderHeading_Cosine WHERE (linkUnderHeadingCosineID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkUnderHeading_Cosine] SET [pageId] = @pageId, [ToPageId] = @ToPageId, [headingId] = @headingId, [headingText] = @headingText, [linkId] = @linkId, [LinkName] = @LinkName, [Cosine] = @Cosine WHERE (([linkUnderHeadingCosineID] = @Original_linkUnderHeadingCosineID) AND ([pageId] = @Original_pageId) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ([headingId] = @Original_headingId) AND ([linkId] = @Original_linkId));
SELECT linkUnderHeadingCosineID, pageId, ToPageId, headingId, headingText, linkId, LinkName, Cosine FROM LinkUnderHeading_Cosine WHERE (linkUnderHeadingCosineID = @linkUnderHeadingCosineID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkUnderHeadingCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkUnderHeadingCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkUnderHeadingCosineID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "linkUnderHeadingCosineID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT linkUnderHeadingCosineID, pageId, ToPageId, headingId, headingText, linkId" +
                ", LinkName, Cosine FROM dbo.LinkUnderHeading_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkUnderHeading_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkUnderHeading_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkUnderHeading_CosineDataTable dataTable = new InfoArchDataSet.LinkUnderHeading_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkUnderHeading_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkUnderHeading_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_linkUnderHeadingCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_headingId, int Original_linkId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_linkUnderHeadingCosineID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_headingId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_linkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId, global::System.Nullable<int> ToPageId, int headingId, string headingText, int linkId, string LinkName, string Cosine) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            if ((ToPageId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(headingId));
            if ((headingText == null)) {
                throw new global::System.ArgumentNullException("headingText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(headingText));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(linkId));
            if ((LinkName == null)) {
                throw new global::System.ArgumentNullException("LinkName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LinkName));
            }
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, global::System.Nullable<int> ToPageId, int headingId, string headingText, int linkId, string LinkName, string Cosine, int Original_linkUnderHeadingCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_headingId, int Original_linkId, int linkUnderHeadingCosineID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pageId));
            if ((ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(headingId));
            if ((headingText == null)) {
                throw new global::System.ArgumentNullException("headingText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(headingText));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(linkId));
            if ((LinkName == null)) {
                throw new global::System.ArgumentNullException("LinkName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(LinkName));
            }
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Cosine));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_linkUnderHeadingCosineID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_pageId));
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_headingId));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_linkId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(linkUnderHeadingCosineID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, global::System.Nullable<int> ToPageId, int headingId, string headingText, int linkId, string LinkName, string Cosine, int Original_linkUnderHeadingCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_headingId, int Original_linkId) {
            return this.Update(pageId, ToPageId, headingId, headingText, linkId, LinkName, Cosine, Original_linkUnderHeadingCosineID, Original_pageId, Original_ToPageId, Original_headingId, Original_linkId, Original_linkUnderHeadingCosineID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkUnderHeadingPathAdequacy_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkUnderHeadingPathAdequacy_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkUnderHeadingPathAdequacy_Cosine";
            tableMapping.ColumnMappings.Add("linkUnderHeadingPathAdequacyCosineID", "linkUnderHeadingPathAdequacyCosineID");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("pAString", "pAString");
            tableMapping.ColumnMappings.Add("headingId", "headingId");
            tableMapping.ColumnMappings.Add("linkId", "linkId");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LinkUnderHeadingPathAdequacy_Cosine] WHERE (([linkUnderHeadingPathAdequacyCosineID] = @Original_linkUnderHeadingPathAdequacyCosineID) AND ([pageId] = @Original_pageId) AND ([ToPageId] = @Original_ToPageId) AND ([headingId] = @Original_headingId) AND ([linkId] = @Original_linkId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkUnderHeadingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkUnderHeadingPathAdequacyCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkUnderHeadingPathAdequacy_Cosine] ([pageId], [ToPageId], [pAString], [headingId], [linkId], [Cosine]) VALUES (@pageId, @ToPageId, @pAString, @headingId, @linkId, @Cosine);
SELECT linkUnderHeadingPathAdequacyCosineID, pageId, ToPageId, pAString, headingId, linkId, Cosine FROM LinkUnderHeadingPathAdequacy_Cosine WHERE (linkUnderHeadingPathAdequacyCosineID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pAString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pAString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkUnderHeadingPathAdequacy_Cosine] SET [pageId] = @pageId, [ToPageId] = @ToPageId, [pAString] = @pAString, [headingId] = @headingId, [linkId] = @linkId, [Cosine] = @Cosine WHERE (([linkUnderHeadingPathAdequacyCosineID] = @Original_linkUnderHeadingPathAdequacyCosineID) AND ([pageId] = @Original_pageId) AND ([ToPageId] = @Original_ToPageId) AND ([headingId] = @Original_headingId) AND ([linkId] = @Original_linkId));
SELECT linkUnderHeadingPathAdequacyCosineID, pageId, ToPageId, pAString, headingId, linkId, Cosine FROM LinkUnderHeadingPathAdequacy_Cosine WHERE (linkUnderHeadingPathAdequacyCosineID = @linkUnderHeadingPathAdequacyCosineID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pAString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pAString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkUnderHeadingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkUnderHeadingPathAdequacyCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkUnderHeadingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "linkUnderHeadingPathAdequacyCosineID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT linkUnderHeadingPathAdequacyCosineID, pageId, ToPageId, pAString, headingI" +
                "d, linkId, Cosine FROM dbo.LinkUnderHeadingPathAdequacy_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkUnderHeadingPathAdequacy_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkUnderHeadingPathAdequacy_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkUnderHeadingPathAdequacy_CosineDataTable dataTable = new InfoArchDataSet.LinkUnderHeadingPathAdequacy_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkUnderHeadingPathAdequacy_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkUnderHeadingPathAdequacy_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_linkUnderHeadingPathAdequacyCosineID, int Original_pageId, int Original_ToPageId, int Original_headingId, int Original_linkId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_linkUnderHeadingPathAdequacyCosineID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ToPageId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_headingId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_linkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId, int ToPageId, string pAString, int headingId, int linkId, string Cosine) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToPageId));
            if ((pAString == null)) {
                throw new global::System.ArgumentNullException("pAString");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(pAString));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(headingId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(linkId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, int ToPageId, string pAString, int headingId, int linkId, string Cosine, int Original_linkUnderHeadingPathAdequacyCosineID, int Original_pageId, int Original_ToPageId, int Original_headingId, int Original_linkId, int linkUnderHeadingPathAdequacyCosineID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToPageId));
            if ((pAString == null)) {
                throw new global::System.ArgumentNullException("pAString");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(pAString));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(headingId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(linkId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Cosine));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_linkUnderHeadingPathAdequacyCosineID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_pageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ToPageId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_headingId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_linkId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(linkUnderHeadingPathAdequacyCosineID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, int ToPageId, string pAString, int headingId, int linkId, string Cosine, int Original_linkUnderHeadingPathAdequacyCosineID, int Original_pageId, int Original_ToPageId, int Original_headingId, int Original_linkId) {
            return this.Update(pageId, ToPageId, pAString, headingId, linkId, Cosine, Original_linkUnderHeadingPathAdequacyCosineID, Original_pageId, Original_ToPageId, Original_headingId, Original_linkId, Original_linkUnderHeadingPathAdequacyCosineID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithHeading";
            tableMapping.ColumnMappings.Add("LinkId", "LinkId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            tableMapping.ColumnMappings.Add("CosineValueLinkHeading", "CosineValueLinkHeading");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkWithHeading] WHERE (([LinkId] = @Original_LinkId) AND ([We" +
                "bPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId) AND ([To" +
                "PageId] = @Original_ToPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithHeading] ([WebPageId], [HeadingId], [LinkAnchorText], [LinkUrl], [ToPageId], [VectorTermLength], [CosineValueLinkHeading]) VALUES (@WebPageId, @HeadingId, @LinkAnchorText, @LinkUrl, @ToPageId, @VectorTermLength, @CosineValueLinkHeading);
SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading FROM LinkWithHeading WHERE (LinkId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithHeading] SET [WebPageId] = @WebPageId, [HeadingId] = @HeadingId, [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [VectorTermLength] = @VectorTermLength, [CosineValueLinkHeading] = @CosineValueLinkHeading WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId) AND ([ToPageId] = @Original_ToPageId));
SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading FROM LinkWithHeading WHERE (LinkId = @LinkId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTer" +
                "mLength, CosineValueLinkHeading FROM dbo.LinkWithHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithHeadingDataTable dataTable = new InfoArchDataSet.LinkWithHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ToPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((LinkAnchorText == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VectorTermLength));
            }
            if ((CosineValueLinkHeading == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CosineValueLinkHeading));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, int LinkId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((LinkAnchorText == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VectorTermLength));
            }
            if ((CosineValueLinkHeading == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CosineValueLinkHeading));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_LinkId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ToPageId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(LinkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId) {
            return this.Update(WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Original_LinkId, Original_WebPageId, Original_HeadingId, Original_ToPageId, Original_LinkId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithHeadingTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithHeadingTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithHeadingTUBS";
            tableMapping.ColumnMappings.Add("LinkId", "LinkId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            tableMapping.ColumnMappings.Add("CosineValueLinkHeading", "CosineValueLinkHeading");
            tableMapping.ColumnMappings.Add("Visited", "Visited");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LinkWithHeadingTUBS] WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId) AND ([ToPageId] = @Original_ToPageId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithHeadingTUBS] ([WebPageId], [HeadingId], [LinkAnchorText], [LinkUrl], [ToPageId], [VectorTermLength], [CosineValueLinkHeading], [Visited]) VALUES (@WebPageId, @HeadingId, @LinkAnchorText, @LinkUrl, @ToPageId, @VectorTermLength, @CosineValueLinkHeading, @Visited);
SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Visited FROM LinkWithHeadingTUBS WHERE (LinkId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithHeadingTUBS] SET [WebPageId] = @WebPageId, [HeadingId] = @HeadingId, [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [VectorTermLength] = @VectorTermLength, [CosineValueLinkHeading] = @CosineValueLinkHeading, [Visited] = @Visited WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId) AND ([ToPageId] = @Original_ToPageId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)));
SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Visited FROM LinkWithHeadingTUBS WHERE (LinkId = @LinkId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTer" +
                "mLength, CosineValueLinkHeading, Visited FROM dbo.LinkWithHeadingTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithHeadingTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithHeadingTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithHeadingTUBSDataTable dataTable = new InfoArchDataSet.LinkWithHeadingTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithHeadingTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithHeadingTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, global::System.Nullable<bool> Visited) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((LinkAnchorText == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VectorTermLength));
            }
            if ((CosineValueLinkHeading == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CosineValueLinkHeading));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited, int LinkId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((LinkAnchorText == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VectorTermLength));
            }
            if ((CosineValueLinkHeading == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CosineValueLinkHeading));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_LinkId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(LinkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            return this.Update(WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Visited, Original_LinkId, Original_WebPageId, Original_HeadingId, Original_ToPageId, Original_Visited, Original_LinkId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithHeadingTUBSModifiedTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithHeadingTUBSModifiedTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithHeadingTUBSModified";
            tableMapping.ColumnMappings.Add("LinkId", "LinkId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            tableMapping.ColumnMappings.Add("CosineValueLinkHeading", "CosineValueLinkHeading");
            tableMapping.ColumnMappings.Add("Visited", "Visited");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LinkWithHeadingTUBSModified] WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId) AND ([ToPageId] = @Original_ToPageId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithHeadingTUBSModified] ([WebPageId], [HeadingId], [LinkAnchorText], [LinkUrl], [ToPageId], [VectorTermLength], [CosineValueLinkHeading], [Visited]) VALUES (@WebPageId, @HeadingId, @LinkAnchorText, @LinkUrl, @ToPageId, @VectorTermLength, @CosineValueLinkHeading, @Visited);
SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Visited FROM LinkWithHeadingTUBSModified WHERE (LinkId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithHeadingTUBSModified] SET [WebPageId] = @WebPageId, [HeadingId] = @HeadingId, [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [VectorTermLength] = @VectorTermLength, [CosineValueLinkHeading] = @CosineValueLinkHeading, [Visited] = @Visited WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId) AND ([ToPageId] = @Original_ToPageId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)));
SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Visited FROM LinkWithHeadingTUBSModified WHERE (LinkId = @LinkId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueLinkHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueLinkHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkId, WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTer" +
                "mLength, CosineValueLinkHeading, Visited FROM dbo.LinkWithHeadingTUBSModified";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithHeadingTUBSModifiedDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithHeadingTUBSModifiedDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithHeadingTUBSModifiedDataTable dataTable = new InfoArchDataSet.LinkWithHeadingTUBSModifiedDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithHeadingTUBSModifiedDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithHeadingTUBSModified");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, global::System.Nullable<bool> Visited) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((LinkAnchorText == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VectorTermLength));
            }
            if ((CosineValueLinkHeading == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CosineValueLinkHeading));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited, int LinkId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((LinkAnchorText == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VectorTermLength));
            }
            if ((CosineValueLinkHeading == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CosineValueLinkHeading));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_LinkId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(LinkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, string CosineValueLinkHeading, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_HeadingId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            return this.Update(WebPageId, HeadingId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, CosineValueLinkHeading, Visited, Original_LinkId, Original_WebPageId, Original_HeadingId, Original_ToPageId, Original_Visited, Original_LinkId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeadingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeadingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeading";
            tableMapping.ColumnMappings.Add("LinkId", "LinkId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkWithoutHeading] WHERE (([LinkId] = @Original_LinkId) AND (" +
                "[WebPageId] = @Original_WebPageId) AND ([ToPageId] = @Original_ToPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeading] ([WebPageId], [LinkAnchorText], [LinkUrl], [ToPageId], [VectorTermLength]) VALUES (@WebPageId, @LinkAnchorText, @LinkUrl, @ToPageId, @VectorTermLength);
SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength FROM LinkWithoutHeading WHERE (LinkId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeading] SET [WebPageId] = @WebPageId, [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [VectorTermLength] = @VectorTermLength WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([ToPageId] = @Original_ToPageId));
SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength FROM LinkWithoutHeading WHERE (LinkId = @LinkId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength FRO" +
                "M dbo.LinkWithoutHeading";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeadingDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeadingDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeadingDataTable dataTable = new InfoArchDataSet.LinkWithoutHeadingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeadingDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeading");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkId, int Original_WebPageId, int Original_ToPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ToPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(VectorTermLength));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, int Original_LinkId, int Original_WebPageId, int Original_ToPageId, int LinkId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(VectorTermLength));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_LinkId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ToPageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(LinkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, int Original_LinkId, int Original_WebPageId, int Original_ToPageId) {
            return this.Update(WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Original_LinkId, Original_WebPageId, Original_ToPageId, Original_LinkId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeading_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeading_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeading_Cosine";
            tableMapping.ColumnMappings.Add("linkWithoutHeadingCosineID", "linkWithoutHeadingCosineID");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("linkId", "linkId");
            tableMapping.ColumnMappings.Add("LinkName", "LinkName");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LinkWithoutHeading_Cosine] WHERE (([linkWithoutHeadingCosineID] = @Original_linkWithoutHeadingCosineID) AND ([pageId] = @Original_pageId) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ([linkId] = @Original_linkId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkWithoutHeadingCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkWithoutHeadingCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeading_Cosine] ([pageId], [ToPageId], [linkId], [LinkName], [Cosine]) VALUES (@pageId, @ToPageId, @linkId, @LinkName, @Cosine);
SELECT linkWithoutHeadingCosineID, pageId, ToPageId, linkId, LinkName, Cosine FROM LinkWithoutHeading_Cosine WHERE (linkWithoutHeadingCosineID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeading_Cosine] SET [pageId] = @pageId, [ToPageId] = @ToPageId, [linkId] = @linkId, [LinkName] = @LinkName, [Cosine] = @Cosine WHERE (([linkWithoutHeadingCosineID] = @Original_linkWithoutHeadingCosineID) AND ([pageId] = @Original_pageId) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ([linkId] = @Original_linkId));
SELECT linkWithoutHeadingCosineID, pageId, ToPageId, linkId, LinkName, Cosine FROM LinkWithoutHeading_Cosine WHERE (linkWithoutHeadingCosineID = @linkWithoutHeadingCosineID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkWithoutHeadingCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkWithoutHeadingCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkWithoutHeadingCosineID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "linkWithoutHeadingCosineID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT linkWithoutHeadingCosineID, pageId, ToPageId, linkId, LinkName, Cosine FRO" +
                "M dbo.LinkWithoutHeading_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeading_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeading_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeading_CosineDataTable dataTable = new InfoArchDataSet.LinkWithoutHeading_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeading_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeading_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_linkWithoutHeadingCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_linkId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_linkWithoutHeadingCosineID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_linkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId, global::System.Nullable<int> ToPageId, int linkId, string LinkName, string Cosine) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            if ((ToPageId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(linkId));
            if ((LinkName == null)) {
                throw new global::System.ArgumentNullException("LinkName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkName));
            }
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, global::System.Nullable<int> ToPageId, int linkId, string LinkName, string Cosine, int Original_linkWithoutHeadingCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_linkId, int linkWithoutHeadingCosineID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pageId));
            if ((ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(linkId));
            if ((LinkName == null)) {
                throw new global::System.ArgumentNullException("LinkName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkName));
            }
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Cosine));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_linkWithoutHeadingCosineID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_pageId));
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_linkId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(linkWithoutHeadingCosineID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, global::System.Nullable<int> ToPageId, int linkId, string LinkName, string Cosine, int Original_linkWithoutHeadingCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_linkId) {
            return this.Update(pageId, ToPageId, linkId, LinkName, Cosine, Original_linkWithoutHeadingCosineID, Original_pageId, Original_ToPageId, Original_linkId, Original_linkWithoutHeadingCosineID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeadingPathAdequacy_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeadingPathAdequacy_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeadingPathAdequacy_Cosine";
            tableMapping.ColumnMappings.Add("linkWithoutHeadingPathAdequacyCosineID", "linkWithoutHeadingPathAdequacyCosineID");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("pAString", "pAString");
            tableMapping.ColumnMappings.Add("linkId", "linkId");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LinkWithoutHeadingPathAdequacy_Cosine] WHERE (([linkWithoutHeadingPathAdequacyCosineID] = @Original_linkWithoutHeadingPathAdequacyCosineID) AND ([pageId] = @Original_pageId) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ([linkId] = @Original_linkId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkWithoutHeadingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkWithoutHeadingPathAdequacyCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeadingPathAdequacy_Cosine] ([pageId], [ToPageId], [pAString], [linkId], [Cosine]) VALUES (@pageId, @ToPageId, @pAString, @linkId, @Cosine);
SELECT linkWithoutHeadingPathAdequacyCosineID, pageId, ToPageId, pAString, linkId, Cosine FROM LinkWithoutHeadingPathAdequacy_Cosine WHERE (linkWithoutHeadingPathAdequacyCosineID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pAString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pAString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeadingPathAdequacy_Cosine] SET [pageId] = @pageId, [ToPageId] = @ToPageId, [pAString] = @pAString, [linkId] = @linkId, [Cosine] = @Cosine WHERE (([linkWithoutHeadingPathAdequacyCosineID] = @Original_linkWithoutHeadingPathAdequacyCosineID) AND ([pageId] = @Original_pageId) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ([linkId] = @Original_linkId));
SELECT linkWithoutHeadingPathAdequacyCosineID, pageId, ToPageId, pAString, linkId, Cosine FROM LinkWithoutHeadingPathAdequacy_Cosine WHERE (linkWithoutHeadingPathAdequacyCosineID = @linkWithoutHeadingPathAdequacyCosineID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pAString", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pAString", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkWithoutHeadingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkWithoutHeadingPathAdequacyCosineID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkWithoutHeadingPathAdequacyCosineID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "linkWithoutHeadingPathAdequacyCosineID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT linkWithoutHeadingPathAdequacyCosineID, pageId, ToPageId, pAString, linkId" +
                ", Cosine FROM dbo.LinkWithoutHeadingPathAdequacy_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeadingPathAdequacy_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeadingPathAdequacy_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeadingPathAdequacy_CosineDataTable dataTable = new InfoArchDataSet.LinkWithoutHeadingPathAdequacy_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeadingPathAdequacy_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeadingPathAdequacy_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_linkWithoutHeadingPathAdequacyCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_linkId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_linkWithoutHeadingPathAdequacyCosineID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_linkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId, global::System.Nullable<int> ToPageId, string pAString, int linkId, string Cosine) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            if ((ToPageId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((pAString == null)) {
                throw new global::System.ArgumentNullException("pAString");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(pAString));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(linkId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, global::System.Nullable<int> ToPageId, string pAString, int linkId, string Cosine, int Original_linkWithoutHeadingPathAdequacyCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_linkId, int linkWithoutHeadingPathAdequacyCosineID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pageId));
            if ((ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((pAString == null)) {
                throw new global::System.ArgumentNullException("pAString");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(pAString));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(linkId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Cosine));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_linkWithoutHeadingPathAdequacyCosineID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_pageId));
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_linkId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(linkWithoutHeadingPathAdequacyCosineID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, global::System.Nullable<int> ToPageId, string pAString, int linkId, string Cosine, int Original_linkWithoutHeadingPathAdequacyCosineID, int Original_pageId, global::System.Nullable<int> Original_ToPageId, int Original_linkId) {
            return this.Update(pageId, ToPageId, pAString, linkId, Cosine, Original_linkWithoutHeadingPathAdequacyCosineID, Original_pageId, Original_ToPageId, Original_linkId, Original_linkWithoutHeadingPathAdequacyCosineID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeadingTemplateOfLinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeadingTemplateOfLinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeadingTemplateOfLinks";
            tableMapping.ColumnMappings.Add("LinkWithoutHeadingTemplateOfLinksId", "LinkWithoutHeadingTemplateOfLinksId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("AllLinksOfTemplate", "AllLinksOfTemplate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkWithoutHeadingTemplateOfLinks] WHERE (([LinkWithoutHeading" +
                "TemplateOfLinksId] = @Original_LinkWithoutHeadingTemplateOfLinksId) AND ([WebPag" +
                "eId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkWithoutHeadingTemplateOfLinksId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkWithoutHeadingTemplateOfLinksId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeadingTemplateOfLinks] ([WebPageId], [AllLinksOfTemplate]) VALUES (@WebPageId, @AllLinksOfTemplate);
SELECT LinkWithoutHeadingTemplateOfLinksId, WebPageId, AllLinksOfTemplate FROM LinkWithoutHeadingTemplateOfLinks WHERE (LinkWithoutHeadingTemplateOfLinksId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllLinksOfTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllLinksOfTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeadingTemplateOfLinks] SET [WebPageId] = @WebPageId, [AllLinksOfTemplate] = @AllLinksOfTemplate WHERE (([LinkWithoutHeadingTemplateOfLinksId] = @Original_LinkWithoutHeadingTemplateOfLinksId) AND ([WebPageId] = @Original_WebPageId));
SELECT LinkWithoutHeadingTemplateOfLinksId, WebPageId, AllLinksOfTemplate FROM LinkWithoutHeadingTemplateOfLinks WHERE (LinkWithoutHeadingTemplateOfLinksId = @LinkWithoutHeadingTemplateOfLinksId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllLinksOfTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllLinksOfTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkWithoutHeadingTemplateOfLinksId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkWithoutHeadingTemplateOfLinksId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkWithoutHeadingTemplateOfLinksId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkWithoutHeadingTemplateOfLinksId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkWithoutHeadingTemplateOfLinksId, WebPageId, AllLinksOfTemplate FROM db" +
                "o.LinkWithoutHeadingTemplateOfLinks";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksDataTable dataTable = new InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeadingTemplateOfLinks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkWithoutHeadingTemplateOfLinksId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkWithoutHeadingTemplateOfLinksId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string AllLinksOfTemplate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((AllLinksOfTemplate == null)) {
                throw new global::System.ArgumentNullException("AllLinksOfTemplate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AllLinksOfTemplate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string AllLinksOfTemplate, int Original_LinkWithoutHeadingTemplateOfLinksId, int Original_WebPageId, int LinkWithoutHeadingTemplateOfLinksId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((AllLinksOfTemplate == null)) {
                throw new global::System.ArgumentNullException("AllLinksOfTemplate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AllLinksOfTemplate));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_LinkWithoutHeadingTemplateOfLinksId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(LinkWithoutHeadingTemplateOfLinksId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string AllLinksOfTemplate, int Original_LinkWithoutHeadingTemplateOfLinksId, int Original_WebPageId) {
            return this.Update(WebPageId, AllLinksOfTemplate, Original_LinkWithoutHeadingTemplateOfLinksId, Original_WebPageId, Original_LinkWithoutHeadingTemplateOfLinksId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeadingTemplateOfLinksTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeadingTemplateOfLinksTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeadingTemplateOfLinksTUBS";
            tableMapping.ColumnMappings.Add("LinkWithoutHeadingTemplateOfLinksId", "LinkWithoutHeadingTemplateOfLinksId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("AllLinksOfTemplate", "AllLinksOfTemplate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkWithoutHeadingTemplateOfLinksTUBS] WHERE (([LinkWithoutHea" +
                "dingTemplateOfLinksId] = @Original_LinkWithoutHeadingTemplateOfLinksId) AND ([We" +
                "bPageId] = @Original_WebPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkWithoutHeadingTemplateOfLinksId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkWithoutHeadingTemplateOfLinksId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeadingTemplateOfLinksTUBS] ([WebPageId], [AllLinksOfTemplate]) VALUES (@WebPageId, @AllLinksOfTemplate);
SELECT LinkWithoutHeadingTemplateOfLinksId, WebPageId, AllLinksOfTemplate FROM LinkWithoutHeadingTemplateOfLinksTUBS WHERE (LinkWithoutHeadingTemplateOfLinksId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllLinksOfTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllLinksOfTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeadingTemplateOfLinksTUBS] SET [WebPageId] = @WebPageId, [AllLinksOfTemplate] = @AllLinksOfTemplate WHERE (([LinkWithoutHeadingTemplateOfLinksId] = @Original_LinkWithoutHeadingTemplateOfLinksId) AND ([WebPageId] = @Original_WebPageId));
SELECT LinkWithoutHeadingTemplateOfLinksId, WebPageId, AllLinksOfTemplate FROM LinkWithoutHeadingTemplateOfLinksTUBS WHERE (LinkWithoutHeadingTemplateOfLinksId = @LinkWithoutHeadingTemplateOfLinksId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AllLinksOfTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AllLinksOfTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkWithoutHeadingTemplateOfLinksId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkWithoutHeadingTemplateOfLinksId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkWithoutHeadingTemplateOfLinksId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkWithoutHeadingTemplateOfLinksId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkWithoutHeadingTemplateOfLinksId, WebPageId, AllLinksOfTemplate FROM db" +
                "o.LinkWithoutHeadingTemplateOfLinksTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksTUBSDataTable dataTable = new InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeadingTemplateOfLinksTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeadingTemplateOfLinksTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkWithoutHeadingTemplateOfLinksId, int Original_WebPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkWithoutHeadingTemplateOfLinksId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string AllLinksOfTemplate) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((AllLinksOfTemplate == null)) {
                throw new global::System.ArgumentNullException("AllLinksOfTemplate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AllLinksOfTemplate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string AllLinksOfTemplate, int Original_LinkWithoutHeadingTemplateOfLinksId, int Original_WebPageId, int LinkWithoutHeadingTemplateOfLinksId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((AllLinksOfTemplate == null)) {
                throw new global::System.ArgumentNullException("AllLinksOfTemplate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AllLinksOfTemplate));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_LinkWithoutHeadingTemplateOfLinksId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(LinkWithoutHeadingTemplateOfLinksId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string AllLinksOfTemplate, int Original_LinkWithoutHeadingTemplateOfLinksId, int Original_WebPageId) {
            return this.Update(WebPageId, AllLinksOfTemplate, Original_LinkWithoutHeadingTemplateOfLinksId, Original_WebPageId, Original_LinkWithoutHeadingTemplateOfLinksId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeadingTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeadingTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeadingTUBS";
            tableMapping.ColumnMappings.Add("LinkId", "LinkId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            tableMapping.ColumnMappings.Add("Visited", "Visited");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkWithoutHeadingTUBS] WHERE (([LinkId] = @Original_LinkId) A" +
                "ND ([WebPageId] = @Original_WebPageId) AND ([ToPageId] = @Original_ToPageId) AND" +
                " ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)" +
                "))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeadingTUBS] ([WebPageId], [LinkAnchorText], [LinkUrl], [ToPageId], [VectorTermLength], [Visited]) VALUES (@WebPageId, @LinkAnchorText, @LinkUrl, @ToPageId, @VectorTermLength, @Visited);
SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Visited FROM LinkWithoutHeadingTUBS WHERE (LinkId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeadingTUBS] SET [WebPageId] = @WebPageId, [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [VectorTermLength] = @VectorTermLength, [Visited] = @Visited WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([ToPageId] = @Original_ToPageId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)));
SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Visited FROM LinkWithoutHeadingTUBS WHERE (LinkId = @LinkId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Vi" +
                "sited FROM dbo.LinkWithoutHeadingTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeadingTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeadingTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeadingTUBSDataTable dataTable = new InfoArchDataSet.LinkWithoutHeadingTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeadingTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeadingTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkId, int Original_WebPageId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, global::System.Nullable<bool> Visited) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(VectorTermLength));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited, int LinkId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(VectorTermLength));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_LinkId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(LinkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            return this.Update(WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Visited, Original_LinkId, Original_WebPageId, Original_ToPageId, Original_Visited, Original_LinkId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LinkWithoutHeadingTUBSModifiedTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LinkWithoutHeadingTUBSModifiedTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LinkWithoutHeadingTUBSModified";
            tableMapping.ColumnMappings.Add("LinkId", "LinkId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("VectorTermLength", "VectorTermLength");
            tableMapping.ColumnMappings.Add("Visited", "Visited");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LinkWithoutHeadingTUBSModified] WHERE (([LinkId] = @Original_L" +
                "inkId) AND ([WebPageId] = @Original_WebPageId) AND ([ToPageId] = @Original_ToPag" +
                "eId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_" +
                "Visited)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LinkWithoutHeadingTUBSModified] ([WebPageId], [LinkAnchorText], [LinkUrl], [ToPageId], [VectorTermLength], [Visited]) VALUES (@WebPageId, @LinkAnchorText, @LinkUrl, @ToPageId, @VectorTermLength, @Visited);
SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Visited FROM LinkWithoutHeadingTUBSModified WHERE (LinkId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LinkWithoutHeadingTUBSModified] SET [WebPageId] = @WebPageId, [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [VectorTermLength] = @VectorTermLength, [Visited] = @Visited WHERE (([LinkId] = @Original_LinkId) AND ([WebPageId] = @Original_WebPageId) AND ([ToPageId] = @Original_ToPageId) AND ((@IsNull_Visited = 1 AND [Visited] IS NULL) OR ([Visited] = @Original_Visited)));
SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Visited FROM LinkWithoutHeadingTUBSModified WHERE (LinkId = @LinkId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VectorTermLength", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VectorTermLength", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Visited", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkId, WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Vi" +
                "sited FROM dbo.LinkWithoutHeadingTUBSModified";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.LinkWithoutHeadingTUBSModifiedDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.LinkWithoutHeadingTUBSModifiedDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.LinkWithoutHeadingTUBSModifiedDataTable dataTable = new InfoArchDataSet.LinkWithoutHeadingTUBSModifiedDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.LinkWithoutHeadingTUBSModifiedDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LinkWithoutHeadingTUBSModified");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkId, int Original_WebPageId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, global::System.Nullable<bool> Visited) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(VectorTermLength));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited, int LinkId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ToPageId));
            if ((VectorTermLength == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(VectorTermLength));
            }
            if ((Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_LinkId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ToPageId));
            if ((Original_Visited.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_Visited.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(LinkId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, string LinkAnchorText, string LinkUrl, int ToPageId, string VectorTermLength, global::System.Nullable<bool> Visited, int Original_LinkId, int Original_WebPageId, int Original_ToPageId, global::System.Nullable<bool> Original_Visited) {
            return this.Update(WebPageId, LinkAnchorText, LinkUrl, ToPageId, VectorTermLength, Visited, Original_LinkId, Original_WebPageId, Original_ToPageId, Original_Visited, Original_LinkId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Page_Visited_UnsuccessfullyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Page_Visited_UnsuccessfullyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Page_Visited_Unsuccessfully";
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Page_Visited_Unsuccessfully] ([pageId]) VALUES (@pageId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pageId FROM dbo.Page_Visited_Unsuccessfully";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.Page_Visited_UnsuccessfullyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.Page_Visited_UnsuccessfullyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.Page_Visited_UnsuccessfullyDataTable dataTable = new InfoArchDataSet.Page_Visited_UnsuccessfullyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.Page_Visited_UnsuccessfullyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Page_Visited_Unsuccessfully");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PageTemplateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PageTemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PageTemplate";
            tableMapping.ColumnMappings.Add("PageTemplateId", "PageTemplateId");
            tableMapping.ColumnMappings.Add("Pattern", "Pattern");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PageTemplate] WHERE (([PageTemplateId] = @Original_PageTemplat" +
                "eId) AND ([Pattern] = @Original_Pattern) AND ([Name] = @Original_Name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PageTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pattern", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pattern", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PageTemplate] ([Pattern], [Name]) VALUES (@Pattern, @Name);\r\nS" +
                "ELECT PageTemplateId, Pattern, Name FROM PageTemplate WHERE (PageTemplateId = SC" +
                "OPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pattern", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pattern", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PageTemplate] SET [Pattern] = @Pattern, [Name] = @Name WHERE (([PageTemplateId] = @Original_PageTemplateId) AND ([Pattern] = @Original_Pattern) AND ([Name] = @Original_Name));
SELECT PageTemplateId, Pattern, Name FROM PageTemplate WHERE (PageTemplateId = @PageTemplateId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pattern", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pattern", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PageTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pattern", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pattern", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PageTemplateId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplateId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PageTemplateId, Pattern, Name FROM dbo.PageTemplate";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.PageTemplateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.PageTemplateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.PageTemplateDataTable dataTable = new InfoArchDataSet.PageTemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.PageTemplateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PageTemplate");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_PageTemplateId, string Original_Pattern, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_PageTemplateId));
            if ((Original_Pattern == null)) {
                throw new global::System.ArgumentNullException("Original_Pattern");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Pattern));
            }
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Pattern, string Name) {
            if ((Pattern == null)) {
                throw new global::System.ArgumentNullException("Pattern");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Pattern));
            }
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Pattern, string Name, int Original_PageTemplateId, string Original_Pattern, string Original_Name, int PageTemplateId) {
            if ((Pattern == null)) {
                throw new global::System.ArgumentNullException("Pattern");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Pattern));
            }
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_PageTemplateId));
            if ((Original_Pattern == null)) {
                throw new global::System.ArgumentNullException("Original_Pattern");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Pattern));
            }
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(PageTemplateId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Pattern, string Name, int Original_PageTemplateId, string Original_Pattern, string Original_Name) {
            return this.Update(Pattern, Name, Original_PageTemplateId, Original_Pattern, Original_Name, Original_PageTemplateId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ParagraphTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParagraphTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Paragraph";
            tableMapping.ColumnMappings.Add("ParaId", "ParaId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("ParaText", "ParaText");
            tableMapping.ColumnMappings.Add("CosineValueParagraphHeading", "CosineValueParagraphHeading");
            tableMapping.ColumnMappings.Add("HeadingText", "HeadingText");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Paragraph] WHERE (([ParaId] = @Original_ParaId) AND ([WebPageI" +
                "d] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Paragraph] ([WebPageId], [HeadingId], [ParaText], [CosineValueParagraphHeading], [HeadingText]) VALUES (@WebPageId, @HeadingId, @ParaText, @CosineValueParagraphHeading, @HeadingText);
SELECT ParaId, WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, HeadingText FROM Paragraph WHERE (ParaId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueParagraphHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueParagraphHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Paragraph] SET [WebPageId] = @WebPageId, [HeadingId] = @HeadingId, [ParaText] = @ParaText, [CosineValueParagraphHeading] = @CosineValueParagraphHeading, [HeadingText] = @HeadingText WHERE (([ParaId] = @Original_ParaId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId));
SELECT ParaId, WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, HeadingText FROM Paragraph WHERE (ParaId = @ParaId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueParagraphHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueParagraphHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ParaId, WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, Headi" +
                "ngText FROM dbo.Paragraph";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.ParagraphDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.ParagraphDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.ParagraphDataTable dataTable = new InfoArchDataSet.ParagraphDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.ParagraphDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Paragraph");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ParaId, int Original_WebPageId, int Original_HeadingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ParaId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((ParaText == null)) {
                throw new global::System.ArgumentNullException("ParaText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ParaText));
            }
            if ((CosineValueParagraphHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueParagraphHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueParagraphHeading));
            }
            if ((HeadingText == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(HeadingText));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText, int Original_ParaId, int Original_WebPageId, int Original_HeadingId, int ParaId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((ParaText == null)) {
                throw new global::System.ArgumentNullException("ParaText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ParaText));
            }
            if ((CosineValueParagraphHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueParagraphHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CosineValueParagraphHeading));
            }
            if ((HeadingText == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(HeadingText));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ParaId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ParaId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText, int Original_ParaId, int Original_WebPageId, int Original_HeadingId) {
            return this.Update(WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, HeadingText, Original_ParaId, Original_WebPageId, Original_HeadingId, Original_ParaId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Paragraph_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Paragraph_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Paragraph_Cosine";
            tableMapping.ColumnMappings.Add("ParagraphCosineId", "ParagraphCosineId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("ParaId", "ParaId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("ParaText", "ParaText");
            tableMapping.ColumnMappings.Add("CosineParaAgainstGoal", "CosineParaAgainstGoal");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Paragraph_Cosine] WHERE (([ParagraphCosineId] = @Original_Para" +
                "graphCosineId) AND ([WebPageId] = @Original_WebPageId) AND ([ParaId] = @Original" +
                "_ParaId) AND ([HeadingId] = @Original_HeadingId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParagraphCosineId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParagraphCosineId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Paragraph_Cosine] ([WebPageId], [ParaId], [HeadingId], [ParaText], [CosineParaAgainstGoal]) VALUES (@WebPageId, @ParaId, @HeadingId, @ParaText, @CosineParaAgainstGoal);
SELECT ParagraphCosineId, WebPageId, ParaId, HeadingId, ParaText, CosineParaAgainstGoal FROM Paragraph_Cosine WHERE (ParagraphCosineId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineParaAgainstGoal", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineParaAgainstGoal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Paragraph_Cosine] SET [WebPageId] = @WebPageId, [ParaId] = @ParaId, [HeadingId] = @HeadingId, [ParaText] = @ParaText, [CosineParaAgainstGoal] = @CosineParaAgainstGoal WHERE (([ParagraphCosineId] = @Original_ParagraphCosineId) AND ([WebPageId] = @Original_WebPageId) AND ([ParaId] = @Original_ParaId) AND ([HeadingId] = @Original_HeadingId));
SELECT ParagraphCosineId, WebPageId, ParaId, HeadingId, ParaText, CosineParaAgainstGoal FROM Paragraph_Cosine WHERE (ParagraphCosineId = @ParagraphCosineId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineParaAgainstGoal", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineParaAgainstGoal", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParagraphCosineId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParagraphCosineId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParagraphCosineId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ParagraphCosineId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ParagraphCosineId, WebPageId, ParaId, HeadingId, ParaText, CosineParaAgain" +
                "stGoal FROM dbo.Paragraph_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.Paragraph_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.Paragraph_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.Paragraph_CosineDataTable dataTable = new InfoArchDataSet.Paragraph_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.Paragraph_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Paragraph_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ParagraphCosineId, int Original_WebPageId, int Original_ParaId, int Original_HeadingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ParagraphCosineId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ParaId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_HeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int ParaId, int HeadingId, string ParaText, string CosineParaAgainstGoal) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ParaId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(HeadingId));
            if ((ParaText == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ParaText));
            }
            if ((CosineParaAgainstGoal == null)) {
                throw new global::System.ArgumentNullException("CosineParaAgainstGoal");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CosineParaAgainstGoal));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int ParaId, int HeadingId, string ParaText, string CosineParaAgainstGoal, int Original_ParagraphCosineId, int Original_WebPageId, int Original_ParaId, int Original_HeadingId, int ParagraphCosineId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ParaId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(HeadingId));
            if ((ParaText == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ParaText));
            }
            if ((CosineParaAgainstGoal == null)) {
                throw new global::System.ArgumentNullException("CosineParaAgainstGoal");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CosineParaAgainstGoal));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ParagraphCosineId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ParaId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ParagraphCosineId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int ParaId, int HeadingId, string ParaText, string CosineParaAgainstGoal, int Original_ParagraphCosineId, int Original_WebPageId, int Original_ParaId, int Original_HeadingId) {
            return this.Update(WebPageId, ParaId, HeadingId, ParaText, CosineParaAgainstGoal, Original_ParagraphCosineId, Original_WebPageId, Original_ParaId, Original_HeadingId, Original_ParagraphCosineId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ParagraphTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ParagraphTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ParagraphTUBS";
            tableMapping.ColumnMappings.Add("ParaId", "ParaId");
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("HeadingId", "HeadingId");
            tableMapping.ColumnMappings.Add("ParaText", "ParaText");
            tableMapping.ColumnMappings.Add("CosineValueParagraphHeading", "CosineValueParagraphHeading");
            tableMapping.ColumnMappings.Add("HeadingText", "HeadingText");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ParagraphTUBS] WHERE (([ParaId] = @Original_ParaId) AND ([WebP" +
                "ageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ParagraphTUBS] ([WebPageId], [HeadingId], [ParaText], [CosineValueParagraphHeading], [HeadingText]) VALUES (@WebPageId, @HeadingId, @ParaText, @CosineValueParagraphHeading, @HeadingText);
SELECT ParaId, WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, HeadingText FROM ParagraphTUBS WHERE (ParaId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueParagraphHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueParagraphHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ParagraphTUBS] SET [WebPageId] = @WebPageId, [HeadingId] = @HeadingId, [ParaText] = @ParaText, [CosineValueParagraphHeading] = @CosineValueParagraphHeading, [HeadingText] = @HeadingText WHERE (([ParaId] = @Original_ParaId) AND ([WebPageId] = @Original_WebPageId) AND ([HeadingId] = @Original_HeadingId));
SELECT ParaId, WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, HeadingText FROM ParagraphTUBS WHERE (ParaId = @ParaId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CosineValueParagraphHeading", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CosineValueParagraphHeading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeadingText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ParaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HeadingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeadingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ParaId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ParaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ParaId, WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, Headi" +
                "ngText FROM dbo.ParagraphTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.ParagraphTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.ParagraphTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.ParagraphTUBSDataTable dataTable = new InfoArchDataSet.ParagraphTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.ParagraphTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ParagraphTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ParaId, int Original_WebPageId, int Original_HeadingId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ParaId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HeadingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((ParaText == null)) {
                throw new global::System.ArgumentNullException("ParaText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ParaText));
            }
            if ((CosineValueParagraphHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueParagraphHeading");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CosineValueParagraphHeading));
            }
            if ((HeadingText == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(HeadingText));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText, int Original_ParaId, int Original_WebPageId, int Original_HeadingId, int ParaId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebPageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HeadingId));
            if ((ParaText == null)) {
                throw new global::System.ArgumentNullException("ParaText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ParaText));
            }
            if ((CosineValueParagraphHeading == null)) {
                throw new global::System.ArgumentNullException("CosineValueParagraphHeading");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CosineValueParagraphHeading));
            }
            if ((HeadingText == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(HeadingText));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ParaId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_HeadingId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ParaId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebPageId, int HeadingId, string ParaText, string CosineValueParagraphHeading, string HeadingText, int Original_ParaId, int Original_WebPageId, int Original_HeadingId) {
            return this.Update(WebPageId, HeadingId, ParaText, CosineValueParagraphHeading, HeadingText, Original_ParaId, Original_WebPageId, Original_HeadingId, Original_ParaId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PathTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PathTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Path";
            tableMapping.ColumnMappings.Add("pathId", "pathId");
            tableMapping.ColumnMappings.Add("headingId", "headingId");
            tableMapping.ColumnMappings.Add("linkId", "linkId");
            tableMapping.ColumnMappings.Add("ThisPageId", "ThisPageId");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("PreviousCosine", "PreviousCosine");
            tableMapping.ColumnMappings.Add("NewCosine", "NewCosine");
            tableMapping.ColumnMappings.Add("PathChoosen", "PathChoosen");
            tableMapping.ColumnMappings.Add("PreviousRow", "PreviousRow");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Path] WHERE (([pathId] = @Original_pathId) AND ((@IsNull_headingId = 1 AND [headingId] IS NULL) OR ([headingId] = @Original_headingId)) AND ((@IsNull_linkId = 1 AND [linkId] IS NULL) OR ([linkId] = @Original_linkId)) AND ((@IsNull_ThisPageId = 1 AND [ThisPageId] IS NULL) OR ([ThisPageId] = @Original_ThisPageId)) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ((@IsNull_PreviousRow = 1 AND [PreviousRow] IS NULL) OR ([PreviousRow] = @Original_PreviousRow)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pathId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pathId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ThisPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ThisPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ThisPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ThisPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PreviousRow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousRow", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PreviousRow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousRow", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Path] ([headingId], [linkId], [ThisPageId], [ToPageId], [PreviousCosine], [NewCosine], [PathChoosen], [PreviousRow]) VALUES (@headingId, @linkId, @ThisPageId, @ToPageId, @PreviousCosine, @NewCosine, @PathChoosen, @PreviousRow);
SELECT pathId, headingId, linkId, ThisPageId, ToPageId, PreviousCosine, NewCosine, PathChoosen, PreviousRow FROM Path WHERE (pathId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ThisPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ThisPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousCosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousCosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewCosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PathChoosen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PathChoosen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousRow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousRow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Path] SET [headingId] = @headingId, [linkId] = @linkId, [ThisPageId] = @ThisPageId, [ToPageId] = @ToPageId, [PreviousCosine] = @PreviousCosine, [NewCosine] = @NewCosine, [PathChoosen] = @PathChoosen, [PreviousRow] = @PreviousRow WHERE (([pathId] = @Original_pathId) AND ((@IsNull_headingId = 1 AND [headingId] IS NULL) OR ([headingId] = @Original_headingId)) AND ((@IsNull_linkId = 1 AND [linkId] IS NULL) OR ([linkId] = @Original_linkId)) AND ((@IsNull_ThisPageId = 1 AND [ThisPageId] IS NULL) OR ([ThisPageId] = @Original_ThisPageId)) AND ((@IsNull_ToPageId = 1 AND [ToPageId] IS NULL) OR ([ToPageId] = @Original_ToPageId)) AND ((@IsNull_PreviousRow = 1 AND [PreviousRow] IS NULL) OR ([PreviousRow] = @Original_PreviousRow)));
SELECT pathId, headingId, linkId, ThisPageId, ToPageId, PreviousCosine, NewCosine, PathChoosen, PreviousRow FROM Path WHERE (pathId = @pathId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ThisPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ThisPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousCosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousCosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NewCosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NewCosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PathChoosen", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PathChoosen", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousRow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousRow", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pathId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pathId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_linkId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "linkId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ThisPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ThisPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ThisPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ThisPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PreviousRow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousRow", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PreviousRow", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PreviousRow", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pathId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "pathId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT pathId, headingId, linkId, ThisPageId, ToPageId, PreviousCosine, NewCosine" +
                ", PathChoosen, PreviousRow FROM dbo.Path";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.PathDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.PathDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.PathDataTable dataTable = new InfoArchDataSet.PathDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.PathDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Path");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_pathId, global::System.Nullable<int> Original_headingId, global::System.Nullable<int> Original_linkId, global::System.Nullable<int> Original_ThisPageId, global::System.Nullable<int> Original_ToPageId, global::System.Nullable<int> Original_PreviousRow) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_pathId));
            if ((Original_headingId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_headingId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_linkId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_linkId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_ThisPageId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ThisPageId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_PreviousRow.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_PreviousRow.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> headingId, global::System.Nullable<int> linkId, global::System.Nullable<int> ThisPageId, global::System.Nullable<int> ToPageId, string PreviousCosine, string NewCosine, string PathChoosen, global::System.Nullable<int> PreviousRow) {
            if ((headingId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(headingId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((linkId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(linkId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ThisPageId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ThisPageId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ToPageId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PreviousCosine == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PreviousCosine));
            }
            if ((NewCosine == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(NewCosine));
            }
            if ((PathChoosen == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PathChoosen));
            }
            if ((PreviousRow.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(PreviousRow.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> headingId, global::System.Nullable<int> linkId, global::System.Nullable<int> ThisPageId, global::System.Nullable<int> ToPageId, string PreviousCosine, string NewCosine, string PathChoosen, global::System.Nullable<int> PreviousRow, int Original_pathId, global::System.Nullable<int> Original_headingId, global::System.Nullable<int> Original_linkId, global::System.Nullable<int> Original_ThisPageId, global::System.Nullable<int> Original_ToPageId, global::System.Nullable<int> Original_PreviousRow, int pathId) {
            if ((headingId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(headingId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((linkId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(linkId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ThisPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ThisPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PreviousCosine == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PreviousCosine));
            }
            if ((NewCosine == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(NewCosine));
            }
            if ((PathChoosen == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PathChoosen));
            }
            if ((PreviousRow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(PreviousRow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_pathId));
            if ((Original_headingId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_headingId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_linkId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_linkId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ThisPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_ThisPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ToPageId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_ToPageId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_PreviousRow.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_PreviousRow.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(pathId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> headingId, global::System.Nullable<int> linkId, global::System.Nullable<int> ThisPageId, global::System.Nullable<int> ToPageId, string PreviousCosine, string NewCosine, string PathChoosen, global::System.Nullable<int> PreviousRow, int Original_pathId, global::System.Nullable<int> Original_headingId, global::System.Nullable<int> Original_linkId, global::System.Nullable<int> Original_ThisPageId, global::System.Nullable<int> Original_ToPageId, global::System.Nullable<int> Original_PreviousRow) {
            return this.Update(headingId, linkId, ThisPageId, ToPageId, PreviousCosine, NewCosine, PathChoosen, PreviousRow, Original_pathId, Original_headingId, Original_linkId, Original_ThisPageId, Original_ToPageId, Original_PreviousRow, Original_pathId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Solution_FoundTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Solution_FoundTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Solution_Found";
            tableMapping.ColumnMappings.Add("solutionFoundId", "solutionFoundId");
            tableMapping.ColumnMappings.Add("pageId", "pageId");
            tableMapping.ColumnMappings.Add("topageId", "topageId");
            tableMapping.ColumnMappings.Add("headingId", "headingId");
            tableMapping.ColumnMappings.Add("pathIdinPathTable", "pathIdinPathTable");
            tableMapping.ColumnMappings.Add("paragraphId", "paragraphId");
            tableMapping.ColumnMappings.Add("paragraphText", "paragraphText");
            tableMapping.ColumnMappings.Add("cosine", "cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Solution_Found] WHERE (([solutionFoundId] = @Original_solutionFoundId) AND ([pageId] = @Original_pageId) AND ([topageId] = @Original_topageId) AND ([headingId] = @Original_headingId) AND ([pathIdinPathTable] = @Original_pathIdinPathTable) AND ([paragraphId] = @Original_paragraphId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_solutionFoundId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "solutionFoundId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pathIdinPathTable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pathIdinPathTable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_paragraphId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "paragraphId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Solution_Found] ([pageId], [topageId], [headingId], [pathIdinPathTable], [paragraphId], [paragraphText], [cosine]) VALUES (@pageId, @topageId, @headingId, @pathIdinPathTable, @paragraphId, @paragraphText, @cosine);
SELECT solutionFoundId, pageId, topageId, headingId, pathIdinPathTable, paragraphId, paragraphText, cosine FROM Solution_Found WHERE (solutionFoundId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pathIdinPathTable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pathIdinPathTable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@paragraphId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "paragraphId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@paragraphText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "paragraphText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Solution_Found] SET [pageId] = @pageId, [topageId] = @topageId, [headingId] = @headingId, [pathIdinPathTable] = @pathIdinPathTable, [paragraphId] = @paragraphId, [paragraphText] = @paragraphText, [cosine] = @cosine WHERE (([solutionFoundId] = @Original_solutionFoundId) AND ([pageId] = @Original_pageId) AND ([topageId] = @Original_topageId) AND ([headingId] = @Original_headingId) AND ([pathIdinPathTable] = @Original_pathIdinPathTable) AND ([paragraphId] = @Original_paragraphId));
SELECT solutionFoundId, pageId, topageId, headingId, pathIdinPathTable, paragraphId, paragraphText, cosine FROM Solution_Found WHERE (solutionFoundId = @solutionFoundId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@topageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pathIdinPathTable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pathIdinPathTable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@paragraphId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "paragraphId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@paragraphText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "paragraphText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_solutionFoundId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "solutionFoundId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_topageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "topageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_headingId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "headingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_pathIdinPathTable", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "pathIdinPathTable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_paragraphId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "paragraphId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@solutionFoundId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "solutionFoundId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT solutionFoundId, pageId, topageId, headingId, pathIdinPathTable, paragraph" +
                "Id, paragraphText, cosine FROM dbo.Solution_Found";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.Solution_FoundDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.Solution_FoundDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.Solution_FoundDataTable dataTable = new InfoArchDataSet.Solution_FoundDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.Solution_FoundDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Solution_Found");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_solutionFoundId, int Original_pageId, int Original_topageId, int Original_headingId, int Original_pathIdinPathTable, int Original_paragraphId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_solutionFoundId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_pageId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_topageId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_headingId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_pathIdinPathTable));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_paragraphId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int pageId, int topageId, int headingId, int pathIdinPathTable, int paragraphId, string paragraphText, string cosine) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(pageId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(topageId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(headingId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(pathIdinPathTable));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(paragraphId));
            if ((paragraphText == null)) {
                throw new global::System.ArgumentNullException("paragraphText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(paragraphText));
            }
            if ((cosine == null)) {
                throw new global::System.ArgumentNullException("cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, int topageId, int headingId, int pathIdinPathTable, int paragraphId, string paragraphText, string cosine, int Original_solutionFoundId, int Original_pageId, int Original_topageId, int Original_headingId, int Original_pathIdinPathTable, int Original_paragraphId, int solutionFoundId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(pageId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(topageId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(headingId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(pathIdinPathTable));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(paragraphId));
            if ((paragraphText == null)) {
                throw new global::System.ArgumentNullException("paragraphText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(paragraphText));
            }
            if ((cosine == null)) {
                throw new global::System.ArgumentNullException("cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(cosine));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_solutionFoundId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_pageId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_topageId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_headingId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_pathIdinPathTable));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_paragraphId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(solutionFoundId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int pageId, int topageId, int headingId, int pathIdinPathTable, int paragraphId, string paragraphText, string cosine, int Original_solutionFoundId, int Original_pageId, int Original_topageId, int Original_headingId, int Original_pathIdinPathTable, int Original_paragraphId) {
            return this.Update(pageId, topageId, headingId, pathIdinPathTable, paragraphId, paragraphText, cosine, Original_solutionFoundId, Original_pageId, Original_topageId, Original_headingId, Original_pathIdinPathTable, Original_paragraphId, Original_solutionFoundId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TemplateOfLinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TemplateOfLinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TemplateOfLinks";
            tableMapping.ColumnMappings.Add("LinkTemplateId", "LinkTemplateId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("TermVectorLengthLinkTemplate", "TermVectorLengthLinkTemplate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TemplateOfLinks] WHERE (([LinkTemplateId] = @Original_LinkTemp" +
                "lateId) AND ([ToPageId] = @Original_ToPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TemplateOfLinks] ([LinkAnchorText], [LinkUrl], [ToPageId], [TermVectorLengthLinkTemplate]) VALUES (@LinkAnchorText, @LinkUrl, @ToPageId, @TermVectorLengthLinkTemplate);
SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTemplate FROM TemplateOfLinks WHERE (LinkTemplateId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TermVectorLengthLinkTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TermVectorLengthLinkTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TemplateOfLinks] SET [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [TermVectorLengthLinkTemplate] = @TermVectorLengthLinkTemplate WHERE (([LinkTemplateId] = @Original_LinkTemplateId) AND ([ToPageId] = @Original_ToPageId));
SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTemplate FROM TemplateOfLinks WHERE (LinkTemplateId = @LinkTemplateId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TermVectorLengthLinkTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TermVectorLengthLinkTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTemplateId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTem" +
                "plate FROM dbo.TemplateOfLinks";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.TemplateOfLinksDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.TemplateOfLinksDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.TemplateOfLinksDataTable dataTable = new InfoArchDataSet.TemplateOfLinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.TemplateOfLinksDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TemplateOfLinks");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkTemplateId, int Original_ToPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkTemplateId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ToPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate) {
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ToPageId));
            if ((TermVectorLengthLinkTemplate == null)) {
                throw new global::System.ArgumentNullException("TermVectorLengthLinkTemplate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TermVectorLengthLinkTemplate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate, int Original_LinkTemplateId, int Original_ToPageId, int LinkTemplateId) {
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ToPageId));
            if ((TermVectorLengthLinkTemplate == null)) {
                throw new global::System.ArgumentNullException("TermVectorLengthLinkTemplate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TermVectorLengthLinkTemplate));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_LinkTemplateId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ToPageId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(LinkTemplateId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate, int Original_LinkTemplateId, int Original_ToPageId) {
            return this.Update(LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTemplate, Original_LinkTemplateId, Original_ToPageId, Original_LinkTemplateId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TemplateOfLinks_CosineTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TemplateOfLinks_CosineTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TemplateOfLinks_Cosine";
            tableMapping.ColumnMappings.Add("LinkTemplateId", "LinkTemplateId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("Cosine", "Cosine");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TemplateOfLinks_Cosine] WHERE (([LinkTemplateId] = @Original_L" +
                "inkTemplateId) AND ([ToPageId] = @Original_ToPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TemplateOfLinks_Cosine] ([LinkAnchorText], [LinkUrl], [ToPageId], [Cosine]) VALUES (@LinkAnchorText, @LinkUrl, @ToPageId, @Cosine);
SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, Cosine FROM TemplateOfLinks_Cosine WHERE (LinkTemplateId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TemplateOfLinks_Cosine] SET [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [Cosine] = @Cosine WHERE (([LinkTemplateId] = @Original_LinkTemplateId) AND ([ToPageId] = @Original_ToPageId));
SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, Cosine FROM TemplateOfLinks_Cosine WHERE (LinkTemplateId = @LinkTemplateId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Cosine", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Cosine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTemplateId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, Cosine FROM dbo.Templat" +
                "eOfLinks_Cosine";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.TemplateOfLinks_CosineDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.TemplateOfLinks_CosineDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.TemplateOfLinks_CosineDataTable dataTable = new InfoArchDataSet.TemplateOfLinks_CosineDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.TemplateOfLinks_CosineDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TemplateOfLinks_Cosine");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkTemplateId, int Original_ToPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkTemplateId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ToPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string LinkAnchorText, string LinkUrl, int ToPageId, string Cosine) {
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ToPageId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Cosine));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LinkAnchorText, string LinkUrl, int ToPageId, string Cosine, int Original_LinkTemplateId, int Original_ToPageId, int LinkTemplateId) {
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ToPageId));
            if ((Cosine == null)) {
                throw new global::System.ArgumentNullException("Cosine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Cosine));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_LinkTemplateId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ToPageId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(LinkTemplateId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LinkAnchorText, string LinkUrl, int ToPageId, string Cosine, int Original_LinkTemplateId, int Original_ToPageId) {
            return this.Update(LinkAnchorText, LinkUrl, ToPageId, Cosine, Original_LinkTemplateId, Original_ToPageId, Original_LinkTemplateId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TemplateOfLinksTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TemplateOfLinksTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TemplateOfLinksTUBS";
            tableMapping.ColumnMappings.Add("LinkTemplateId", "LinkTemplateId");
            tableMapping.ColumnMappings.Add("LinkAnchorText", "LinkAnchorText");
            tableMapping.ColumnMappings.Add("LinkUrl", "LinkUrl");
            tableMapping.ColumnMappings.Add("ToPageId", "ToPageId");
            tableMapping.ColumnMappings.Add("TermVectorLengthLinkTemplate", "TermVectorLengthLinkTemplate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TemplateOfLinksTUBS] WHERE (([LinkTemplateId] = @Original_Link" +
                "TemplateId) AND ([ToPageId] = @Original_ToPageId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TemplateOfLinksTUBS] ([LinkAnchorText], [LinkUrl], [ToPageId], [TermVectorLengthLinkTemplate]) VALUES (@LinkAnchorText, @LinkUrl, @ToPageId, @TermVectorLengthLinkTemplate);
SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTemplate FROM TemplateOfLinksTUBS WHERE (LinkTemplateId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TermVectorLengthLinkTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TermVectorLengthLinkTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TemplateOfLinksTUBS] SET [LinkAnchorText] = @LinkAnchorText, [LinkUrl] = @LinkUrl, [ToPageId] = @ToPageId, [TermVectorLengthLinkTemplate] = @TermVectorLengthLinkTemplate WHERE (([LinkTemplateId] = @Original_LinkTemplateId) AND ([ToPageId] = @Original_ToPageId));
SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTemplate FROM TemplateOfLinksTUBS WHERE (LinkTemplateId = @LinkTemplateId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkAnchorText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkAnchorText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkUrl", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkUrl", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TermVectorLengthLinkTemplate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TermVectorLengthLinkTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LinkTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ToPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ToPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LinkTemplateId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "LinkTemplateId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LinkTemplateId, LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTem" +
                "plate FROM dbo.TemplateOfLinksTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.TemplateOfLinksTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.TemplateOfLinksTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.TemplateOfLinksTUBSDataTable dataTable = new InfoArchDataSet.TemplateOfLinksTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.TemplateOfLinksTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TemplateOfLinksTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LinkTemplateId, int Original_ToPageId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LinkTemplateId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ToPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate) {
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LinkUrl));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ToPageId));
            if ((TermVectorLengthLinkTemplate == null)) {
                throw new global::System.ArgumentNullException("TermVectorLengthLinkTemplate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TermVectorLengthLinkTemplate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate, int Original_LinkTemplateId, int Original_ToPageId, int LinkTemplateId) {
            if ((LinkAnchorText == null)) {
                throw new global::System.ArgumentNullException("LinkAnchorText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LinkAnchorText));
            }
            if ((LinkUrl == null)) {
                throw new global::System.ArgumentNullException("LinkUrl");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LinkUrl));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ToPageId));
            if ((TermVectorLengthLinkTemplate == null)) {
                throw new global::System.ArgumentNullException("TermVectorLengthLinkTemplate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TermVectorLengthLinkTemplate));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_LinkTemplateId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ToPageId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(LinkTemplateId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string LinkAnchorText, string LinkUrl, int ToPageId, string TermVectorLengthLinkTemplate, int Original_LinkTemplateId, int Original_ToPageId) {
            return this.Update(LinkAnchorText, LinkUrl, ToPageId, TermVectorLengthLinkTemplate, Original_LinkTemplateId, Original_ToPageId, Original_LinkTemplateId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WebPageTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WebPageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WebPage";
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("WebSiteId", "WebSiteId");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("PageTemplate", "PageTemplate");
            tableMapping.ColumnMappings.Add("Url", "Url");
            tableMapping.ColumnMappings.Add("Visited", "Visited");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("BestRouteToTop", "BestRouteToTop");
            tableMapping.ColumnMappings.Add("CountToTop", "CountToTop");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[WebPage] WHERE (([WebPageId] = @Original_WebPageId) AND ([WebSiteId] = @Original_WebSiteId) AND ((@IsNull_PageTemplate = 1 AND [PageTemplate] IS NULL) OR ([PageTemplate] = @Original_PageTemplate)) AND ([Visited] = @Original_Visited) AND ([BestRouteToTop] = @Original_BestRouteToTop) AND ([CountToTop] = @Original_CountToTop))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[WebPage] ([WebSiteId], [Title], [PageTemplate], [Url], [Visited], [Source], [BestRouteToTop], [CountToTop]) VALUES (@WebSiteId, @Title, @PageTemplate, @Url, @Visited, @Source, @BestRouteToTop, @CountToTop);
SELECT WebPageId, WebSiteId, Title, PageTemplate, Url, Visited, Source, BestRouteToTop, CountToTop FROM WebPage WHERE (WebPageId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Url", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Url", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[WebPage] SET [WebSiteId] = @WebSiteId, [Title] = @Title, [PageTemplate] = @PageTemplate, [Url] = @Url, [Visited] = @Visited, [Source] = @Source, [BestRouteToTop] = @BestRouteToTop, [CountToTop] = @CountToTop WHERE (([WebPageId] = @Original_WebPageId) AND ([WebSiteId] = @Original_WebSiteId) AND ((@IsNull_PageTemplate = 1 AND [PageTemplate] IS NULL) OR ([PageTemplate] = @Original_PageTemplate)) AND ([Visited] = @Original_Visited) AND ([BestRouteToTop] = @Original_BestRouteToTop) AND ([CountToTop] = @Original_CountToTop));
SELECT WebPageId, WebSiteId, Title, PageTemplate, Url, Visited, Source, BestRouteToTop, CountToTop FROM WebPage WHERE (WebPageId = @WebPageId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Url", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Url", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Source", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT WebPageId, WebSiteId, Title, PageTemplate, Url, Visited, Source, BestRoute" +
                "ToTop, CountToTop FROM dbo.WebPage";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.WebPageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.WebPageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.WebPageDataTable dataTable = new InfoArchDataSet.WebPageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.WebPageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WebPage");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_WebPageId, int Original_WebSiteId, global::System.Nullable<int> Original_PageTemplate, bool Original_Visited, int Original_BestRouteToTop, int Original_CountToTop) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebSiteId));
            if ((Original_PageTemplate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_PageTemplate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Visited));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_BestRouteToTop));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_CountToTop));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebSiteId, string Title, global::System.Nullable<int> PageTemplate, string Url, bool Visited, string Source, int BestRouteToTop, int CountToTop) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebSiteId));
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Title));
            }
            if ((PageTemplate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(PageTemplate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Url == null)) {
                throw new global::System.ArgumentNullException("Url");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Url));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Visited));
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Source));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(BestRouteToTop));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(CountToTop));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebSiteId, string Title, global::System.Nullable<int> PageTemplate, string Url, bool Visited, string Source, int BestRouteToTop, int CountToTop, int Original_WebPageId, int Original_WebSiteId, global::System.Nullable<int> Original_PageTemplate, bool Original_Visited, int Original_BestRouteToTop, int Original_CountToTop, int WebPageId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebSiteId));
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Title));
            }
            if ((PageTemplate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(PageTemplate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Url == null)) {
                throw new global::System.ArgumentNullException("Url");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Url));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Visited));
            if ((Source == null)) {
                throw new global::System.ArgumentNullException("Source");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Source));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(BestRouteToTop));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(CountToTop));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WebSiteId));
            if ((Original_PageTemplate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_PageTemplate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_Visited));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_BestRouteToTop));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_CountToTop));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebSiteId, string Title, global::System.Nullable<int> PageTemplate, string Url, bool Visited, string Source, int BestRouteToTop, int CountToTop, int Original_WebPageId, int Original_WebSiteId, global::System.Nullable<int> Original_PageTemplate, bool Original_Visited, int Original_BestRouteToTop, int Original_CountToTop) {
            return this.Update(WebSiteId, Title, PageTemplate, Url, Visited, Source, BestRouteToTop, CountToTop, Original_WebPageId, Original_WebSiteId, Original_PageTemplate, Original_Visited, Original_BestRouteToTop, Original_CountToTop, Original_WebPageId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WebPageTUBSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WebPageTUBSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WebPageTUBS";
            tableMapping.ColumnMappings.Add("WebPageId", "WebPageId");
            tableMapping.ColumnMappings.Add("WebSiteId", "WebSiteId");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("PageTemplate", "PageTemplate");
            tableMapping.ColumnMappings.Add("Url", "Url");
            tableMapping.ColumnMappings.Add("Visited", "Visited");
            tableMapping.ColumnMappings.Add("LwhORLwoh", "LwhORLwoh");
            tableMapping.ColumnMappings.Add("BestRouteToTop", "BestRouteToTop");
            tableMapping.ColumnMappings.Add("CountToTop", "CountToTop");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[WebPageTUBS] WHERE (([WebPageId] = @Original_WebPageId) AND ([WebSiteId] = @Original_WebSiteId) AND ((@IsNull_PageTemplate = 1 AND [PageTemplate] IS NULL) OR ([PageTemplate] = @Original_PageTemplate)) AND ([Visited] = @Original_Visited) AND ([BestRouteToTop] = @Original_BestRouteToTop) AND ([CountToTop] = @Original_CountToTop))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[WebPageTUBS] ([WebSiteId], [Title], [PageTemplate], [Url], [Visited], [LwhORLwoh], [BestRouteToTop], [CountToTop]) VALUES (@WebSiteId, @Title, @PageTemplate, @Url, @Visited, @LwhORLwoh, @BestRouteToTop, @CountToTop);
SELECT WebPageId, WebSiteId, Title, PageTemplate, Url, Visited, LwhORLwoh, BestRouteToTop, CountToTop FROM WebPageTUBS WHERE (WebPageId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Url", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Url", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LwhORLwoh", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LwhORLwoh", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[WebPageTUBS] SET [WebSiteId] = @WebSiteId, [Title] = @Title, [PageTemplate] = @PageTemplate, [Url] = @Url, [Visited] = @Visited, [LwhORLwoh] = @LwhORLwoh, [BestRouteToTop] = @BestRouteToTop, [CountToTop] = @CountToTop WHERE (([WebPageId] = @Original_WebPageId) AND ([WebSiteId] = @Original_WebSiteId) AND ((@IsNull_PageTemplate = 1 AND [PageTemplate] IS NULL) OR ([PageTemplate] = @Original_PageTemplate)) AND ([Visited] = @Original_Visited) AND ([BestRouteToTop] = @Original_BestRouteToTop) AND ([CountToTop] = @Original_CountToTop));
SELECT WebPageId, WebSiteId, Title, PageTemplate, Url, Visited, LwhORLwoh, BestRouteToTop, CountToTop FROM WebPageTUBS WHERE (WebPageId = @WebPageId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Url", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Url", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LwhORLwoh", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LwhORLwoh", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebPageId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PageTemplate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PageTemplate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Visited", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Visited", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BestRouteToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BestRouteToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CountToTop", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CountToTop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebPageId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "WebPageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT WebPageId, WebSiteId, Title, PageTemplate, Url, Visited, LwhORLwoh, BestRo" +
                "uteToTop, CountToTop FROM dbo.WebPageTUBS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.WebPageTUBSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.WebPageTUBSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.WebPageTUBSDataTable dataTable = new InfoArchDataSet.WebPageTUBSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.WebPageTUBSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WebPageTUBS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_WebPageId, int Original_WebSiteId, global::System.Nullable<int> Original_PageTemplate, bool Original_Visited, int Original_BestRouteToTop, int Original_CountToTop) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_WebPageId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_WebSiteId));
            if ((Original_PageTemplate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_PageTemplate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_Visited));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_BestRouteToTop));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_CountToTop));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int WebSiteId, string Title, global::System.Nullable<int> PageTemplate, string Url, bool Visited, string LwhORLwoh, int BestRouteToTop, int CountToTop) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(WebSiteId));
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Title));
            }
            if ((PageTemplate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(PageTemplate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Url == null)) {
                throw new global::System.ArgumentNullException("Url");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Url));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(Visited));
            if ((LwhORLwoh == null)) {
                throw new global::System.ArgumentNullException("LwhORLwoh");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LwhORLwoh));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(BestRouteToTop));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(CountToTop));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebSiteId, string Title, global::System.Nullable<int> PageTemplate, string Url, bool Visited, string LwhORLwoh, int BestRouteToTop, int CountToTop, int Original_WebPageId, int Original_WebSiteId, global::System.Nullable<int> Original_PageTemplate, bool Original_Visited, int Original_BestRouteToTop, int Original_CountToTop, int WebPageId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(WebSiteId));
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Title));
            }
            if ((PageTemplate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(PageTemplate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Url == null)) {
                throw new global::System.ArgumentNullException("Url");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Url));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(Visited));
            if ((LwhORLwoh == null)) {
                throw new global::System.ArgumentNullException("LwhORLwoh");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(LwhORLwoh));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(BestRouteToTop));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(CountToTop));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_WebPageId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_WebSiteId));
            if ((Original_PageTemplate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_PageTemplate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_Visited));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_BestRouteToTop));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_CountToTop));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(WebPageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int WebSiteId, string Title, global::System.Nullable<int> PageTemplate, string Url, bool Visited, string LwhORLwoh, int BestRouteToTop, int CountToTop, int Original_WebPageId, int Original_WebSiteId, global::System.Nullable<int> Original_PageTemplate, bool Original_Visited, int Original_BestRouteToTop, int Original_CountToTop) {
            return this.Update(WebSiteId, Title, PageTemplate, Url, Visited, LwhORLwoh, BestRouteToTop, CountToTop, Original_WebPageId, Original_WebSiteId, Original_PageTemplate, Original_Visited, Original_BestRouteToTop, Original_CountToTop, Original_WebPageId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WebSiteTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WebSiteTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WebSite";
            tableMapping.ColumnMappings.Add("WebSiteId", "WebSiteId");
            tableMapping.ColumnMappings.Add("WebSiteName", "WebSiteName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[WebSite] WHERE (([WebSiteId] = @Original_WebSiteId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WebSite] ([WebSiteName]) VALUES (@WebSiteName);\r\nSELECT WebSit" +
                "eId, WebSiteName FROM WebSite WHERE (WebSiteId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WebSite] SET [WebSiteName] = @WebSiteName WHERE (([WebSiteId] = @Or" +
                "iginal_WebSiteId));\r\nSELECT WebSiteId, WebSiteName FROM WebSite WHERE (WebSiteId" +
                " = @WebSiteId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_WebSiteId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@WebSiteId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "WebSiteId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::IACollector.Properties.Settings.Default.InfoArchConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT WebSiteId, WebSiteName FROM dbo.WebSite";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(InfoArchDataSet.WebSiteDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual InfoArchDataSet.WebSiteDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            InfoArchDataSet.WebSiteDataTable dataTable = new InfoArchDataSet.WebSiteDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet.WebSiteDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(InfoArchDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WebSite");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_WebSiteId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_WebSiteId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string WebSiteName) {
            if ((WebSiteName == null)) {
                throw new global::System.ArgumentNullException("WebSiteName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(WebSiteName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string WebSiteName, int Original_WebSiteId, int WebSiteId) {
            if ((WebSiteName == null)) {
                throw new global::System.ArgumentNullException("WebSiteName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(WebSiteName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_WebSiteId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(WebSiteId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string WebSiteName, int Original_WebSiteId) {
            return this.Update(WebSiteName, Original_WebSiteId, Original_WebSiteId);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AnImageTableAdapter _anImageTableAdapter;
        
        private AnImageWithoutHeadingTableAdapter _anImageWithoutHeadingTableAdapter;
        
        private CosineImageImageUnderSameHeadingTableAdapter _cosineImageImageUnderSameHeadingTableAdapter;
        
        private CosineImageImageWithoutHeadingTableAdapter _cosineImageImageWithoutHeadingTableAdapter;
        
        private CosineLinkLinkWithHeadingTableAdapter _cosineLinkLinkWithHeadingTableAdapter;
        
        private CosineLinkLinkWithHeadingTUBSTableAdapter _cosineLinkLinkWithHeadingTUBSTableAdapter;
        
        private CosineLinkLinkWithoutHeadingTableAdapter _cosineLinkLinkWithoutHeadingTableAdapter;
        
        private CosineLinkLinkWithoutHeadingTUBSTableAdapter _cosineLinkLinkWithoutHeadingTUBSTableAdapter;
        
        private GoalTableAdapter _goalTableAdapter;
        
        private HeadingTableAdapter _headingTableAdapter;
        
        private Heading_CosineTableAdapter _heading_CosineTableAdapter;
        
        private HeadingModifiedTableAdapter _headingModifiedTableAdapter;
        
        private HeadingPathAdequacy_CosineTableAdapter _headingPathAdequacy_CosineTableAdapter;
        
        private HeadingTUBSTVLTableAdapter _headingTUBSTVLTableAdapter;
        
        private HeadingvsHeadinginSamePageCosinesTableAdapter _headingvsHeadinginSamePageCosinesTableAdapter;
        
        private HeadingvsHeadinginSamePageCosinesTUBSTableAdapter _headingvsHeadinginSamePageCosinesTUBSTableAdapter;
        
        private LinkLinkTemplateOfLinksTableAdapter _linkLinkTemplateOfLinksTableAdapter;
        
        private LinkUnderHeading_CosineTableAdapter _linkUnderHeading_CosineTableAdapter;
        
        private LinkUnderHeadingPathAdequacy_CosineTableAdapter _linkUnderHeadingPathAdequacy_CosineTableAdapter;
        
        private LinkWithHeadingTableAdapter _linkWithHeadingTableAdapter;
        
        private LinkWithHeadingTUBSTableAdapter _linkWithHeadingTUBSTableAdapter;
        
        private LinkWithHeadingTUBSModifiedTableAdapter _linkWithHeadingTUBSModifiedTableAdapter;
        
        private LinkWithoutHeadingTableAdapter _linkWithoutHeadingTableAdapter;
        
        private LinkWithoutHeading_CosineTableAdapter _linkWithoutHeading_CosineTableAdapter;
        
        private LinkWithoutHeadingPathAdequacy_CosineTableAdapter _linkWithoutHeadingPathAdequacy_CosineTableAdapter;
        
        private LinkWithoutHeadingTemplateOfLinksTableAdapter _linkWithoutHeadingTemplateOfLinksTableAdapter;
        
        private LinkWithoutHeadingTemplateOfLinksTUBSTableAdapter _linkWithoutHeadingTemplateOfLinksTUBSTableAdapter;
        
        private LinkWithoutHeadingTUBSTableAdapter _linkWithoutHeadingTUBSTableAdapter;
        
        private LinkWithoutHeadingTUBSModifiedTableAdapter _linkWithoutHeadingTUBSModifiedTableAdapter;
        
        private Page_Visited_UnsuccessfullyTableAdapter _page_Visited_UnsuccessfullyTableAdapter;
        
        private PageTemplateTableAdapter _pageTemplateTableAdapter;
        
        private ParagraphTableAdapter _paragraphTableAdapter;
        
        private Paragraph_CosineTableAdapter _paragraph_CosineTableAdapter;
        
        private ParagraphTUBSTableAdapter _paragraphTUBSTableAdapter;
        
        private PathTableAdapter _pathTableAdapter;
        
        private Solution_FoundTableAdapter _solution_FoundTableAdapter;
        
        private TemplateOfLinksTableAdapter _templateOfLinksTableAdapter;
        
        private TemplateOfLinks_CosineTableAdapter _templateOfLinks_CosineTableAdapter;
        
        private TemplateOfLinksTUBSTableAdapter _templateOfLinksTUBSTableAdapter;
        
        private WebPageTableAdapter _webPageTableAdapter;
        
        private WebPageTUBSTableAdapter _webPageTUBSTableAdapter;
        
        private WebSiteTableAdapter _webSiteTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AnImageTableAdapter AnImageTableAdapter {
            get {
                return this._anImageTableAdapter;
            }
            set {
                this._anImageTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public AnImageWithoutHeadingTableAdapter AnImageWithoutHeadingTableAdapter {
            get {
                return this._anImageWithoutHeadingTableAdapter;
            }
            set {
                this._anImageWithoutHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CosineImageImageUnderSameHeadingTableAdapter CosineImageImageUnderSameHeadingTableAdapter {
            get {
                return this._cosineImageImageUnderSameHeadingTableAdapter;
            }
            set {
                this._cosineImageImageUnderSameHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CosineImageImageWithoutHeadingTableAdapter CosineImageImageWithoutHeadingTableAdapter {
            get {
                return this._cosineImageImageWithoutHeadingTableAdapter;
            }
            set {
                this._cosineImageImageWithoutHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CosineLinkLinkWithHeadingTableAdapter CosineLinkLinkWithHeadingTableAdapter {
            get {
                return this._cosineLinkLinkWithHeadingTableAdapter;
            }
            set {
                this._cosineLinkLinkWithHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CosineLinkLinkWithHeadingTUBSTableAdapter CosineLinkLinkWithHeadingTUBSTableAdapter {
            get {
                return this._cosineLinkLinkWithHeadingTUBSTableAdapter;
            }
            set {
                this._cosineLinkLinkWithHeadingTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CosineLinkLinkWithoutHeadingTableAdapter CosineLinkLinkWithoutHeadingTableAdapter {
            get {
                return this._cosineLinkLinkWithoutHeadingTableAdapter;
            }
            set {
                this._cosineLinkLinkWithoutHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CosineLinkLinkWithoutHeadingTUBSTableAdapter CosineLinkLinkWithoutHeadingTUBSTableAdapter {
            get {
                return this._cosineLinkLinkWithoutHeadingTUBSTableAdapter;
            }
            set {
                this._cosineLinkLinkWithoutHeadingTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GoalTableAdapter GoalTableAdapter {
            get {
                return this._goalTableAdapter;
            }
            set {
                this._goalTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HeadingTableAdapter HeadingTableAdapter {
            get {
                return this._headingTableAdapter;
            }
            set {
                this._headingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Heading_CosineTableAdapter Heading_CosineTableAdapter {
            get {
                return this._heading_CosineTableAdapter;
            }
            set {
                this._heading_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HeadingModifiedTableAdapter HeadingModifiedTableAdapter {
            get {
                return this._headingModifiedTableAdapter;
            }
            set {
                this._headingModifiedTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HeadingPathAdequacy_CosineTableAdapter HeadingPathAdequacy_CosineTableAdapter {
            get {
                return this._headingPathAdequacy_CosineTableAdapter;
            }
            set {
                this._headingPathAdequacy_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HeadingTUBSTVLTableAdapter HeadingTUBSTVLTableAdapter {
            get {
                return this._headingTUBSTVLTableAdapter;
            }
            set {
                this._headingTUBSTVLTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HeadingvsHeadinginSamePageCosinesTableAdapter HeadingvsHeadinginSamePageCosinesTableAdapter {
            get {
                return this._headingvsHeadinginSamePageCosinesTableAdapter;
            }
            set {
                this._headingvsHeadinginSamePageCosinesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HeadingvsHeadinginSamePageCosinesTUBSTableAdapter HeadingvsHeadinginSamePageCosinesTUBSTableAdapter {
            get {
                return this._headingvsHeadinginSamePageCosinesTUBSTableAdapter;
            }
            set {
                this._headingvsHeadinginSamePageCosinesTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkLinkTemplateOfLinksTableAdapter LinkLinkTemplateOfLinksTableAdapter {
            get {
                return this._linkLinkTemplateOfLinksTableAdapter;
            }
            set {
                this._linkLinkTemplateOfLinksTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkUnderHeading_CosineTableAdapter LinkUnderHeading_CosineTableAdapter {
            get {
                return this._linkUnderHeading_CosineTableAdapter;
            }
            set {
                this._linkUnderHeading_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkUnderHeadingPathAdequacy_CosineTableAdapter LinkUnderHeadingPathAdequacy_CosineTableAdapter {
            get {
                return this._linkUnderHeadingPathAdequacy_CosineTableAdapter;
            }
            set {
                this._linkUnderHeadingPathAdequacy_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithHeadingTableAdapter LinkWithHeadingTableAdapter {
            get {
                return this._linkWithHeadingTableAdapter;
            }
            set {
                this._linkWithHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithHeadingTUBSTableAdapter LinkWithHeadingTUBSTableAdapter {
            get {
                return this._linkWithHeadingTUBSTableAdapter;
            }
            set {
                this._linkWithHeadingTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithHeadingTUBSModifiedTableAdapter LinkWithHeadingTUBSModifiedTableAdapter {
            get {
                return this._linkWithHeadingTUBSModifiedTableAdapter;
            }
            set {
                this._linkWithHeadingTUBSModifiedTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeadingTableAdapter LinkWithoutHeadingTableAdapter {
            get {
                return this._linkWithoutHeadingTableAdapter;
            }
            set {
                this._linkWithoutHeadingTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeading_CosineTableAdapter LinkWithoutHeading_CosineTableAdapter {
            get {
                return this._linkWithoutHeading_CosineTableAdapter;
            }
            set {
                this._linkWithoutHeading_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeadingPathAdequacy_CosineTableAdapter LinkWithoutHeadingPathAdequacy_CosineTableAdapter {
            get {
                return this._linkWithoutHeadingPathAdequacy_CosineTableAdapter;
            }
            set {
                this._linkWithoutHeadingPathAdequacy_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeadingTemplateOfLinksTableAdapter LinkWithoutHeadingTemplateOfLinksTableAdapter {
            get {
                return this._linkWithoutHeadingTemplateOfLinksTableAdapter;
            }
            set {
                this._linkWithoutHeadingTemplateOfLinksTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeadingTemplateOfLinksTUBSTableAdapter LinkWithoutHeadingTemplateOfLinksTUBSTableAdapter {
            get {
                return this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter;
            }
            set {
                this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeadingTUBSTableAdapter LinkWithoutHeadingTUBSTableAdapter {
            get {
                return this._linkWithoutHeadingTUBSTableAdapter;
            }
            set {
                this._linkWithoutHeadingTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LinkWithoutHeadingTUBSModifiedTableAdapter LinkWithoutHeadingTUBSModifiedTableAdapter {
            get {
                return this._linkWithoutHeadingTUBSModifiedTableAdapter;
            }
            set {
                this._linkWithoutHeadingTUBSModifiedTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Page_Visited_UnsuccessfullyTableAdapter Page_Visited_UnsuccessfullyTableAdapter {
            get {
                return this._page_Visited_UnsuccessfullyTableAdapter;
            }
            set {
                this._page_Visited_UnsuccessfullyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PageTemplateTableAdapter PageTemplateTableAdapter {
            get {
                return this._pageTemplateTableAdapter;
            }
            set {
                this._pageTemplateTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ParagraphTableAdapter ParagraphTableAdapter {
            get {
                return this._paragraphTableAdapter;
            }
            set {
                this._paragraphTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Paragraph_CosineTableAdapter Paragraph_CosineTableAdapter {
            get {
                return this._paragraph_CosineTableAdapter;
            }
            set {
                this._paragraph_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ParagraphTUBSTableAdapter ParagraphTUBSTableAdapter {
            get {
                return this._paragraphTUBSTableAdapter;
            }
            set {
                this._paragraphTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PathTableAdapter PathTableAdapter {
            get {
                return this._pathTableAdapter;
            }
            set {
                this._pathTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Solution_FoundTableAdapter Solution_FoundTableAdapter {
            get {
                return this._solution_FoundTableAdapter;
            }
            set {
                this._solution_FoundTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TemplateOfLinksTableAdapter TemplateOfLinksTableAdapter {
            get {
                return this._templateOfLinksTableAdapter;
            }
            set {
                this._templateOfLinksTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TemplateOfLinks_CosineTableAdapter TemplateOfLinks_CosineTableAdapter {
            get {
                return this._templateOfLinks_CosineTableAdapter;
            }
            set {
                this._templateOfLinks_CosineTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TemplateOfLinksTUBSTableAdapter TemplateOfLinksTUBSTableAdapter {
            get {
                return this._templateOfLinksTUBSTableAdapter;
            }
            set {
                this._templateOfLinksTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public WebPageTableAdapter WebPageTableAdapter {
            get {
                return this._webPageTableAdapter;
            }
            set {
                this._webPageTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public WebPageTUBSTableAdapter WebPageTUBSTableAdapter {
            get {
                return this._webPageTUBSTableAdapter;
            }
            set {
                this._webPageTUBSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public WebSiteTableAdapter WebSiteTableAdapter {
            get {
                return this._webSiteTableAdapter;
            }
            set {
                this._webSiteTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._anImageTableAdapter != null) 
                            && (this._anImageTableAdapter.Connection != null))) {
                    return this._anImageTableAdapter.Connection;
                }
                if (((this._anImageWithoutHeadingTableAdapter != null) 
                            && (this._anImageWithoutHeadingTableAdapter.Connection != null))) {
                    return this._anImageWithoutHeadingTableAdapter.Connection;
                }
                if (((this._cosineImageImageUnderSameHeadingTableAdapter != null) 
                            && (this._cosineImageImageUnderSameHeadingTableAdapter.Connection != null))) {
                    return this._cosineImageImageUnderSameHeadingTableAdapter.Connection;
                }
                if (((this._cosineImageImageWithoutHeadingTableAdapter != null) 
                            && (this._cosineImageImageWithoutHeadingTableAdapter.Connection != null))) {
                    return this._cosineImageImageWithoutHeadingTableAdapter.Connection;
                }
                if (((this._cosineLinkLinkWithHeadingTableAdapter != null) 
                            && (this._cosineLinkLinkWithHeadingTableAdapter.Connection != null))) {
                    return this._cosineLinkLinkWithHeadingTableAdapter.Connection;
                }
                if (((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null) 
                            && (this._cosineLinkLinkWithHeadingTUBSTableAdapter.Connection != null))) {
                    return this._cosineLinkLinkWithHeadingTUBSTableAdapter.Connection;
                }
                if (((this._cosineLinkLinkWithoutHeadingTableAdapter != null) 
                            && (this._cosineLinkLinkWithoutHeadingTableAdapter.Connection != null))) {
                    return this._cosineLinkLinkWithoutHeadingTableAdapter.Connection;
                }
                if (((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null) 
                            && (this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Connection != null))) {
                    return this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Connection;
                }
                if (((this._goalTableAdapter != null) 
                            && (this._goalTableAdapter.Connection != null))) {
                    return this._goalTableAdapter.Connection;
                }
                if (((this._headingTableAdapter != null) 
                            && (this._headingTableAdapter.Connection != null))) {
                    return this._headingTableAdapter.Connection;
                }
                if (((this._heading_CosineTableAdapter != null) 
                            && (this._heading_CosineTableAdapter.Connection != null))) {
                    return this._heading_CosineTableAdapter.Connection;
                }
                if (((this._headingModifiedTableAdapter != null) 
                            && (this._headingModifiedTableAdapter.Connection != null))) {
                    return this._headingModifiedTableAdapter.Connection;
                }
                if (((this._headingPathAdequacy_CosineTableAdapter != null) 
                            && (this._headingPathAdequacy_CosineTableAdapter.Connection != null))) {
                    return this._headingPathAdequacy_CosineTableAdapter.Connection;
                }
                if (((this._headingTUBSTVLTableAdapter != null) 
                            && (this._headingTUBSTVLTableAdapter.Connection != null))) {
                    return this._headingTUBSTVLTableAdapter.Connection;
                }
                if (((this._headingvsHeadinginSamePageCosinesTableAdapter != null) 
                            && (this._headingvsHeadinginSamePageCosinesTableAdapter.Connection != null))) {
                    return this._headingvsHeadinginSamePageCosinesTableAdapter.Connection;
                }
                if (((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null) 
                            && (this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Connection != null))) {
                    return this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Connection;
                }
                if (((this._linkLinkTemplateOfLinksTableAdapter != null) 
                            && (this._linkLinkTemplateOfLinksTableAdapter.Connection != null))) {
                    return this._linkLinkTemplateOfLinksTableAdapter.Connection;
                }
                if (((this._linkUnderHeading_CosineTableAdapter != null) 
                            && (this._linkUnderHeading_CosineTableAdapter.Connection != null))) {
                    return this._linkUnderHeading_CosineTableAdapter.Connection;
                }
                if (((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null) 
                            && (this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Connection != null))) {
                    return this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Connection;
                }
                if (((this._linkWithHeadingTableAdapter != null) 
                            && (this._linkWithHeadingTableAdapter.Connection != null))) {
                    return this._linkWithHeadingTableAdapter.Connection;
                }
                if (((this._linkWithHeadingTUBSTableAdapter != null) 
                            && (this._linkWithHeadingTUBSTableAdapter.Connection != null))) {
                    return this._linkWithHeadingTUBSTableAdapter.Connection;
                }
                if (((this._linkWithHeadingTUBSModifiedTableAdapter != null) 
                            && (this._linkWithHeadingTUBSModifiedTableAdapter.Connection != null))) {
                    return this._linkWithHeadingTUBSModifiedTableAdapter.Connection;
                }
                if (((this._linkWithoutHeadingTableAdapter != null) 
                            && (this._linkWithoutHeadingTableAdapter.Connection != null))) {
                    return this._linkWithoutHeadingTableAdapter.Connection;
                }
                if (((this._linkWithoutHeading_CosineTableAdapter != null) 
                            && (this._linkWithoutHeading_CosineTableAdapter.Connection != null))) {
                    return this._linkWithoutHeading_CosineTableAdapter.Connection;
                }
                if (((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null) 
                            && (this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Connection != null))) {
                    return this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Connection;
                }
                if (((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null) 
                            && (this._linkWithoutHeadingTemplateOfLinksTableAdapter.Connection != null))) {
                    return this._linkWithoutHeadingTemplateOfLinksTableAdapter.Connection;
                }
                if (((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null) 
                            && (this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Connection != null))) {
                    return this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Connection;
                }
                if (((this._linkWithoutHeadingTUBSTableAdapter != null) 
                            && (this._linkWithoutHeadingTUBSTableAdapter.Connection != null))) {
                    return this._linkWithoutHeadingTUBSTableAdapter.Connection;
                }
                if (((this._linkWithoutHeadingTUBSModifiedTableAdapter != null) 
                            && (this._linkWithoutHeadingTUBSModifiedTableAdapter.Connection != null))) {
                    return this._linkWithoutHeadingTUBSModifiedTableAdapter.Connection;
                }
                if (((this._page_Visited_UnsuccessfullyTableAdapter != null) 
                            && (this._page_Visited_UnsuccessfullyTableAdapter.Connection != null))) {
                    return this._page_Visited_UnsuccessfullyTableAdapter.Connection;
                }
                if (((this._pageTemplateTableAdapter != null) 
                            && (this._pageTemplateTableAdapter.Connection != null))) {
                    return this._pageTemplateTableAdapter.Connection;
                }
                if (((this._paragraphTableAdapter != null) 
                            && (this._paragraphTableAdapter.Connection != null))) {
                    return this._paragraphTableAdapter.Connection;
                }
                if (((this._paragraph_CosineTableAdapter != null) 
                            && (this._paragraph_CosineTableAdapter.Connection != null))) {
                    return this._paragraph_CosineTableAdapter.Connection;
                }
                if (((this._paragraphTUBSTableAdapter != null) 
                            && (this._paragraphTUBSTableAdapter.Connection != null))) {
                    return this._paragraphTUBSTableAdapter.Connection;
                }
                if (((this._pathTableAdapter != null) 
                            && (this._pathTableAdapter.Connection != null))) {
                    return this._pathTableAdapter.Connection;
                }
                if (((this._solution_FoundTableAdapter != null) 
                            && (this._solution_FoundTableAdapter.Connection != null))) {
                    return this._solution_FoundTableAdapter.Connection;
                }
                if (((this._templateOfLinksTableAdapter != null) 
                            && (this._templateOfLinksTableAdapter.Connection != null))) {
                    return this._templateOfLinksTableAdapter.Connection;
                }
                if (((this._templateOfLinks_CosineTableAdapter != null) 
                            && (this._templateOfLinks_CosineTableAdapter.Connection != null))) {
                    return this._templateOfLinks_CosineTableAdapter.Connection;
                }
                if (((this._templateOfLinksTUBSTableAdapter != null) 
                            && (this._templateOfLinksTUBSTableAdapter.Connection != null))) {
                    return this._templateOfLinksTUBSTableAdapter.Connection;
                }
                if (((this._webPageTableAdapter != null) 
                            && (this._webPageTableAdapter.Connection != null))) {
                    return this._webPageTableAdapter.Connection;
                }
                if (((this._webPageTUBSTableAdapter != null) 
                            && (this._webPageTUBSTableAdapter.Connection != null))) {
                    return this._webPageTUBSTableAdapter.Connection;
                }
                if (((this._webSiteTableAdapter != null) 
                            && (this._webSiteTableAdapter.Connection != null))) {
                    return this._webSiteTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._anImageTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._anImageWithoutHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cosineImageImageUnderSameHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cosineImageImageWithoutHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cosineLinkLinkWithHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cosineLinkLinkWithoutHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._goalTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._headingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._heading_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._headingModifiedTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._headingPathAdequacy_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._headingTUBSTVLTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._headingvsHeadinginSamePageCosinesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkLinkTemplateOfLinksTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkUnderHeading_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithHeadingTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithHeadingTUBSModifiedTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeadingTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeading_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeadingTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._linkWithoutHeadingTUBSModifiedTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._page_Visited_UnsuccessfullyTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pageTemplateTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._paragraphTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._paragraph_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._paragraphTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pathTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._solution_FoundTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._templateOfLinksTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._templateOfLinks_CosineTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._templateOfLinksTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._webPageTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._webPageTUBSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._webSiteTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(InfoArchDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._headingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Heading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._headingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._webPageTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WebPage.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._webPageTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeadingTUBSModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeadingTUBSModified.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTUBSModifiedTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pageTemplateTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PageTemplate.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pageTemplateTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._page_Visited_UnsuccessfullyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Page_Visited_Unsuccessfully.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._page_Visited_UnsuccessfullyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeading_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeading_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeadingTemplateOfLinksTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithoutHeadingTemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTemplateOfLinksTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._paragraphTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Paragraph.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._paragraphTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._templateOfLinksTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TemplateOfLinksTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._templateOfLinksTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._templateOfLinks_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TemplateOfLinks_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._templateOfLinks_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._webSiteTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WebSite.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._webSiteTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._webPageTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WebPageTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._webPageTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._templateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._templateOfLinksTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._paragraphTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ParagraphTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._paragraphTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._paragraph_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Paragraph_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._paragraph_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._solution_FoundTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Solution_Found.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._solution_FoundTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pathTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Path.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pathTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithHeadingTUBSModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithHeadingTUBSModified.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithHeadingTUBSModifiedTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cosineLinkLinkWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CosineLinkLinkWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithoutHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CosineLinkLinkWithHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithHeadingTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CosineLinkLinkWithoutHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._heading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Heading_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._heading_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._goalTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Goal.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._goalTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._anImageWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AnImageWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._anImageWithoutHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._anImageTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AnImage.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._anImageTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cosineImageImageUnderSameHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CosineImageImageUnderSameHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cosineImageImageUnderSameHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cosineLinkLinkWithHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CosineLinkLinkWithHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cosineImageImageWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CosineImageImageWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cosineImageImageWithoutHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkUnderHeading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkUnderHeading_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkUnderHeading_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkLinkTemplateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkLinkTemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkLinkTemplateOfLinksTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkUnderHeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithHeadingTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._linkWithHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LinkWithHeading.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._linkWithHeadingTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._headingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._headingPathAdequacy_CosineTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._headingModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HeadingModified.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._headingModifiedTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._headingTUBSTVLTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HeadingTUBSTVL.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._headingTUBSTVLTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HeadingvsHeadinginSamePageCosinesTUBS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._headingvsHeadinginSamePageCosinesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HeadingvsHeadinginSamePageCosines.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._headingvsHeadinginSamePageCosinesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(InfoArchDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._headingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Heading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._headingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._webPageTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WebPage.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._webPageTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeadingTUBSModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeadingTUBSModified.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTUBSModifiedTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pageTemplateTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PageTemplate.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pageTemplateTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._page_Visited_UnsuccessfullyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Page_Visited_Unsuccessfully.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._page_Visited_UnsuccessfullyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeading_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeading_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeadingTemplateOfLinksTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithoutHeadingTemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTemplateOfLinksTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._paragraphTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Paragraph.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._paragraphTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._templateOfLinksTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TemplateOfLinksTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._templateOfLinksTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._templateOfLinks_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TemplateOfLinks_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._templateOfLinks_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._webSiteTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WebSite.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._webSiteTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._webPageTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WebPageTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._webPageTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._templateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._templateOfLinksTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._paragraphTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ParagraphTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._paragraphTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._paragraph_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Paragraph_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._paragraph_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._solution_FoundTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Solution_Found.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._solution_FoundTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pathTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Path.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pathTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithHeadingTUBSModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithHeadingTUBSModified.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithHeadingTUBSModifiedTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cosineLinkLinkWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CosineLinkLinkWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithoutHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CosineLinkLinkWithHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithHeadingTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CosineLinkLinkWithoutHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._heading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Heading_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._heading_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._goalTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Goal.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._goalTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._anImageWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AnImageWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._anImageWithoutHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._anImageTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AnImage.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._anImageTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cosineImageImageUnderSameHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CosineImageImageUnderSameHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cosineImageImageUnderSameHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cosineLinkLinkWithHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CosineLinkLinkWithHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cosineImageImageWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CosineImageImageWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cosineImageImageWithoutHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkUnderHeading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkUnderHeading_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkUnderHeading_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkLinkTemplateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkLinkTemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkLinkTemplateOfLinksTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkUnderHeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithHeadingTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._linkWithHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LinkWithHeading.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._linkWithHeadingTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._headingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._headingPathAdequacy_CosineTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._headingModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HeadingModified.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._headingModifiedTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._headingTUBSTVLTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HeadingTUBSTVL.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._headingTUBSTVLTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HeadingvsHeadinginSamePageCosinesTUBS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._headingvsHeadinginSamePageCosinesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HeadingvsHeadinginSamePageCosines.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._headingvsHeadinginSamePageCosinesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(InfoArchDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._headingvsHeadinginSamePageCosinesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HeadingvsHeadinginSamePageCosines.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._headingvsHeadinginSamePageCosinesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HeadingvsHeadinginSamePageCosinesTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._headingTUBSTVLTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HeadingTUBSTVL.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._headingTUBSTVLTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._headingModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HeadingModified.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._headingModifiedTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._headingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._headingPathAdequacy_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithHeadingTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkUnderHeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkLinkTemplateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkLinkTemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkLinkTemplateOfLinksTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkUnderHeading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkUnderHeading_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkUnderHeading_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cosineImageImageWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CosineImageImageWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cosineImageImageWithoutHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cosineLinkLinkWithHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CosineLinkLinkWithHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cosineImageImageUnderSameHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CosineImageImageUnderSameHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cosineImageImageUnderSameHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._anImageTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AnImage.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._anImageTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._anImageWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AnImageWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._anImageWithoutHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._goalTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Goal.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._goalTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._heading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Heading_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._heading_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CosineLinkLinkWithoutHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CosineLinkLinkWithHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithHeadingTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cosineLinkLinkWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CosineLinkLinkWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cosineLinkLinkWithoutHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithHeadingTUBSModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithHeadingTUBSModified.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithHeadingTUBSModifiedTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pathTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Path.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pathTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._solution_FoundTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Solution_Found.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._solution_FoundTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._paragraph_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Paragraph_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._paragraph_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._paragraphTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ParagraphTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._paragraphTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._templateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._templateOfLinksTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._webPageTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WebPageTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._webPageTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._webSiteTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WebSite.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._webSiteTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._templateOfLinks_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TemplateOfLinks_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._templateOfLinks_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._templateOfLinksTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TemplateOfLinksTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._templateOfLinksTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._paragraphTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Paragraph.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._paragraphTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeadingTemplateOfLinks.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTemplateOfLinksTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeadingTemplateOfLinksTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeadingPathAdequacy_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeadingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeading_CosineTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeading_Cosine.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeading_CosineTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._page_Visited_UnsuccessfullyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Page_Visited_Unsuccessfully.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._page_Visited_UnsuccessfullyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pageTemplateTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PageTemplate.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pageTemplateTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeadingTUBSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeadingTUBS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTUBSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._linkWithoutHeadingTUBSModifiedTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LinkWithoutHeadingTUBSModified.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._linkWithoutHeadingTUBSModifiedTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._webPageTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WebPage.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._webPageTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._headingTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Heading.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._headingTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(InfoArchDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._anImageTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._anImageTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._anImageWithoutHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._anImageWithoutHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cosineImageImageUnderSameHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cosineImageImageUnderSameHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cosineImageImageWithoutHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cosineImageImageWithoutHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cosineLinkLinkWithHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cosineLinkLinkWithHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cosineLinkLinkWithHeadingTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cosineLinkLinkWithoutHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cosineLinkLinkWithoutHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._goalTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._goalTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._headingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._headingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._heading_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._heading_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._headingModifiedTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._headingModifiedTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._headingPathAdequacy_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._headingPathAdequacy_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._headingTUBSTVLTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._headingTUBSTVLTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._headingvsHeadinginSamePageCosinesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._headingvsHeadinginSamePageCosinesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkLinkTemplateOfLinksTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkLinkTemplateOfLinksTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkUnderHeading_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkUnderHeading_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithHeadingTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithHeadingTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithHeadingTUBSModifiedTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithHeadingTUBSModifiedTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeadingTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeadingTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeading_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeading_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeadingTemplateOfLinksTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeadingTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeadingTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._linkWithoutHeadingTUBSModifiedTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._linkWithoutHeadingTUBSModifiedTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._page_Visited_UnsuccessfullyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._page_Visited_UnsuccessfullyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pageTemplateTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pageTemplateTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._paragraphTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._paragraphTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._paragraph_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._paragraph_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._paragraphTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._paragraphTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pathTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pathTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._solution_FoundTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._solution_FoundTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._templateOfLinksTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._templateOfLinksTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._templateOfLinks_CosineTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._templateOfLinks_CosineTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._templateOfLinksTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._templateOfLinksTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._webPageTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._webPageTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._webPageTUBSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._webPageTUBSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._webSiteTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._webSiteTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._anImageTableAdapter != null)) {
                    revertConnections.Add(this._anImageTableAdapter, this._anImageTableAdapter.Connection);
                    this._anImageTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._anImageTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._anImageTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._anImageTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._anImageTableAdapter.Adapter);
                    }
                }
                if ((this._anImageWithoutHeadingTableAdapter != null)) {
                    revertConnections.Add(this._anImageWithoutHeadingTableAdapter, this._anImageWithoutHeadingTableAdapter.Connection);
                    this._anImageWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._anImageWithoutHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._anImageWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._anImageWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._anImageWithoutHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._cosineImageImageUnderSameHeadingTableAdapter != null)) {
                    revertConnections.Add(this._cosineImageImageUnderSameHeadingTableAdapter, this._cosineImageImageUnderSameHeadingTableAdapter.Connection);
                    this._cosineImageImageUnderSameHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cosineImageImageUnderSameHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cosineImageImageUnderSameHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cosineImageImageUnderSameHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cosineImageImageUnderSameHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._cosineImageImageWithoutHeadingTableAdapter != null)) {
                    revertConnections.Add(this._cosineImageImageWithoutHeadingTableAdapter, this._cosineImageImageWithoutHeadingTableAdapter.Connection);
                    this._cosineImageImageWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cosineImageImageWithoutHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cosineImageImageWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cosineImageImageWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cosineImageImageWithoutHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._cosineLinkLinkWithHeadingTableAdapter != null)) {
                    revertConnections.Add(this._cosineLinkLinkWithHeadingTableAdapter, this._cosineLinkLinkWithHeadingTableAdapter.Connection);
                    this._cosineLinkLinkWithHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cosineLinkLinkWithHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cosineLinkLinkWithHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cosineLinkLinkWithHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cosineLinkLinkWithHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null)) {
                    revertConnections.Add(this._cosineLinkLinkWithHeadingTUBSTableAdapter, this._cosineLinkLinkWithHeadingTUBSTableAdapter.Connection);
                    this._cosineLinkLinkWithHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cosineLinkLinkWithHeadingTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cosineLinkLinkWithHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cosineLinkLinkWithHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cosineLinkLinkWithHeadingTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._cosineLinkLinkWithoutHeadingTableAdapter != null)) {
                    revertConnections.Add(this._cosineLinkLinkWithoutHeadingTableAdapter, this._cosineLinkLinkWithoutHeadingTableAdapter.Connection);
                    this._cosineLinkLinkWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cosineLinkLinkWithoutHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cosineLinkLinkWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cosineLinkLinkWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cosineLinkLinkWithoutHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null)) {
                    revertConnections.Add(this._cosineLinkLinkWithoutHeadingTUBSTableAdapter, this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Connection);
                    this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._goalTableAdapter != null)) {
                    revertConnections.Add(this._goalTableAdapter, this._goalTableAdapter.Connection);
                    this._goalTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._goalTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._goalTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._goalTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._goalTableAdapter.Adapter);
                    }
                }
                if ((this._headingTableAdapter != null)) {
                    revertConnections.Add(this._headingTableAdapter, this._headingTableAdapter.Connection);
                    this._headingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._headingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._headingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._headingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._headingTableAdapter.Adapter);
                    }
                }
                if ((this._heading_CosineTableAdapter != null)) {
                    revertConnections.Add(this._heading_CosineTableAdapter, this._heading_CosineTableAdapter.Connection);
                    this._heading_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._heading_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._heading_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._heading_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._heading_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._headingModifiedTableAdapter != null)) {
                    revertConnections.Add(this._headingModifiedTableAdapter, this._headingModifiedTableAdapter.Connection);
                    this._headingModifiedTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._headingModifiedTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._headingModifiedTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._headingModifiedTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._headingModifiedTableAdapter.Adapter);
                    }
                }
                if ((this._headingPathAdequacy_CosineTableAdapter != null)) {
                    revertConnections.Add(this._headingPathAdequacy_CosineTableAdapter, this._headingPathAdequacy_CosineTableAdapter.Connection);
                    this._headingPathAdequacy_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._headingPathAdequacy_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._headingPathAdequacy_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._headingPathAdequacy_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._headingPathAdequacy_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._headingTUBSTVLTableAdapter != null)) {
                    revertConnections.Add(this._headingTUBSTVLTableAdapter, this._headingTUBSTVLTableAdapter.Connection);
                    this._headingTUBSTVLTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._headingTUBSTVLTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._headingTUBSTVLTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._headingTUBSTVLTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._headingTUBSTVLTableAdapter.Adapter);
                    }
                }
                if ((this._headingvsHeadinginSamePageCosinesTableAdapter != null)) {
                    revertConnections.Add(this._headingvsHeadinginSamePageCosinesTableAdapter, this._headingvsHeadinginSamePageCosinesTableAdapter.Connection);
                    this._headingvsHeadinginSamePageCosinesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._headingvsHeadinginSamePageCosinesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._headingvsHeadinginSamePageCosinesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._headingvsHeadinginSamePageCosinesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._headingvsHeadinginSamePageCosinesTableAdapter.Adapter);
                    }
                }
                if ((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null)) {
                    revertConnections.Add(this._headingvsHeadinginSamePageCosinesTUBSTableAdapter, this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Connection);
                    this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._linkLinkTemplateOfLinksTableAdapter != null)) {
                    revertConnections.Add(this._linkLinkTemplateOfLinksTableAdapter, this._linkLinkTemplateOfLinksTableAdapter.Connection);
                    this._linkLinkTemplateOfLinksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkLinkTemplateOfLinksTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkLinkTemplateOfLinksTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkLinkTemplateOfLinksTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkLinkTemplateOfLinksTableAdapter.Adapter);
                    }
                }
                if ((this._linkUnderHeading_CosineTableAdapter != null)) {
                    revertConnections.Add(this._linkUnderHeading_CosineTableAdapter, this._linkUnderHeading_CosineTableAdapter.Connection);
                    this._linkUnderHeading_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkUnderHeading_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkUnderHeading_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkUnderHeading_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkUnderHeading_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null)) {
                    revertConnections.Add(this._linkUnderHeadingPathAdequacy_CosineTableAdapter, this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Connection);
                    this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithHeadingTableAdapter != null)) {
                    revertConnections.Add(this._linkWithHeadingTableAdapter, this._linkWithHeadingTableAdapter.Connection);
                    this._linkWithHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithHeadingTUBSTableAdapter != null)) {
                    revertConnections.Add(this._linkWithHeadingTUBSTableAdapter, this._linkWithHeadingTUBSTableAdapter.Connection);
                    this._linkWithHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithHeadingTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithHeadingTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithHeadingTUBSModifiedTableAdapter != null)) {
                    revertConnections.Add(this._linkWithHeadingTUBSModifiedTableAdapter, this._linkWithHeadingTUBSModifiedTableAdapter.Connection);
                    this._linkWithHeadingTUBSModifiedTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithHeadingTUBSModifiedTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithHeadingTUBSModifiedTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithHeadingTUBSModifiedTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithHeadingTUBSModifiedTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeadingTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeadingTableAdapter, this._linkWithoutHeadingTableAdapter.Connection);
                    this._linkWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeadingTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeadingTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeadingTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeading_CosineTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeading_CosineTableAdapter, this._linkWithoutHeading_CosineTableAdapter.Connection);
                    this._linkWithoutHeading_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeading_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeading_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeading_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeading_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeadingPathAdequacy_CosineTableAdapter, this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Connection);
                    this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeadingTemplateOfLinksTableAdapter, this._linkWithoutHeadingTemplateOfLinksTableAdapter.Connection);
                    this._linkWithoutHeadingTemplateOfLinksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeadingTemplateOfLinksTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeadingTemplateOfLinksTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeadingTemplateOfLinksTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeadingTemplateOfLinksTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter, this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Connection);
                    this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeadingTUBSTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeadingTUBSTableAdapter, this._linkWithoutHeadingTUBSTableAdapter.Connection);
                    this._linkWithoutHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeadingTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeadingTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeadingTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._linkWithoutHeadingTUBSModifiedTableAdapter != null)) {
                    revertConnections.Add(this._linkWithoutHeadingTUBSModifiedTableAdapter, this._linkWithoutHeadingTUBSModifiedTableAdapter.Connection);
                    this._linkWithoutHeadingTUBSModifiedTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._linkWithoutHeadingTUBSModifiedTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._linkWithoutHeadingTUBSModifiedTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._linkWithoutHeadingTUBSModifiedTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._linkWithoutHeadingTUBSModifiedTableAdapter.Adapter);
                    }
                }
                if ((this._page_Visited_UnsuccessfullyTableAdapter != null)) {
                    revertConnections.Add(this._page_Visited_UnsuccessfullyTableAdapter, this._page_Visited_UnsuccessfullyTableAdapter.Connection);
                    this._page_Visited_UnsuccessfullyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._page_Visited_UnsuccessfullyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._page_Visited_UnsuccessfullyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._page_Visited_UnsuccessfullyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._page_Visited_UnsuccessfullyTableAdapter.Adapter);
                    }
                }
                if ((this._pageTemplateTableAdapter != null)) {
                    revertConnections.Add(this._pageTemplateTableAdapter, this._pageTemplateTableAdapter.Connection);
                    this._pageTemplateTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pageTemplateTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pageTemplateTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pageTemplateTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pageTemplateTableAdapter.Adapter);
                    }
                }
                if ((this._paragraphTableAdapter != null)) {
                    revertConnections.Add(this._paragraphTableAdapter, this._paragraphTableAdapter.Connection);
                    this._paragraphTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._paragraphTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._paragraphTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._paragraphTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._paragraphTableAdapter.Adapter);
                    }
                }
                if ((this._paragraph_CosineTableAdapter != null)) {
                    revertConnections.Add(this._paragraph_CosineTableAdapter, this._paragraph_CosineTableAdapter.Connection);
                    this._paragraph_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._paragraph_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._paragraph_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._paragraph_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._paragraph_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._paragraphTUBSTableAdapter != null)) {
                    revertConnections.Add(this._paragraphTUBSTableAdapter, this._paragraphTUBSTableAdapter.Connection);
                    this._paragraphTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._paragraphTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._paragraphTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._paragraphTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._paragraphTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._pathTableAdapter != null)) {
                    revertConnections.Add(this._pathTableAdapter, this._pathTableAdapter.Connection);
                    this._pathTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pathTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pathTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pathTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pathTableAdapter.Adapter);
                    }
                }
                if ((this._solution_FoundTableAdapter != null)) {
                    revertConnections.Add(this._solution_FoundTableAdapter, this._solution_FoundTableAdapter.Connection);
                    this._solution_FoundTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._solution_FoundTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._solution_FoundTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._solution_FoundTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._solution_FoundTableAdapter.Adapter);
                    }
                }
                if ((this._templateOfLinksTableAdapter != null)) {
                    revertConnections.Add(this._templateOfLinksTableAdapter, this._templateOfLinksTableAdapter.Connection);
                    this._templateOfLinksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._templateOfLinksTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._templateOfLinksTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._templateOfLinksTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._templateOfLinksTableAdapter.Adapter);
                    }
                }
                if ((this._templateOfLinks_CosineTableAdapter != null)) {
                    revertConnections.Add(this._templateOfLinks_CosineTableAdapter, this._templateOfLinks_CosineTableAdapter.Connection);
                    this._templateOfLinks_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._templateOfLinks_CosineTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._templateOfLinks_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._templateOfLinks_CosineTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._templateOfLinks_CosineTableAdapter.Adapter);
                    }
                }
                if ((this._templateOfLinksTUBSTableAdapter != null)) {
                    revertConnections.Add(this._templateOfLinksTUBSTableAdapter, this._templateOfLinksTUBSTableAdapter.Connection);
                    this._templateOfLinksTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._templateOfLinksTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._templateOfLinksTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._templateOfLinksTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._templateOfLinksTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._webPageTableAdapter != null)) {
                    revertConnections.Add(this._webPageTableAdapter, this._webPageTableAdapter.Connection);
                    this._webPageTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._webPageTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._webPageTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._webPageTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._webPageTableAdapter.Adapter);
                    }
                }
                if ((this._webPageTUBSTableAdapter != null)) {
                    revertConnections.Add(this._webPageTUBSTableAdapter, this._webPageTUBSTableAdapter.Connection);
                    this._webPageTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._webPageTUBSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._webPageTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._webPageTUBSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._webPageTUBSTableAdapter.Adapter);
                    }
                }
                if ((this._webSiteTableAdapter != null)) {
                    revertConnections.Add(this._webSiteTableAdapter, this._webSiteTableAdapter.Connection);
                    this._webSiteTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._webSiteTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._webSiteTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._webSiteTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._webSiteTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._anImageTableAdapter != null)) {
                    this._anImageTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._anImageTableAdapter]));
                    this._anImageTableAdapter.Transaction = null;
                }
                if ((this._anImageWithoutHeadingTableAdapter != null)) {
                    this._anImageWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._anImageWithoutHeadingTableAdapter]));
                    this._anImageWithoutHeadingTableAdapter.Transaction = null;
                }
                if ((this._cosineImageImageUnderSameHeadingTableAdapter != null)) {
                    this._cosineImageImageUnderSameHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cosineImageImageUnderSameHeadingTableAdapter]));
                    this._cosineImageImageUnderSameHeadingTableAdapter.Transaction = null;
                }
                if ((this._cosineImageImageWithoutHeadingTableAdapter != null)) {
                    this._cosineImageImageWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cosineImageImageWithoutHeadingTableAdapter]));
                    this._cosineImageImageWithoutHeadingTableAdapter.Transaction = null;
                }
                if ((this._cosineLinkLinkWithHeadingTableAdapter != null)) {
                    this._cosineLinkLinkWithHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cosineLinkLinkWithHeadingTableAdapter]));
                    this._cosineLinkLinkWithHeadingTableAdapter.Transaction = null;
                }
                if ((this._cosineLinkLinkWithHeadingTUBSTableAdapter != null)) {
                    this._cosineLinkLinkWithHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cosineLinkLinkWithHeadingTUBSTableAdapter]));
                    this._cosineLinkLinkWithHeadingTUBSTableAdapter.Transaction = null;
                }
                if ((this._cosineLinkLinkWithoutHeadingTableAdapter != null)) {
                    this._cosineLinkLinkWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cosineLinkLinkWithoutHeadingTableAdapter]));
                    this._cosineLinkLinkWithoutHeadingTableAdapter.Transaction = null;
                }
                if ((this._cosineLinkLinkWithoutHeadingTUBSTableAdapter != null)) {
                    this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cosineLinkLinkWithoutHeadingTUBSTableAdapter]));
                    this._cosineLinkLinkWithoutHeadingTUBSTableAdapter.Transaction = null;
                }
                if ((this._goalTableAdapter != null)) {
                    this._goalTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._goalTableAdapter]));
                    this._goalTableAdapter.Transaction = null;
                }
                if ((this._headingTableAdapter != null)) {
                    this._headingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._headingTableAdapter]));
                    this._headingTableAdapter.Transaction = null;
                }
                if ((this._heading_CosineTableAdapter != null)) {
                    this._heading_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._heading_CosineTableAdapter]));
                    this._heading_CosineTableAdapter.Transaction = null;
                }
                if ((this._headingModifiedTableAdapter != null)) {
                    this._headingModifiedTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._headingModifiedTableAdapter]));
                    this._headingModifiedTableAdapter.Transaction = null;
                }
                if ((this._headingPathAdequacy_CosineTableAdapter != null)) {
                    this._headingPathAdequacy_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._headingPathAdequacy_CosineTableAdapter]));
                    this._headingPathAdequacy_CosineTableAdapter.Transaction = null;
                }
                if ((this._headingTUBSTVLTableAdapter != null)) {
                    this._headingTUBSTVLTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._headingTUBSTVLTableAdapter]));
                    this._headingTUBSTVLTableAdapter.Transaction = null;
                }
                if ((this._headingvsHeadinginSamePageCosinesTableAdapter != null)) {
                    this._headingvsHeadinginSamePageCosinesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._headingvsHeadinginSamePageCosinesTableAdapter]));
                    this._headingvsHeadinginSamePageCosinesTableAdapter.Transaction = null;
                }
                if ((this._headingvsHeadinginSamePageCosinesTUBSTableAdapter != null)) {
                    this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._headingvsHeadinginSamePageCosinesTUBSTableAdapter]));
                    this._headingvsHeadinginSamePageCosinesTUBSTableAdapter.Transaction = null;
                }
                if ((this._linkLinkTemplateOfLinksTableAdapter != null)) {
                    this._linkLinkTemplateOfLinksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkLinkTemplateOfLinksTableAdapter]));
                    this._linkLinkTemplateOfLinksTableAdapter.Transaction = null;
                }
                if ((this._linkUnderHeading_CosineTableAdapter != null)) {
                    this._linkUnderHeading_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkUnderHeading_CosineTableAdapter]));
                    this._linkUnderHeading_CosineTableAdapter.Transaction = null;
                }
                if ((this._linkUnderHeadingPathAdequacy_CosineTableAdapter != null)) {
                    this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkUnderHeadingPathAdequacy_CosineTableAdapter]));
                    this._linkUnderHeadingPathAdequacy_CosineTableAdapter.Transaction = null;
                }
                if ((this._linkWithHeadingTableAdapter != null)) {
                    this._linkWithHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithHeadingTableAdapter]));
                    this._linkWithHeadingTableAdapter.Transaction = null;
                }
                if ((this._linkWithHeadingTUBSTableAdapter != null)) {
                    this._linkWithHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithHeadingTUBSTableAdapter]));
                    this._linkWithHeadingTUBSTableAdapter.Transaction = null;
                }
                if ((this._linkWithHeadingTUBSModifiedTableAdapter != null)) {
                    this._linkWithHeadingTUBSModifiedTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithHeadingTUBSModifiedTableAdapter]));
                    this._linkWithHeadingTUBSModifiedTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeadingTableAdapter != null)) {
                    this._linkWithoutHeadingTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeadingTableAdapter]));
                    this._linkWithoutHeadingTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeading_CosineTableAdapter != null)) {
                    this._linkWithoutHeading_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeading_CosineTableAdapter]));
                    this._linkWithoutHeading_CosineTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeadingPathAdequacy_CosineTableAdapter != null)) {
                    this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeadingPathAdequacy_CosineTableAdapter]));
                    this._linkWithoutHeadingPathAdequacy_CosineTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeadingTemplateOfLinksTableAdapter != null)) {
                    this._linkWithoutHeadingTemplateOfLinksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeadingTemplateOfLinksTableAdapter]));
                    this._linkWithoutHeadingTemplateOfLinksTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter != null)) {
                    this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter]));
                    this._linkWithoutHeadingTemplateOfLinksTUBSTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeadingTUBSTableAdapter != null)) {
                    this._linkWithoutHeadingTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeadingTUBSTableAdapter]));
                    this._linkWithoutHeadingTUBSTableAdapter.Transaction = null;
                }
                if ((this._linkWithoutHeadingTUBSModifiedTableAdapter != null)) {
                    this._linkWithoutHeadingTUBSModifiedTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._linkWithoutHeadingTUBSModifiedTableAdapter]));
                    this._linkWithoutHeadingTUBSModifiedTableAdapter.Transaction = null;
                }
                if ((this._page_Visited_UnsuccessfullyTableAdapter != null)) {
                    this._page_Visited_UnsuccessfullyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._page_Visited_UnsuccessfullyTableAdapter]));
                    this._page_Visited_UnsuccessfullyTableAdapter.Transaction = null;
                }
                if ((this._pageTemplateTableAdapter != null)) {
                    this._pageTemplateTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pageTemplateTableAdapter]));
                    this._pageTemplateTableAdapter.Transaction = null;
                }
                if ((this._paragraphTableAdapter != null)) {
                    this._paragraphTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._paragraphTableAdapter]));
                    this._paragraphTableAdapter.Transaction = null;
                }
                if ((this._paragraph_CosineTableAdapter != null)) {
                    this._paragraph_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._paragraph_CosineTableAdapter]));
                    this._paragraph_CosineTableAdapter.Transaction = null;
                }
                if ((this._paragraphTUBSTableAdapter != null)) {
                    this._paragraphTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._paragraphTUBSTableAdapter]));
                    this._paragraphTUBSTableAdapter.Transaction = null;
                }
                if ((this._pathTableAdapter != null)) {
                    this._pathTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pathTableAdapter]));
                    this._pathTableAdapter.Transaction = null;
                }
                if ((this._solution_FoundTableAdapter != null)) {
                    this._solution_FoundTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._solution_FoundTableAdapter]));
                    this._solution_FoundTableAdapter.Transaction = null;
                }
                if ((this._templateOfLinksTableAdapter != null)) {
                    this._templateOfLinksTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._templateOfLinksTableAdapter]));
                    this._templateOfLinksTableAdapter.Transaction = null;
                }
                if ((this._templateOfLinks_CosineTableAdapter != null)) {
                    this._templateOfLinks_CosineTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._templateOfLinks_CosineTableAdapter]));
                    this._templateOfLinks_CosineTableAdapter.Transaction = null;
                }
                if ((this._templateOfLinksTUBSTableAdapter != null)) {
                    this._templateOfLinksTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._templateOfLinksTUBSTableAdapter]));
                    this._templateOfLinksTUBSTableAdapter.Transaction = null;
                }
                if ((this._webPageTableAdapter != null)) {
                    this._webPageTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._webPageTableAdapter]));
                    this._webPageTableAdapter.Transaction = null;
                }
                if ((this._webPageTUBSTableAdapter != null)) {
                    this._webPageTUBSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._webPageTUBSTableAdapter]));
                    this._webPageTUBSTableAdapter.Transaction = null;
                }
                if ((this._webSiteTableAdapter != null)) {
                    this._webSiteTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._webSiteTableAdapter]));
                    this._webSiteTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591